<?php

namespace LORIS\biobank;

/**
 * Specimen Data Access Object (DAO) Class
 * This class contains all database handling that is needed to
 * permanently store and retrieve Specimen Transfer Object instances
 *
 * PHP Version 7.0
 *
 * @category Loris
 * @package  Biobank
 * @author   Henri Rabalais <hrabalais.mcin@gmail.com>
 * @license  http://www.gnu.org/licenses/gpl-3.0.txt GPLv3
 * @link     https://www.github.com/aces/Loris/
 */

class SpecimenDAO 
{

    /**
     * Global variable $db
     *
     * @access public
     */
    public $db;

    /**
     * Initializes a new instance of the SpecimenDAO Class
     *
     * @param object $database Instance of the LORIS Database class
     */
    function __construct($database) {
        $this->db = $database;
    }

    /**
     * This method is used when the DAO class needs to create new Specimen 
	 * instance.
     * 
     * @return object SpecimenTO
     */
    private function createSpecimen()
    {
        return new SpecimenTO();
    }
   
	/**
	 * This method creates a Specimen instance from the result of a database 
	 * query of the biobank_specimen table. 
	 *
	 * @param  array  $specimenData Array from which a SpecimenTO will be instantiated
	 * @return object $specimen
	 */
    private function createSpecimenFromQuery(array $specimenData) {
        $specimen = $this->createSpecimen();
        $this->fromSQL($specimen, $specimenData);
    	
        return $specimen;
    }
    
    /**
	 * This will load all specimen persistence variables from the database for a given $id
     * into a SpecimenTO object, and return the object.
     *
     * @param  int    $id       Value of the $id for the SpecimenTO that will be instantiated
     * @return object $specimen
     */
    public function getSpecimenFromId(int $id) {
        $query = "SELECT bs.SpecimenID, bs.ContainerID, bs.SpecimenTypeID, bs.Quantity, 
                    bs.UnitID, bs.ParentSpecimenID, bs.CandidateID, bs.SessionID, 
                    bsc.Quantity as CollectionQuantity, bsc.UnitID as CollectionUnitID, 
                    bsc.CenterID as CollectionCenterID, bsc.Date as CollectionDate, 
                    bsc.Time as CollectionTime, bsc.Comments as CollectionComments, 
                    bsc.Data as CollectionData, bsp.SpecimenProtocolID, 
                    bsp.CenterID as PreparationCenterID,
                    bsp.Date as PreparationDate, bsp.Time as PreparationTime,
                    bsp.Comments as PreparationComments, bsp.Data as PreparationData,
                    bsa.CenterID as AnalysisCenterID, bsa.Date as AnalysisDate, 
                    bsa.Time as AnalysisTime, bsa.Comments as AnalysisComments,
                    bsa.Data as AnalysisData
                  FROM biobank_specimen bs
                  LEFT JOIN biobank_specimen_collection bsc USING (SpecimenID)
                  LEFT JOIN biobank_specimen_preparation bsp USING (SpecimenID)
                  LEFT JOIN biobank_specimen_analysis bsa USING (SpecimenID)
                  WHERE bs.SpecimenID=:i";
        $result = $this->db->pselectRow($query, array('i' => $id));
    
        $specimen = $this->createSpecimenFromQuery($result);
        
        return $specimen;
    }
   
	/**
	 * This will load all specimen contents from the database for a given $barcode.
	 *
	 * @param  string $barcode  Value of the $barcode for the parentContainer of the 
                                SpecimenTO that will be instantiated
	 * @return object $specimen
	 */ 
    public function getSpecimenFromBarcode(string $barcode) 
    {
        $id       = $this->getSpecimenIdFromBarcode($barcode);
        $specimen = $this->getSpecimenFromId($id);
    
        return $specimen;
    }	

	/** NOT CURRENTLY IN USE - DEPRECATED
	 * This will select all specimens from the database that match the 
	 * attribute values passed through $specimenData and will return an array
	 * of specimen objects.
	 * 
	 * @param  array $specimenData
	 * @return array $specimens
	 */
    public function selectSpecimens(array $specimenData) {
        $conditions = $this->db->_implodeWithKeys(' AND ', $specimenData);
    
        $query  = "SELECT * FROM biobank_specimen 
                   WHERE ".$conditions;
        $result = $this->db->pselect($query, array());
    
		$specimens = array();
        if(!empty($result)) {
        	foreach ($result as $row) {
        		$specimens[] = $this->createSpecimenFromQuery($row);
        	}
        }
        
        return $specimens;
    }	

	/**
	 * This function creates an instance of the parent specimen object of the
	 * specimen that is passed, if it exists.
	 *
	 * @param  object $specimen       SpecimenTO instance from which to which retrieve
                                      a parentSpecimenTO
	 * @return object $parentSpecimen
	 */
    public function getParentSpecimen(SpecimenTO $specimen) {
        $parentSpecimenId = $specimen->getParentSpecimenId();

        if (isset($parentSpecimenId)) {			
            $parentSpecimen = $this->getSpecimenFromId($parentSpecimenId);

    	    return $parentSpecimen;
    	}
    }
    
	/**
	 * Queries all rows of the biobank_specimen_type table and returns a nested
	 * array with the ID field as the index.
	 *
	 * @return array $specimenTypes 
	 */
    public function getSpecimenTypes() {
        $query = "SELECT SpecimenTypeID as id, Label as type, ParentSpecimenTypeID as parentTypeId
                  FROM biobank_specimen_type";
        $specimenTypes = $this->queryToArray($query, 'id');
    
        return $specimenTypes;
    }

	/**
	 * Queries all rows of the biobank_specimen_protocol table and returns a nested
	 * array with the ID field as the index.
	 *
	 * @return array $specimenProtocols 
	 */
    public function getSpecimenProtocols() {
        $query = "SELECT SpecimenProtocolID as id, Label as protocol 
                  FROM biobank_specimen_protocol";
        $specimenProtocols = $this->queryToArray($query, 'id');
    
        return $specimenProtocols;
    }

	/**
	 * Queries all rows of the biobank_unit table and returns a nested
	 * array with the ID field as the index.
	 *
	 * @return array $specimenUnits 
	 */
    public function getSpecimenUnits() {
        $query = "SELECT UnitID as id, Label as unit 
                  FROM biobank_unit";
        $specimenUnits = $this->queryToArray($query, 'id');
    
        return $specimenUnits;
    }

    /** THIS FUNCTION SHOULD BE MOVED TO A CandidateDAO EVENTUALLY
     * Queries a single row of the candidate table and returns a nested array
	 * with the CandID field as the index.
	 *
	 * @param  int   $candId         Value of the CandID field for the desired Candidate
	 * @return array $candidateInfo
	 */
	public function getCandidateInfo(int $candId) {
        $query  = "SELECT * FROM candidate
                   WHERE CandID=:i";
        $candidateInfo = $this->queryToArray($query, 'CandID', array('i' => $candId));

        return $candidateInfo;
    }

    /** THIS FUNCTION SHOULD BE MOVED TO A SessionDAO EVENTUALLY
     * Queries a single row of the session table and returns a nested array
	 * with the ID field as the index.
	 *
	 * @param  int   $id          Value of the ID field for the desired Session
	 * @return array $sessionInfo
	 */
	public function getSessionInfo(int $id) {
        $query  = "SELECT * FROM session
                   WHERE ID=:i";
        $sessionInfo = $this->queryToArray($query, 'ID', array('i' => $id));

        return $sessionInfo;
    }
 
	/**
	 * Queries all rows of the biobank_specimen_type_unit_rel table and returns a nested
	 * array with the TypeID field as the first index, and the UnitID field as the second
     * index.
	 *
	 * @return array $specimenTypeUnits 
	 */
    public function getSpecimenTypeUnits() {
        $query = "SELECT bst.SpecimenTypeID as typeId, bu.UnitID as unitId, bu.Label as unit
                  FROM biobank_specimen_type_unit_rel bstu
                  JOIN biobank_specimen_type bst USING (SpecimenTypeID)
                  JOIN biobank_unit bu USING (UnitID)";
        $result = $this->db->pselect($query, array());
        $specimenTypeUnits = array();
        foreach($result as $row) {
          foreach($row as $column=>$value) {
            $specimenTypeUnits[$row['typeId']][$row['unitId']][$column] = $value;
            unset($specimenTypeUnits[$row['typeId']][$row['unitId']]['typeId']);
            unset($specimenTypeUnits[$row['typeId']][$row['unitId']]['unitId']);
            // OR
            //$specimenTypeUnits[$row['typeId']][$row['unitId']]['unit'] = $row['unit'];
          }
        }

        return $specimenTypeUnits;
    }

    /**
	 * Queries all rows from the biobank_specimen_attribute table and returns
	 * a nested array with the TypeID field as the first index, and the AttributeID
     * as the second index.
     *
	 * @return array $specimenTypeAttributes
	 */
    public function getSpecimenTypeAttributes() {
        $query = "SELECT bst.SpecimenTypeID as typeId, bsa.SpecimenAttributeID as attributeId, bsa.Label as name, 
                    bsa.DatatypeID as datatypeId, bsa.ReferenceTableID as refTableId, 
                    bsta.Required as required
                  FROM biobank_specimen_type_attribute_rel bsta
                  JOIN biobank_specimen_type bst USING (SpecimenTypeID)
                  JOIN biobank_specimen_attribute bsa USING (SpecimenAttributeID)";
        $result = $this->db->pselect($query, array());
        $specimenTypeAttributes  = array();
        foreach($result as $row) {
          foreach($row as $column=>$value) {
            $specimenTypeAttributes[$row['typeId']][$row['attributeId']][$column] = $value;
            unset($specimenTypeAttributes[$row['typeId']][$row['attributeId']]['typeId']);
            unset($specimenTypeAttributes[$row['typeId']][$row['attributeId']]['attributeId']);
            //NOT SURE IF BELOW OR ABOVE IS BETTER OR IF SHOULD UNSET THOSE NOT USING
            //$specimenTypeAttributes[$row['typeId']][$row['attributeId']]['required'] = $row['required'];
            //$specimenTypeAttributes[$row['typeId']][$row['attributeId']]['datatypeId'] = $row['datatypeId'];
            //$specimenTypeAttributes[$row['typeId']][$row['attributeId']]['refTableId'] = $row['refTableId'];
            //$specimenTypeAttributes[$row['typeId']][$row['attributeId']]['required'] = $row['required    '];
          }
        }
    
        return $specimenTypeAttributes;
    }

    /**
	 * Queries all rows from the biobank_specimen_protocol_rel table and returns
	 * a nested array with the TypeID field as the first index, and the AttributeID
     * as the second index.
     *
	 * @return array $array
	 */
    public function getSpecimenProtocolAttributes() {
        $query = "SELECT bsp.SpecimenProtocolID as protocolId, bsp.SpecimenTypeID as typeId,
                    bsa.SpecimenAttributeID as attributeId, bsa.Label as name, bsa.DatatypeID as datatypeId,
                    bsa.ReferenceTableID as refTableId, bspa.Required as required
                  FROM biobank_specimen_protocol_attribute_rel bspa
                  JOIN biobank_specimen_protocol bsp USING (SpecimenProtocolID)
                  JOIN biobank_specimen_attribute bsa USING (SpecimenAttributeID)";
        $result = $this->db->pselect($query, array());
        $specimenProtocolAttributes  = array();
        foreach($result as $row) {
          foreach($row as $column=>$value) {
            $specimenProtocolAttributes[$row['typeId']][$row['protocolId']][$row['attributeId']][$column] = $value;
            unset($specimenProtocolAttributes[$row['typeId']][$row['protocolId']][$row['attributeId']]['protocolId']);
            unset($specimenProtocolAttributes[$row['typeId']][$row['protocolId']][$row['attributeId']]['attributeId']);
            //TODO: NOT SURE IF BELOW OR ABOVE IS BETTER OR IF SHOULD UNSET THOSE NOT USING
            //$specimenProtocolAttributes[$row['protocolId']][$row['attributeId']]['required'] = $row['required'];
            //$specimenProtocolAttributes[$row['protocolId']][$row['attributeId']]['datatypeId'] = $row['datatypeId'];
            //$specimenProtocolAttributes[$row['protocolId']][$row['attributeId']]['refTableId'] = $row['refTableId'];
            //$specimenProtocolAttributes[$row['protocolId']][$row['attributeId']]['required'] = $row['required    '];
          }
        }
    
        return $specimenProtocolAttributes;
    }

    public function getAttributeDatatypes() {
        $query = "SELECT DatatypeID as id, Datatype as datatype 
                  FROM biobank_datatype";
        $attributeDatatypes = $this->queryToArray($query, 'id');
        
        return $attributeDatatypes;
    }
 
    public function getAttributeOptions() {
        $query = "SELECT ReferenceTableID as id, TableName as tableName, ColumnName as columnName
                  FROM biobank_reference_table";
        $attributeOptionsReferences = $this->db->pselect($query, array());

        $attributeOptions = array();
        foreach($attributeOptionsReferences as $reference) {
          $query = "SELECT ".$reference['columnName']." FROM ".$reference['tableName'];
          $result = $this->db->pselect($query, array());
         
          $options = array();
          foreach ($result as $row) {
            $options[$row[$reference['columnName']]] = $row[$reference['columnName']];
          }

          $attributeOptions[$reference['id']] = $options;
        }

        return $attributeOptions;
    }

	/** This will be replaced by pselectwithIndexKey
	 * Queries each row of a table specified by the $query and a returns a
	 * nested array with the id column of the table as index for each row
	 *
	 * @param string $query
	 * @param string $primaryKey
	 * @return array $info
	 */
    private function queryToArray(string $query, string $primaryKey, array $condition=array()) {
        $result = $this->db->pselect($query, $condition);

        $info = array();
        foreach($result as $row) {
            $info[$row[$primaryKey]] = $row;
            unset($info[$row[$primaryKey]][$primaryKey]);
        }
    
        return $info;
    }
    
    /**
     * insertSpecimen-method. This will create new row in database according to supplied
     * specimen contents. Make sure that values for all NOT NULL columns are
     * correctly specified. Also, if this table does not use automatic surrage-keys
     * the primary-key must be specified. After INSERT command this method will
     * read the generated primary-key back to specimen if automatic surrage-keys
     * were used.
     *
     * @param specimen 	This parameter containes the class instance to be create.
     *				If automatic surrogate-keys are not used the Primary-key
     *				field must be set for this to work properly.
     */
    private function insertSpecimen(SpecimenTO $specimen) {
    	$specimenData = $this->toSQL($specimen);
    	//handle json data object here
    	$this->db->insert('biobank_specimen', $specimenData);
    
    	//should return false if insert is not succesful
        return true;
    }
    
    /**
     * updateSpecimen-method. This method will save the current state of specimen to database.
     * Save can not be used to create new instances in database, so upper layer must
     * make sure that the primary-key is correctly specified. Primary-key will indicate
     * which instance is going to be updated in database. If save can not find matching
     * row, NotFoundException will be thrown.
     *
     * @param specimen This parameter contains the class instance to be saved.
     *		Primary-key field must be set to work properly.
     */
    private function updateSpecimen(SpecimenTO $specimen) {
    	$specimenData = $this->toSQL($specimen);
    	$this->db->update('biobank_specimen', $specimenData, array('id' => $specimen->getId()));
    
    	//should return false if did not work
    	return true;
    }
    
    // This is only in use in the specimen.class.inc file and should perhaps be revisited
    // as to whether or not it is necessary. It seems that a lot of these cascading functions
    // are only used in one location and could be condensed or replaced.
    public function getSpecimenIdFromBarcode(string $barcode)
    {
        if (!isset($barcode) || empty($barcode)) {
    		return false;
        }     
    
        $containerDAO = new ContainerDAO($this->db);
        $containerId  = $containerDAO->getContainerIdFromBarcode($barcode);
    
        $query  = "SELECT SpecimenID FROM biobank_specimen bs
                   WHERE ContainerID=:cid";
        $specimenId = $this->db->pselectOne($query, array('cid'=>$containerId));
        
        if (empty($specimenId)) {
        	return false;
        }
             
        return $specimenId; 
    }
    
    // I cannot find where this function is currently used and there may in face be no
    // need for it.
    public function getBarcodeFromSpecimenId(int $id) 
    {
        if (!isset($id) || empty($id)) {
    		return false;
        }

        $query  = "SELECT ContainerID FROM biobank_specimen bs
                   WHERE ContainerID=:i";
        $containerId = $this->db->pselectOne($query, array('i'=>$id));
    
        $containerDAO = new ContainerDAO($this->db);
        $barcode      = $containerDAO->getBarcodeFromContainerId($containerId); 
    
        return $barcode;
    }
	
	/*
     * toArray will return an Array representing the statof the Specimen TO.
     * This is useful
     */
    private function toSQL(SpecimenTO $specimen) 
    {
        $specimenData = array();
        if (isset($specimen->getId)) {
            $specimenData['SpecimenID']       = $specimen->getId;
        }
        if (isset($specimen->getContainerId)) {  
            $specimenData['ContainerID']      = $specimen->getContainerId;
        }
        if (isset($specimen->getTypeId)) {
            $specimenData['SpecimenTypeID']   = $specimen->getTypeId;
        }
        if (isset($specimen->getQuantity)) {
            $specimenData['Quantity']         = $specimen->getQuantity;
        }
        if (isset($specimen->getUnitId)) {
            $specimenData['UnitID']           = $specimen->getUnitId;
        }
        if (isset($specimen->getParentSpecimenId)) {
            $specimenData['ParentSpecimenID'] = $specimen->getParentSpecimenId;
        }
        if (isset($specimen->getCandidateId)) {   
            $specimenData['CandidateID']      = $specimen->getCandidateId;
        }
        if (isset($specimen->getSessionid)) {
            $specimenData['SessionID']        = $specimen->getSessionid;
        }
        if (isset($specimen->getDateTimeUpdate)) {
            $specimenData['DateTimeUpdate']   = $specimen->getDateTimeUpdate;
        }
        if (isset($this->data)) {
            //converts json object into array
       	    $jsonData = $specimen->getData;
            $jsonData = json_decode($jsonData, TRUE);

             $specimenData['Data']            = $jsonData;
        }
        
        return $specimenData;
    }

	//may just need to put if statements for values that can be null
	private function fromSQL(SpecimenTO $specimen, array $specimenData)
    {
        //Construct Global Persistence Variables
		if (isset($specimenData['SpecimenID'])) {
        	$specimen->setId($specimenData['SpecimenID']);
		}
        if (isset($specimenData['ContainerID'])) {
			$specimen->setContainerId($specimenData['ContainerID']);
		}
        if (isset($specimenData['SpecimenTypeID'])) {
			$specimen->setTypeId($specimenData['SpecimenTypeID']);
		}
        if (isset($specimenData['Quantity'])) {
			$specimen->setQuantity($specimenData['Quantity']);
		}
        if (isset($specimenData['UnitID'])) {
			$specimen->setUnitId($specimenData['UnitID']);
		}
        if (isset($specimenData['ParentSpecimenID'])) {
			$specimen->setParentSpecimenId($specimenData['ParentSpecimenID']);
		}
        if (isset($specimenData['CandidateID'])) {
			$specimen->setCandidateId($specimenData['CandidateID']);
		}
        if (isset($specimenData['SessionID'])) {
			$specimen->setSessionId($specimenData['SessionID']);
		}
        if (isset($specimenData['DateTimeUpdate'])) {
			$specimen->setDateTimeUpdate($specimenData['DateTimeUpdate']);
		}
        
        //Construct Collection Persistence Variable 
		$collection = array();
        if (isset($specimenData['CollectionQuantity'])) {
          $collection['quantity']   = $specimenData['CollectionQuantity'];
        }
        if (isset($specimenData['CollectionUnitID'])) {
          $collection['unitId']     = $specimenData['CollectionUnitID'];
        }
        if (isset($specimenData['CollectionCenterID'])) {
          $collection['locationId'] = $specimenData['CollectionCenterID'];
        }
        if (isset($specimenData['CollectionDate'])) {
          $collection['date']       = $specimenData['CollectionDate'];
        }
        if (isset($specimenData['CollectionTime'])) {
          $collection['time']       = $specimenData['CollectionTime'];
        }
        if (isset($specimenData['CollectionComments'])) {
          $collection['comments']   = $specimenData['CollectionComments'];
        }
        if (isset($specimenData['CollectionData'])) {
          $data = json_decode($specimenData['CollectionData'], TRUE);
          $collection['data']       = $data;
        }
        if (!empty($collection)) { 
          $specimen->setCollection($collection);
        }

        //Construct Preparation Persistence Variable
        $preparation = array();
        if (isset($specimenData['SpecimenProtocolID'])) {
          $preparation['protocolId'] = $specimenData['SpecimenProtocolID'];
        }
        if (isset($specimenData['PreparationCenterID'])) {
          $preparation['locationId']  = $specimenData['PreparationCenterID'];
        }
        if (isset($specimenData['PreparationDate'])) {
          $preparation['date']       = $specimenData['PreparationDate'];
        }
        if (isset($specimenData['PreparationTime'])) {
          $preparation['time']       = $specimenData['PreparationTime'];
        }
        if (isset($specimenData['PreparationComments'])) {
          $preparation['comments']   = $specimenData['PreparationComments'];
        }
        if (isset($specimenData['PreparationData'])) {
          $data = json_decode($specimenData['PreparationData'], TRUE);
          $preparation['data']       = $data;
        }
        if (!empty($preparation)) {
          $specimen->setPreparation($preparation);
        }

        //Construct Analysis Persitence Variable
        $analysis = array();
        if (isset($specimenData['AnalysisCenterID'])) {
          $analysis['locationId'] = $specimenData['AnalysisCenterID'];
        }
        if (isset($specimenData['AnalysisDate'])) {
          $analysis['date']         = $specimenData['AnalysisDate'];
        }
        if (isset($specimenData['AnalysisTime'])) {
          $analysis['time']         = $specimenData['AnalysisTime'];
        }
        if (isset($specimenData['AnalysisComments'])) {
          $analysis['comments']     = $specimenData['AnalysisComments'];
        }
        if (isset($specimenData['AnalysisData'])) {
          $data = json_decode($specimenData['AnalysisData'], TRUE);
          $analysis['data']         = $data;
        }
        if (!empty($analysis)) {
          $specimen->setAnalysis($analysis);
        }
    }
}
