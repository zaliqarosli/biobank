{"version":3,"sources":["webpack:///modules/biobank/js/specimenIndex.js","webpack:///webpack/bootstrap c84edf0d9354854f165d?7c67*********","webpack:///./modules/biobank/jsx/specimenIndex.js","webpack:///./jsx/Panel.js?b4c8","webpack:///./modules/biobank/jsx/specimenForm.js?35c0","webpack:///./modules/biobank/jsx/barcodeForm.js?02a4","webpack:///./modules/biobank/jsx/collectionForm.js?e0f7","webpack:///./modules/biobank/jsx/containerParentForm.js?0f0c*","webpack:///./modules/biobank/jsx/containerDisplay.js?4e23*","webpack:///./jsx/FormModal.js?4a02*","webpack:///./jsx/Modal.js?d3d7*","webpack:///./jsx/Loader.js?06c1*","webpack:///./modules/biobank/jsx/lifeCycle.js?5ad9","webpack:///./modules/biobank/jsx/specimen.js","webpack:///./modules/biobank/jsx/preparationForm.js"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","id","loaded","call","m","c","p","_interopRequireDefault","obj","__esModule","default","_specimen","_specimen2","args","QueryString","get","document","currentScript","src","$","biobankSpecimen","React","createElement","className","specimenPageDataURL","loris","BaseURL","barcode","ReactDOM","render","getElementById","_classCallCheck","instance","Constructor","TypeError","_possibleConstructorReturn","self","ReferenceError","_inherits","subClass","superClass","prototype","Object","create","constructor","value","enumerable","writable","configurable","setPrototypeOf","__proto__","defineProperty","_createClass","defineProperties","target","props","i","length","descriptor","key","protoProps","staticProps","Panel","_React$Component","this","_this","getPrototypeOf","state","collapsed","initCollapsed","panelClass","toggleCollapsed","bind","setState","glyphClass","pencilGlyph","edit","style","marginRight","cursor","onClick","plusGlyph","add","removeGlyph","cancel","panelHeading","title","data-toggle","data-target","role","height","children","Component","propTypes","PropTypes","string","func","defaultProps","_barcodeForm","_barcodeForm2","BiobankSpecimenForm","formData","errorMessage","formErrors","barcodeFormList","1","countBarcodeForms","handleSubmit","validateForm","setFormData","specimenSubmit","addBarcodeForm","setBarcodeFormData","child","specimenId","candidateId","sessionId","unitId","_this2","barcodeListArray","keys","barcodeForms","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_loop","push","barcodeKey","removeBarcodeForm","duplicateBarcodeForm","setParentFormData","onChange","specimenTypes","containerTypesPrimary","containersNonPrimary","specimenTypeAttributes","attributeDatatypes","attributeOptions","capacities","containerDimensions","containerCoordinates","specimenTypeUnits","units","_iterator","Symbol","iterator","next","done","err","return","globalFields","remainingQuantityFields","StaticElement","label","text","pscid","visit","TextboxElement","name","onUserInput","required","quantity","SelectElement","options","specimenUnits","emptyOption","pSCIDs","ref","visits","visitLabel","disabled","FormElement","onSubmit","ButtonElement","formElement","_this3","test","isNaN","currentContainerType","specimenTypeFieldsObject","currentSpecimenType","map","attribute","datatype","e","preventDefault","formRefs","refs","isValidForm","JSON","stringify","formObj","FormData","append","ajax","type","url","action","data","cache","contentType","processData","xhr","window","XMLHttpRequest","success","refreshParent","swal","onSuccess","error","console","msg","responseJSON","message","requiredFields","field","hasError","forceUpdate","Function","sessionData","barcodeFormData","count","nextKey","parse","DataURL","isRequired","refreshTable","_collectionForm","_collectionForm2","SpecimenBarcodeForm","setCollectionFormData","toggleCollapse","addBarcodeFormButton","duplicateBarcodeFormButton","removeBarcodeFormButton","glyphStyle","color","marginLeft","fontSize","paddingLeft","marginTop","position","right","stati","collectionFormData","object","_defineProperty","_containerParentForm","_containerParentForm2","SpecimenCollectionForm","specimenType","containerType","setSpecimenTypeFieldFormData","setContainerParentFormData","getSpecimenTypeFields","handleUpdate","updateSpecimen","containerId","collection","date","time","comments","rawObject","targetAttribute","containerParentForm","updateButton","unit","specimenTypeFields","specimenFields","DateElement","minYear","maxYear","TimeElement","TextareaElement","showCancelButton","confirmButtonText","cancelButtonText","isConfirm","toggleEdit","containerParentFormData","fieldsObject","log","_$$ajax","_containerDisplay","_containerDisplay2","ContainerParentForm","mapFormOptions","container","parentContainerId","parentContainerField","coordinateField","containerDisplay","containerBarcodesNonPrimary","dimensionId","dimensions","coordinatesTotal","dimension","coordinates","containerTypes","containerStati","select","selectedCoordinate","coordinate","updateParent","ContainerDisplay","redirectURL","drag","drop","tooltip","types","typeId","primary","location","href","dataTransfer","setData","getData","newCoordinate","parseInt","column","row","display","y","x","nodeWidth","nodeStyle","width","nodeClass","tooltipTitle","dataHtml","dataToggle","dataPlacement","draggable","onDragStart","onDragOver","allowDrop","onDrop","statusId","status","coordinateDisplay","data-html","data-placement","data-original-title","rowHeight","rowStyle","_extends","assign","arguments","source","hasOwnProperty","_Modal","_Modal2","FormModal","show","throwWarning","openModal","closeModal","confirmClose","setWarning","Children","cloneElement","renderChildren","buttonClass","buttonStyle","buttonContent","Modal","modal","backdropStyle","zIndex","top","bottom","left","backgroundColor","padding","modalStyle","maxWidth","maxHeight","margin","borderRadius","overflowY","titleStyle","flexDirection","alignItems","background","borderTopRightRadius","bodyStyle","button","stopPropagation","boolean","Loader","LifeCycle","css","border","box-shadow","collectionNode","collectionTooltip","onMouseEnter","mouseOver","onMouseLeave","mouseLeave","preparationNode","preparation","mouseOverPreparation","mouseLeavePreparation","analysisNode","analysis","line","_preparationForm","_preparationForm2","_FormModal","_FormModal2","_Panel","_Loader","_Loader2","_specimenForm","_specimenForm2","_lifeCycle","_lifeCycle2","BiobankSpecimen","Data","isLoaded","loadedData","editCollection","editPreparation","fetchSpecimenData","toggleEditCollection","toggleEditPreparation","updateCollection","updatePreparation","dataType","errorCode","errorMsg","parentSpecimenBarcodeValue","parentSpecimenBarcode","specimenURL","parentContainerBarcodeValue","parentContainerBarcode","containerURL","addAliquotButton","userHasPermission","parentTypeId","specimen","addAliquotButtonContent","candidateInfo","PSCID","sessionInfo","Visit_label","collectionPanel","collectionPanelForm","cancelEditCollectionButton","dataObject","sites","locationId","preparationPanel","preparationForm","specimenProtocolAttributes","cancelEditPreparationButton","specimenProtocols","insertAction","updateAction","protocolId","protocol","analysisPanel","globals","temperature","RBiobankSpecimen","createFactory","SpecimenPreparationForm","currentProtocol","setSpecimenProtocolFieldFormData","getSpecimenProtocolFields","handleSave","savePreparation","specimenProtocolFieldsObject","submitButton","locationField","specimenProtocolFields","currentSpecimenProtocol","preparationFields"],"mappings":"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","file":"./modules/biobank/js/specimenIndex.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tvar _specimen = __webpack_require__(18);\n\t\n\tvar _specimen2 = _interopRequireDefault(_specimen);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tvar args = QueryString.get(document.currentScript.src); /* global ReactDOM */\n\t\n\t$(function () {\n\t  var biobankSpecimen = React.createElement(\n\t    \"div\",\n\t    { className: \"page-specimen-form\" },\n\t    React.createElement(\n\t      \"div\",\n\t      { className: \"row\" },\n\t      React.createElement(\n\t        \"div\",\n\t        { className: \"col-md-9 col-lg-12\" },\n\t        React.createElement(_specimen2.default, {\n\t          specimenPageDataURL: loris.BaseURL + \"/biobank/ajax/SpecimenInfo.php?action=getSpecimenData&barcode=\" + args.barcode\n\t        })\n\t      )\n\t    )\n\t  );\n\t\n\t  ReactDOM.render(biobankSpecimen, document.getElementById(\"lorisworkspace\"));\n\t});\n\n/***/ },\n/* 1 */,\n/* 2 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * This file contains React component for Panel\n\t *\n\t * @author Alex I.\n\t * @version 1.0.0\n\t *\n\t */\n\t\n\t/**\n\t * Panel component\n\t * Wraps children in a collapsible bootstrap panel\n\t */\n\tvar Panel = function (_React$Component) {\n\t  _inherits(Panel, _React$Component);\n\t\n\t  function Panel(props) {\n\t    _classCallCheck(this, Panel);\n\t\n\t    var _this = _possibleConstructorReturn(this, (Panel.__proto__ || Object.getPrototypeOf(Panel)).call(this, props));\n\t\n\t    _this.state = {\n\t      collapsed: _this.props.initCollapsed\n\t    };\n\t\n\t    // Initialize panel class based on collapsed status\n\t    _this.panelClass = _this.props.initCollapsed ? \"panel-collapse collapse\" : \"panel-collapse collapse in\";\n\t\n\t    _this.toggleCollapsed = _this.toggleCollapsed.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(Panel, [{\n\t    key: \"toggleCollapsed\",\n\t    value: function toggleCollapsed() {\n\t      this.setState({ collapsed: !this.state.collapsed });\n\t    }\n\t  }, {\n\t    key: \"render\",\n\t    value: function render() {\n\t      // Change arrow direction based on collapse status\n\t      var glyphClass = this.state.collapsed ? \"glyphicon pull-right glyphicon-chevron-down\" : \"glyphicon pull-right glyphicon-chevron-up\";\n\t\n\t      var pencilGlyph = void 0;\n\t      if (this.props.edit) {\n\t        pencilGlyph = React.createElement(\"span\", {\n\t          className: \"glyphicon pull-right glyphicon-pencil\",\n\t          style: { marginRight: '10px', cursor: 'pointer' },\n\t          onClick: this.props.edit\n\t        });\n\t      }\n\t\n\t      var plusGlyph = void 0;\n\t      if (this.props.add) {\n\t        plusGlyph = React.createElement(\"span\", {\n\t          className: \"glyphicon pull-right glyphicon-plus\",\n\t          style: { marginRight: '10px', cursor: 'pointer' },\n\t          onClick: this.props.add\n\t        });\n\t      }\n\t\n\t      var removeGlyph = void 0;\n\t      if (this.props.cancel) {\n\t        removeGlyph = React.createElement(\"span\", {\n\t          className: \"glyphicon pull-right glyphicon-remove\",\n\t          style: { marginRight: '10px', cursor: 'pointer' },\n\t          onClick: this.props.cancel\n\t        });\n\t      }\n\t\n\t      // Add panel header, if title is set\n\t      var panelHeading = this.props.title ? React.createElement(\n\t        \"div\",\n\t        {\n\t          className: \"panel-heading\"\n\t        },\n\t        React.createElement(\"span\", {\n\t          className: glyphClass,\n\t          onClick: this.toggleCollapsed,\n\t          \"data-toggle\": \"collapse\",\n\t          \"data-target\": '#' + this.props.id,\n\t          style: { cursor: 'pointer' }\n\t        }),\n\t        pencilGlyph,\n\t        plusGlyph,\n\t        removeGlyph,\n\t        this.props.title\n\t      ) : '';\n\t\n\t      return React.createElement(\n\t        \"div\",\n\t        { className: \"panel panel-primary\" },\n\t        panelHeading,\n\t        React.createElement(\n\t          \"div\",\n\t          { id: this.props.id, className: this.panelClass, role: \"tabpanel\" },\n\t          React.createElement(\n\t            \"div\",\n\t            { className: \"panel-body\", style: { height: this.props.height } },\n\t            this.props.children\n\t          )\n\t        )\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return Panel;\n\t}(React.Component);\n\t\n\tPanel.propTypes = {\n\t  id: React.PropTypes.string,\n\t  height: React.PropTypes.string,\n\t  title: React.PropTypes.string,\n\t  edit: React.PropTypes.func,\n\t  add: React.PropTypes.func\n\t};\n\tPanel.defaultProps = {\n\t  initCollapsed: false,\n\t  id: 'default-panel',\n\t  height: '100%'\n\t};\n\t\n\texports.default = Panel;\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _barcodeForm = __webpack_require__(4);\n\t\n\tvar _barcodeForm2 = _interopRequireDefault(_barcodeForm);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * Biobank Collection Form\n\t *\n\t * Fetches data from Loris backend and displays a form allowing\n\t * to specimen a biobank file attached to a specific instrument\n\t *\n\t * @author Henri Rabalais\n\t * @version 1.0.0\n\t *\n\t * */\n\tvar BiobankSpecimenForm = function (_React$Component) {\n\t  _inherits(BiobankSpecimenForm, _React$Component);\n\t\n\t  function BiobankSpecimenForm(props) {\n\t    _classCallCheck(this, BiobankSpecimenForm);\n\t\n\t    var _this = _possibleConstructorReturn(this, (BiobankSpecimenForm.__proto__ || Object.getPrototypeOf(BiobankSpecimenForm)).call(this, props));\n\t\n\t    _this.state = {\n\t      formData: {},\n\t      errorMessage: null,\n\t      formErrors: {},\n\t      barcodeFormList: { 1: {} },\n\t      countBarcodeForms: 1\n\t    };\n\t\n\t    _this.handleSubmit = _this.handleSubmit.bind(_this);\n\t    _this.validateForm = _this.validateForm.bind(_this);\n\t    _this.setFormData = _this.setFormData.bind(_this);\n\t    _this.specimenSubmit = _this.specimenSubmit.bind(_this);\n\t    _this.addBarcodeForm = _this.addBarcodeForm.bind(_this);\n\t    _this.setBarcodeFormData = _this.setBarcodeFormData.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(BiobankSpecimenForm, [{\n\t    key: 'componentDidMount',\n\t    value: function componentDidMount() {\n\t      //if this is a child specimen form then certain formData is set when component mounts\n\t      if (this.props.child) {\n\t        var formData = this.state.formData;\n\t        formData['parentSpecimen'] = this.props.specimenId;\n\t        formData['pscid'] = this.props.candidateId;\n\t        formData['visitLabel'] = this.props.sessionId;\n\t        formData['unitId'] = this.props.unitId;\n\t\n\t        this.setState({\n\t          formData: formData\n\t        });\n\t      }\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t      var _this2 = this;\n\t\n\t      //Generates new Barcode Form everytime the addBarcodeForm button is pressed\n\t      var barcodeListArray = Object.keys(this.state.barcodeFormList);\n\t      var barcodeForms = [];\n\t      var i = 1;\n\t      var _iteratorNormalCompletion = true;\n\t      var _didIteratorError = false;\n\t      var _iteratorError = undefined;\n\t\n\t      try {\n\t        var _loop = function _loop() {\n\t          var key = _step.value;\n\t\n\t          barcodeForms.push(React.createElement(_barcodeForm2.default, {\n\t            key: key,\n\t            barcodeKey: key,\n\t            id: i,\n\t            formData: _this2.state.barcodeFormList[key] ? _this2.state.barcodeFormList[key] : null,\n\t            removeBarcodeForm: barcodeListArray.length !== 1 ? function () {\n\t              return _this2.removeBarcodeForm(key);\n\t            } : null,\n\t            addBarcodeForm: i == barcodeListArray.length ? _this2.addBarcodeForm : null,\n\t            duplicateBarcodeForm: i == barcodeListArray.length && _this2.state.barcodeFormList[key] ? function () {\n\t              return _this2.duplicateBarcodeForm(key);\n\t            } : null,\n\t            setParentFormData: _this2.setBarcodeFormData,\n\t            onChange: _this2.props.onChange,\n\t            specimenTypes: _this2.props.specimenTypes,\n\t            containerTypesPrimary: _this2.props.containerTypesPrimary,\n\t            containersNonPrimary: _this2.props.containersNonPrimary,\n\t            specimenTypeAttributes: _this2.props.specimenTypeAttributes,\n\t            attributeDatatypes: _this2.props.attributeDatatypes,\n\t            attributeOptions: _this2.props.attributeOptions,\n\t            capacities: _this2.props.capacities,\n\t            containerDimensions: _this2.props.containerDimensions,\n\t            containerCoordinates: _this2.props.containerCoordinates,\n\t            specimenTypeUnits: _this2.props.specimenTypeUnits,\n\t            units: _this2.props.units\n\t          }));\n\t\n\t          i++;\n\t        };\n\t\n\t        for (var _iterator = barcodeListArray[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n\t          _loop();\n\t        }\n\t      } catch (err) {\n\t        _didIteratorError = true;\n\t        _iteratorError = err;\n\t      } finally {\n\t        try {\n\t          if (!_iteratorNormalCompletion && _iterator.return) {\n\t            _iterator.return();\n\t          }\n\t        } finally {\n\t          if (_didIteratorError) {\n\t            throw _iteratorError;\n\t          }\n\t        }\n\t      }\n\t\n\t      var globalFields = void 0;\n\t      var remainingQuantityFields = void 0;\n\t      if (this.props.child) {\n\t        globalFields = React.createElement(\n\t          'div',\n\t          null,\n\t          React.createElement(StaticElement, {\n\t            label: 'Parent Specimen',\n\t            text: this.props.barcode\n\t          }),\n\t          React.createElement(StaticElement, {\n\t            label: 'PSCID',\n\t            text: this.props.pscid\n\t          }),\n\t          React.createElement(StaticElement, {\n\t            label: 'Visit Label',\n\t            text: this.props.visit\n\t          })\n\t        );\n\t\n\t        //It may be wise to make unit static and forced, or atleast prepopulated --\n\t        remainingQuantityFields = React.createElement(\n\t          'div',\n\t          null,\n\t          React.createElement(TextboxElement, {\n\t            name: 'quantity',\n\t            label: 'Remaining Quantity',\n\t            onUserInput: this.setFormData,\n\t            required: true,\n\t            value: this.state.formData.quantity\n\t          }),\n\t          React.createElement(SelectElement, {\n\t            name: 'unitId',\n\t            label: 'Unit',\n\t            options: this.props.specimenUnits,\n\t            onUserInput: this.setFormData,\n\t            emptyOption: false,\n\t            required: true,\n\t            value: this.state.formData.unitId\n\t          })\n\t        );\n\t      } else {\n\t        globalFields = React.createElement(\n\t          'div',\n\t          null,\n\t          React.createElement(SelectElement, {\n\t            name: 'pscid',\n\t            label: 'PSCID',\n\t            options: this.props.pSCIDs,\n\t            onUserInput: this.setFormData,\n\t            ref: 'pscid',\n\t            required: true,\n\t            value: this.state.formData.pscid\n\t          }),\n\t          React.createElement(SelectElement, {\n\t            name: 'visitLabel',\n\t            label: 'Visit Label',\n\t            options: this.state.visits,\n\t            onUserInput: this.setFormData,\n\t            ref: 'visitLabel',\n\t            required: true,\n\t            value: this.state.formData.visitLabel,\n\t            disabled: this.state.formData.pscid ? false : true\n\t          })\n\t        );\n\t      }\n\t\n\t      return React.createElement(\n\t        FormElement,\n\t        {\n\t          name: 'specimenForm',\n\t          id: 'specimenForm',\n\t          onSubmit: this.handleSubmit,\n\t          ref: 'form'\n\t        },\n\t        React.createElement('br', null),\n\t        React.createElement(\n\t          'div',\n\t          { className: 'row' },\n\t          React.createElement(\n\t            'div',\n\t            { className: 'col-xs-11' },\n\t            globalFields,\n\t            remainingQuantityFields\n\t          )\n\t        ),\n\t        barcodeForms,\n\t        React.createElement(\n\t          'div',\n\t          { className: 'col-xs-3 col-xs-offset-9' },\n\t          React.createElement(ButtonElement, { label: 'Submit' })\n\t        )\n\t      );\n\t    }\n\t\n\t    /** *******************************************************************************\n\t     *                      ******     Helper methods     *******\n\t     *********************************************************************************/\n\t\n\t    /**\n\t     * Returns a valid name for the file to be specimened\n\t     *\n\t     * @param {string} pscid - PSCID selected from the dropdown\n\t     * @param {string} visitLabel - Visit label selected from the dropdown\n\t     * @param {string} instrument - Instrument selected from the dropdown\n\t     * @return {string} - Generated valid filename for the current selection\n\t     */\n\t    //  getValidFileName(pscid, visitLabel, instrument) {\n\t    //    var fileName = pscid + \"_\" + visitLabel;\n\t    //    if (instrument) fileName += \"_\" + instrument;\n\t    //\n\t    //    return fileName;\n\t    //  }\n\t\n\t\n\t  }, {\n\t    key: 'validateForm',\n\t    value: function validateForm(formElement, value) {\n\t      var _this3 = this;\n\t\n\t      var formErrors = this.state.formErrors;\n\t\n\t      //validate barcode regex\n\t      if (formElement === \"barcode\" && value !== \"\") {\n\t        if (!/^hello/.test(this.state.formData.barcode)) {\n\t          formErrors.barcode = true;\n\t        } else {\n\t          formErrors.barcode = false;\n\t        }\n\t      }\n\t\n\t      //validate that quantity is a number and less than capacity\n\t      if (formElement === \"quantity\" && value !== \"\") {\n\t        if (isNaN(value) || value > this.props.capacities[this.state.currentContainerType]) {\n\t          formErrors.quantity = true;\n\t        } else {\n\t          formErrors.quantity = false;\n\t        }\n\t      }\n\t\n\t      //validate datatypes and regex of generated type attributes\n\t      var specimenTypeFieldsObject = this.props.specimenTypeAttributes[this.state.currentSpecimenType];\n\t      var specimenTypeFields = Object.keys(specimenTypeFieldsObject).map(function (attribute) {\n\t\n\t        var datatype = _this3.props.attributeDatatypes[specimenTypeFieldsObject[attribute]['datatypeId']].datatype;\n\t        if (datatype === \"number\") {\n\t          if (formElement === attribute) {\n\t            if (isNaN(value) && value !== \"\") {\n\t              formErrors[attribute] = true;\n\t            } else {\n\t              formErrors[attribute] = false;\n\t            }\n\t          }\n\t        }\n\t      });\n\t\n\t      this.setState({\n\t        formErrors: formErrors\n\t      });\n\t    }\n\t\n\t    /**\n\t     * Handle form submission\n\t     * @param {object} e - Form submission event\n\t     */\n\t\n\t  }, {\n\t    key: 'handleSubmit',\n\t    value: function handleSubmit(e) {\n\t      e.preventDefault();\n\t\n\t      var formData = this.state.formData;\n\t      var barcodeFormList = this.state.barcodeFormList;\n\t      var formRefs = this.refs;\n\t      //let biobankFiles = this.state.Data.biobankFiles ? this.state.Data.biobankFiles : [];\n\t\n\t      // Validate the form\n\t      if (!this.isValidForm(formRefs, formData)) {\n\t        return;\n\t      }\n\t\n\t      //    // Validate specimened file name\n\t      //    let instrument = formData.instrument ? formData.instrument : null;\n\t      //    let fileName = formData.file ? formData.file.name.replace(/\\s+/g, '_') : null;\n\t      //    let requiredFileName = this.getValidFileName(\n\t      //      formData.pscid, formData.visitLabel, instrument\n\t      //    );\n\t      //    if (!this.isValidFileName(requiredFileName, fileName)) {\n\t      //      swal(\n\t      //        \"Invalid Specimen name!\",\n\t      //        \"File name should begin with: \" + requiredFileName,\n\t      //        \"error\"\n\t      //      );\n\t      //      return;\n\t      //    }\n\t\n\t      // Check for duplicate file names\n\t      //    let isDuplicate = biobankFiles.indexOf(fileName);\n\t      //    if (isDuplicate >= 0) {\n\t      //      swal({\n\t      //        title: \"Are you sure?\",\n\t      //        text: \"A file with this name already exists!\\n Would you like to override existing file?\",\n\t      //        type: \"warning\",\n\t      //        showCancelButton: true,\n\t      //        confirmButtonText: 'Yes, I am sure!',\n\t      //        cancelButtonText: \"No, cancel it!\"\n\t      //      }, function(isConfirm) {\n\t      //        if (isConfirm) {\n\t      //          this.specimenFile();\n\t      //        } else {\n\t      //          swal(\"Cancelled\", \"Your imaginary file is safe :)\", \"error\");\n\t      //        }\n\t      //      }.bind(this));\n\t      //    } else {\n\t\n\t      this.specimenSubmit();\n\t      //    }\n\t    }\n\t\n\t    /*\n\t     * Uploads the file to the server\n\t     */\n\t\n\t  }, {\n\t    key: 'specimenSubmit',\n\t    value: function specimenSubmit() {\n\t      // Set form data and specimen the biobank file\n\t      var formData = this.state.formData;\n\t      var barcodeFormList = this.state.barcodeFormList;\n\t      formData['barcodeFormList'] = JSON.stringify(barcodeFormList);\n\t      var formObj = new FormData();\n\t      for (var _key in formData) {\n\t        if (formData[_key] !== \"\") {\n\t          formObj.append(_key, formData[_key]);\n\t        }\n\t      }\n\t\n\t      $.ajax({\n\t        type: 'POST',\n\t        url: this.props.action,\n\t        data: formObj,\n\t        cache: false,\n\t        contentType: false,\n\t        processData: false,\n\t        xhr: function () {\n\t          var xhr = new window.XMLHttpRequest();\n\t          return xhr;\n\t        }.bind(this),\n\t        success: function () {\n\t\n\t          this.props.refreshParent();\n\t          swal(\"Specimen Submission Successful!\", \"\", \"success\");\n\t          this.props.onSuccess();\n\t        }.bind(this),\n\t        error: function (err) {\n\t          console.error(err);\n\t          var msg = err.responseJSON ? err.responseJSON.message : \"Specimen error!\";\n\t          this.setState({\n\t            errorMessage: msg\n\t          });\n\t          swal(msg, \"\", \"error\");\n\t        }.bind(this)\n\t      });\n\t    }\n\t\n\t    /**\n\t     * Checks if the inputted file name is valid\n\t     *\n\t     * @param {string} requiredFileName - Required file name\n\t     * @param {string} fileName - Provided file name\n\t     * @return {boolean} - true if fileName starts with requiredFileName, false\n\t     *   otherwise\n\t     */\n\t    //  isValidFileName(requiredFileName, fileName) {\n\t    //    if (fileName === null || requiredFileName === null) {\n\t    //      return false;\n\t    //    }\n\t    //\n\t    //    return (fileName.indexOf(requiredFileName) === 0);\n\t    //  }\n\t\n\t    /**\n\t     * Validate the form\n\t     *\n\t     * @param {object} formRefs - Object containing references to React form elements\n\t     * @param {object} formData - Object containing form data inputed by user\n\t     * @return {boolean} - true if all required fields are filled, false otherwise\n\t     */\n\t\n\t  }, {\n\t    key: 'isValidForm',\n\t    value: function isValidForm(formRefs, formData) {\n\t      var isValidForm = true;\n\t\n\t      var requiredFields = {\n\t        pscid: null,\n\t        visitLabel: null\n\t      };\n\t\n\t      Object.keys(requiredFields).map(function (field) {\n\t        if (formData[field]) {\n\t          requiredFields[field] = formData[field];\n\t        } else if (formRefs[field]) {\n\t          formRefs[field].props.hasError = true;\n\t          isValidForm = false;\n\t        }\n\t      });\n\t      this.forceUpdate();\n\t\n\t      return isValidForm;\n\t    }\n\t\n\t    /**\n\t     * Set the form data based on state values of child elements/componenets\n\t     *\n\t     * @param {string} formElement - name of the selected element\n\t     * @param {string} value - selected value for corresponding form element\n\t     */\n\t\n\t  }, {\n\t    key: 'setFormData',\n\t    value: function setFormData(formElement, value) {\n\t      // This lets the modal window know that there is formData\n\t      // and will cause a warning to be thrown of the modal window\n\t      // is exited/\n\t      this.props.onChange instanceof Function && this.props.onChange();\n\t\n\t      if (formElement === \"pscid\" && value !== \"\") {\n\t        this.state.visits = this.props.sessionData[this.props.pSCIDs[value]].visits;\n\t      }\n\t\n\t      var formData = this.state.formData;\n\t      formData[formElement] = value;\n\t\n\t      this.setState({\n\t        formData: formData\n\t      });\n\t    }\n\t  }, {\n\t    key: 'setBarcodeFormData',\n\t    value: function setBarcodeFormData(barcodeFormData, barcodeKey) {\n\t      var formData = this.state.formData;\n\t      var barcodeFormList = this.state.barcodeFormList;\n\t      barcodeFormList[barcodeKey] = barcodeFormData;\n\t      formData['barcodeFormList'] = barcodeFormList;\n\t\n\t      this.setState({\n\t        formData: formData\n\t      });\n\t    }\n\t  }, {\n\t    key: 'addBarcodeForm',\n\t    value: function addBarcodeForm() {\n\t      var barcodeFormList = this.state.barcodeFormList;\n\t      var count = this.state.countBarcodeForms;\n\t\n\t      barcodeFormList[count + 1] = {};\n\t\n\t      this.setState({\n\t        barcodeFormList: barcodeFormList,\n\t        countBarcodeForms: count + 1\n\t      });\n\t    }\n\t  }, {\n\t    key: 'duplicateBarcodeForm',\n\t    value: function duplicateBarcodeForm(key) {\n\t      var count = this.state.countBarcodeForms;\n\t      var nextKey = count + 1;\n\t      var barcodeFormList = this.state.barcodeFormList;\n\t\n\t      barcodeFormList[nextKey] = JSON.parse(JSON.stringify(barcodeFormList[key]));\n\t      delete barcodeFormList[nextKey].barcode;\n\t\n\t      this.setState({\n\t        barcodeFormList: barcodeFormList,\n\t        countBarcodeForms: nextKey\n\t      });\n\t    }\n\t  }, {\n\t    key: 'removeBarcodeForm',\n\t    value: function removeBarcodeForm(key) {\n\t      var barcodeFormList = this.state.barcodeFormList;\n\t      delete barcodeFormList[key];\n\t\n\t      this.setState({\n\t        barcodeFormList: barcodeFormList\n\t      });\n\t    }\n\t  }]);\n\t\n\t  return BiobankSpecimenForm;\n\t}(React.Component);\n\t\n\tBiobankSpecimenForm.propTypes = {\n\t  DataURL: React.PropTypes.string.isRequired,\n\t  action: React.PropTypes.string.isRequired,\n\t  barcode: React.PropTypes.string,\n\t  refreshTable: React.PropTypes.func\n\t};\n\t\n\texports.default = BiobankSpecimenForm;\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _collectionForm = __webpack_require__(5);\n\t\n\tvar _collectionForm2 = _interopRequireDefault(_collectionForm);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * Biobank Barcode Form\n\t *\n\t * Acts a subform for BiobankSpecimenForm\n\t *\n\t * @author Henri Rabalais\n\t * @version 1.0.0\n\t *\n\t **/\n\t\n\tvar SpecimenBarcodeForm = function (_React$Component) {\n\t  _inherits(SpecimenBarcodeForm, _React$Component);\n\t\n\t  function SpecimenBarcodeForm(props) {\n\t    _classCallCheck(this, SpecimenBarcodeForm);\n\t\n\t    var _this = _possibleConstructorReturn(this, (SpecimenBarcodeForm.__proto__ || Object.getPrototypeOf(SpecimenBarcodeForm)).call(this, props));\n\t\n\t    _this.state = {\n\t      formData: {},\n\t      formErrors: {},\n\t      collapsed: true\n\t    };\n\t\n\t    _this.setFormData = _this.setFormData.bind(_this);\n\t    _this.setCollectionFormData = _this.setCollectionFormData.bind(_this);\n\t    _this.setParentFormData = _this.setParentFormData.bind(_this);\n\t    _this.toggleCollapse = _this.toggleCollapse.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(SpecimenBarcodeForm, [{\n\t    key: 'componentDidMount',\n\t    value: function componentDidMount() {\n\t\n\t      if (this.props.formData) {\n\t        var formData = this.props.formData;\n\t\n\t        this.setState({\n\t          formData: formData\n\t        });\n\t      }\n\t    }\n\t  }, {\n\t    key: 'toggleCollapse',\n\t    value: function toggleCollapse() {\n\t      this.setState({ collapsed: !this.state.collapsed });\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t\n\t      //HR TODO: This CSS should evenutally be moved\n\t      var addBarcodeFormButton = void 0;\n\t      var duplicateBarcodeFormButton = void 0;\n\t      if (this.props.addBarcodeForm) {\n\t        addBarcodeFormButton = React.createElement(\n\t          'button',\n\t          {\n\t            type: 'button',\n\t            className: 'btn btn-success btn-sm',\n\t            onClick: this.props.addBarcodeForm\n\t          },\n\t          React.createElement('span', { className: 'glyphicon glyphicon-plus', style: { marginRight: 5 } }),\n\t          'New'\n\t        );\n\t      }\n\t\n\t      if (this.props.duplicateBarcodeForm) {\n\t        duplicateBarcodeFormButton = React.createElement(\n\t          'button',\n\t          {\n\t            type: 'button',\n\t            className: 'btn btn-success btn-sm',\n\t            onClick: this.props.duplicateBarcodeForm\n\t          },\n\t          React.createElement('span', { className: 'glyphicon glyphicon-duplicate', style: { marginRight: 5 } }),\n\t          'Replicate'\n\t        );\n\t      }\n\t\n\t      var removeBarcodeFormButton = void 0;\n\t      if (this.props.removeBarcodeForm) {\n\t        var glyphStyle = {\n\t          color: '#DDDDDD',\n\t          marginLeft: 10,\n\t          cursor: 'pointer',\n\t          fontSize: 15\n\t        };\n\t\n\t        var buttonStyle = {\n\t          appearance: 'non',\n\t          outline: 'non',\n\t          boxShadow: 'none',\n\t          borderColor: 'transparent',\n\t          backgroundColor: 'transparent'\n\t        };\n\t\n\t        removeBarcodeFormButton = React.createElement('span', {\n\t          className: 'glyphicon glyphicon-remove',\n\t          onClick: this.props.removeBarcodeForm,\n\t          style: glyphStyle\n\t        });\n\t      }\n\t\n\t      return React.createElement(\n\t        FormElement,\n\t        {\n\t          name: 'biobankBarcode'\n\t        },\n\t        React.createElement(\n\t          'div',\n\t          { className: 'row' },\n\t          React.createElement(\n\t            'div',\n\t            { className: 'col-xs-11' },\n\t            React.createElement(\n\t              'div',\n\t              null,\n\t              React.createElement(TextboxElement, {\n\t                name: \"barcode\",\n\t                label: \"Barcode \" + this.props.id,\n\t                onUserInput: this.setFormData,\n\t                ref: \"barcode\",\n\t                required: true,\n\t                value: this.state.formData[\"barcode\"]\n\t              })\n\t            )\n\t          ),\n\t          React.createElement(\n\t            'div',\n\t            { className: 'col-xs-1', style: { paddingLeft: 0, marginTop: 10 } },\n\t            React.createElement('span', {\n\t              className: this.state.collapsed ? 'glyphicon glyphicon-chevron-down' : 'glyphicon glyphicon-chevron-up',\n\t              style: { cursor: 'pointer', fontSize: 15, position: 'relative', right: 40 },\n\t              'data-toggle': 'collapse',\n\t              'data-target': \"#item-\" + this.props.id,\n\t              onClick: this.toggleCollapse\n\t            }),\n\t            removeBarcodeFormButton\n\t          )\n\t        ),\n\t        React.createElement(\n\t          'div',\n\t          { className: 'row' },\n\t          React.createElement('div', { className: 'col-xs-2' }),\n\t          React.createElement(\n\t            'div',\n\t            { className: 'col-xs-9' },\n\t            React.createElement(\n\t              'div',\n\t              { id: 'item-' + this.props.id, className: 'collapse' },\n\t              React.createElement(_collectionForm2.default, {\n\t                formData: this.props.formData,\n\t                setParentFormData: this.setCollectionFormData,\n\t                onChange: this.props.onChange,\n\t                specimenTypes: this.props.specimenTypes,\n\t                specimenTypeAttributes: this.props.specimenTypeAttributes,\n\t                attributeDatatypes: this.props.attributeDatatypes,\n\t                attributeOptions: this.props.attributeOptions,\n\t                containerTypesPrimary: this.props.containerTypesPrimary,\n\t                containersNonPrimary: this.props.containersNonPrimary,\n\t                containerDimensions: this.props.containerDimensions,\n\t                containerCoordinates: this.props.containerCoordinates,\n\t                specimenTypeUnits: this.props.specimenTypeUnits,\n\t                stati: this.props.stati\n\t              })\n\t            )\n\t          )\n\t        ),\n\t        React.createElement(\n\t          'div',\n\t          { className: 'row' },\n\t          React.createElement(\n\t            'div',\n\t            { className: 'col-xs-11' },\n\t            React.createElement('div', { className: 'col-xs-3' }),\n\t            React.createElement(\n\t              'div',\n\t              { className: 'col-xs-1' },\n\t              addBarcodeFormButton\n\t            ),\n\t            React.createElement(\n\t              'div',\n\t              { className: 'col-xs-1' },\n\t              duplicateBarcodeFormButton\n\t            )\n\t          )\n\t        )\n\t      );\n\t    }\n\t\n\t    /**\n\t     * Set the form data based on state values of child elements/componenets\n\t     *\n\t     * @param {string} formElement - name of the selected element\n\t     * @param {string} value - selected value for corresponding form element\n\t     */\n\t\n\t  }, {\n\t    key: 'setFormData',\n\t    value: function setFormData(formElement, value) {\n\t      this.props.onChange instanceof Function && this.props.onChange();\n\t\n\t      var formData = this.state.formData;\n\t      formData[formElement] = value;\n\t\n\t      this.setState({\n\t        formData: formData\n\t      }, this.setParentFormData);\n\t    }\n\t  }, {\n\t    key: 'setCollectionFormData',\n\t    value: function setCollectionFormData(collectionFormData) {\n\t      var formData = this.state.formData;\n\t\n\t      for (var field in collectionFormData) {\n\t        formData[field] = collectionFormData[field];\n\t      }\n\t\n\t      this.setState({\n\t        formData: formData\n\t      }, this.setParentFormData);\n\t    }\n\t  }, {\n\t    key: 'setParentFormData',\n\t    value: function setParentFormData() {\n\t      this.props.setParentFormData(this.state.formData, this.props.barcodeKey);\n\t    }\n\t  }]);\n\t\n\t  return SpecimenBarcodeForm;\n\t}(React.Component);\n\t\n\tSpecimenBarcodeForm.propTypes = {\n\t\n\t  id: React.PropTypes.string,\n\t  specimenTypes: React.PropTypes.object.isRequired,\n\t  containerTypesPrimary: React.PropTypes.object.isRequired,\n\t  specimenTypeAttributes: React.PropTypes.object.isRequired,\n\t  attributeDatatypes: React.PropTypes.object.isRequired,\n\t  capacities: React.PropTypes.object.isRequired\n\t};\n\t\n\texports.default = SpecimenBarcodeForm;\n\n/***/ },\n/* 5 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _containerParentForm = __webpack_require__(6);\n\t\n\tvar _containerParentForm2 = _interopRequireDefault(_containerParentForm);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * Biobank Specimen Form\n\t *\n\t * Acts a subform for BiobankCollectionForm\n\t *\n\t * @author Henri Rabalais\n\t * @version 1.0.0\n\t *\n\t **/\n\t\n\tvar SpecimenCollectionForm = function (_React$Component) {\n\t  _inherits(SpecimenCollectionForm, _React$Component);\n\t\n\t  function SpecimenCollectionForm(props) {\n\t    _classCallCheck(this, SpecimenCollectionForm);\n\t\n\t    var _this = _possibleConstructorReturn(this, (SpecimenCollectionForm.__proto__ || Object.getPrototypeOf(SpecimenCollectionForm)).call(this, props));\n\t\n\t    _this.state = {\n\t      formData: { data: {} },\n\t      currentSpecimenType: _this.props.edit ? _this.props.specimenType : null,\n\t      currentContainerType: _this.props.edit ? _this.props.containerType : null\n\t    };\n\t\n\t    _this.setFormData = _this.setFormData.bind(_this);\n\t    _this.setSpecimenTypeFieldFormData = _this.setSpecimenTypeFieldFormData.bind(_this);\n\t    _this.setParentFormData = _this.setParentFormData.bind(_this);\n\t    _this.setContainerParentFormData = _this.setContainerParentFormData.bind(_this);\n\t    _this.getSpecimenTypeFields = _this.getSpecimenTypeFields.bind(_this);\n\t    _this.handleUpdate = _this.handleUpdate.bind(_this);\n\t    _this.updateSpecimen = _this.updateSpecimen.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(SpecimenCollectionForm, [{\n\t    key: 'componentDidMount',\n\t    value: function componentDidMount() {\n\t      var _this2 = this;\n\t\n\t      var formData = this.state.formData;\n\t\n\t      if (this.props.formData) {\n\t        formData = this.props.formData;\n\t        var currentSpecimenType = this.state.currentSpecimenType;\n\t\n\t        this.setState({\n\t          currentSpecimenType: formData.specimenType\n\t        });\n\t      }\n\t\n\t      if (this.props.edit) {\n\t        formData['specimenId'] = this.props.specimenId;\n\t        formData['containerId'] = this.props.containerId;\n\t        formData['specimenType'] = this.props.specimenType;\n\t        formData['containerType'] = this.props.containerType;\n\t        formData['quantity'] = this.props.collection.quantity;\n\t        formData['unitId'] = this.props.collection.unitId;\n\t        formData['date'] = this.props.collection.date;\n\t        formData['time'] = this.props.collection.time;\n\t        formData['comments'] = this.props.collection.comments;\n\t\n\t        var specimenTypeFieldsObject = this.props.specimenTypeAttributes[this.state.currentSpecimenType];\n\t        if (specimenTypeFieldsObject) {\n\t          var specimenTypeFields = Object.keys(specimenTypeFieldsObject).map(function (attribute) {\n\t            formData.data[attribute] = _this2.props.collection.data[attribute];\n\t          });\n\t        }\n\t      }\n\t\n\t      this.setState({\n\t        formData: formData\n\t      });\n\t    }\n\t  }, {\n\t    key: 'mapFormOptions',\n\t    value: function mapFormOptions(rawObject, targetAttribute) {\n\t      var data = {};\n\t      for (var id in rawObject) {\n\t        data[id] = rawObject[id][targetAttribute];\n\t      }\n\t\n\t      return data;\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t\n\t      // This entire parentContainerField and parentContainerCoordinateField section should go into its own\n\t      // re-usable component\n\t      var containerParentForm;\n\t      if (!this.props.edit) {\n\t        containerParentForm = React.createElement(_containerParentForm2.default, {\n\t          setParentFormData: this.setContainerParentFormData,\n\t          containersNonPrimary: this.props.containersNonPrimary,\n\t          containerDimensions: this.props.containerDimensions,\n\t          containerCoordinates: this.props.containerCoordinates\n\t        });\n\t      }\n\t\n\t      var updateButton;\n\t      if (this.props.edit) {\n\t        updateButton = React.createElement(ButtonElement, { label: 'Update' });\n\t      }\n\t\n\t      //This block of code should potentially be moved to setFormData();\n\t      //Consider Refactoring...\n\t      var specimenTypeUnits = {};\n\t      if (this.state.currentSpecimenType) {\n\t\n\t        //This modifies the selections for unit drop down based on the chosend specimen type \n\t        for (var id in this.props.specimenTypeUnits[this.state.currentSpecimenType]) {\n\t          specimenTypeUnits[id] = this.props.specimenTypeUnits[this.state.currentSpecimenType][id].unit;\n\t        }\n\t\n\t        var specimenTypeFieldsObject = this.props.specimenTypeAttributes[this.state.currentSpecimenType];\n\t        if (specimenTypeFieldsObject) {\n\t          var specimenTypeFields = this.getSpecimenTypeFields(specimenTypeFieldsObject);\n\t        }\n\t      }\n\t\n\t      var specimenFields;\n\t      if (this.state.currentSpecimenType) {\n\t        specimenFields = React.createElement(\n\t          'div',\n\t          null,\n\t          React.createElement(SelectElement, {\n\t            name: 'containerType',\n\t            label: 'Container Type',\n\t            options: this.props.containerTypesPrimary,\n\t            onUserInput: this.setFormData,\n\t            ref: 'containerType',\n\t            required: true,\n\t            value: this.state.formData.containerType\n\t          }),\n\t          React.createElement(TextboxElement, {\n\t            name: 'quantity',\n\t            label: 'Quantity',\n\t            onUserInput: this.setFormData,\n\t            ref: 'quantity',\n\t            required: true,\n\t            value: this.state.formData.quantity\n\t          }),\n\t          React.createElement(SelectElement, {\n\t            name: 'unitId',\n\t            label: 'Unit',\n\t            options: specimenTypeUnits,\n\t            onUserInput: this.setFormData,\n\t            required: true,\n\t            value: this.state.formData.unitId\n\t          }),\n\t          specimenTypeFields,\n\t          React.createElement(DateElement, {\n\t            name: 'date',\n\t            label: 'Date',\n\t            minYear: '2000',\n\t            maxYear: '2018',\n\t            onUserInput: this.setFormData,\n\t            required: true,\n\t            value: this.state.formData.date\n\t          }),\n\t          React.createElement(TimeElement, {\n\t            name: 'time',\n\t            label: 'Time',\n\t            onUserInput: this.setFormData,\n\t            required: true,\n\t            value: this.state.formData.time\n\t          }),\n\t          React.createElement(TextareaElement, {\n\t            name: 'comments',\n\t            label: 'Comments',\n\t            onUserInput: this.setFormData,\n\t            ref: 'comments',\n\t            value: this.state.formData.comments\n\t          }),\n\t          containerParentForm\n\t        );\n\t      }\n\t\n\t      return React.createElement(\n\t        FormElement,\n\t        {\n\t          name: 'biobankSpecimen',\n\t          onSubmit: this.handleUpdate,\n\t          ref: 'form'\n\t        },\n\t        React.createElement(SelectElement, {\n\t          name: 'specimenType',\n\t          label: 'Specimen Type',\n\t          options: this.props.specimenTypes,\n\t          onUserInput: this.setFormData,\n\t          ref: 'specimenType',\n\t          required: true,\n\t          value: this.state.formData.specimenType\n\t        }),\n\t        specimenFields,\n\t        updateButton\n\t      );\n\t    }\n\t\n\t    /**\n\t     * Set the form data based on state values of child elements/componenets\n\t     *\n\t     * @param {string} formElement - name of the selected element\n\t     * @param {string} value - selected value for corresponding form element\n\t     */\n\t\n\t  }, {\n\t    key: 'setFormData',\n\t    value: function setFormData(formElement, value) {\n\t\n\t      this.props.onChange instanceof Function && this.props.onChange();\n\t\n\t      var formData = this.state.formData;\n\t      formData[formElement] = value;\n\t\n\t      if (formElement === \"specimenType\" && value !== \"\") {\n\t        //This throws a warning if the specimen type is changed because of the cascading effects this \n\t        //would cause.\n\t        if (this.props.edit) {\n\t          swal({\n\t            title: \"Warning\",\n\t            text: \"Changing the specimen type will result in the loss of any preparation or anaylsis \" + \"data for this specimen. You will also need to manually change the specimen type of any \" + \"aliquots derived from this specimen. Proceed with caution.\",\n\t            type: \"warning\",\n\t            showCancelButton: true,\n\t            confirmButtonText: 'Cancel Change',\n\t            cancelButtonText: 'Proceed'\n\t          }, function (isConfirm) {\n\t            if (isConfirm) {\n\t              this.props.toggleEdit();\n\t            } else {}\n\t          }.bind(this));\n\t        }\n\t\n\t        //This is to eliminate the values for the specimen type fields\n\t        //This could potentially be improved later to retain the values\n\t        //for the fields that are common across specimen types\n\t        formData.data = {};\n\t        this.setState({\n\t          currentSpecimenType: value\n\t        });\n\t      }\n\t\n\t      if (formElement === \"containerType\" && value !== \"\") {\n\t        this.setState({\n\t          currentContainerType: value\n\t        });\n\t      }\n\t\n\t      this.setState({\n\t        formData: formData\n\t      }, this.setParentFormData);\n\t    }\n\t  }, {\n\t    key: 'setSpecimenTypeFieldFormData',\n\t    value: function setSpecimenTypeFieldFormData(formElement, value) {\n\t      var formData = this.state.formData;\n\t      formData.data[formElement] = value;\n\t\n\t      this.setState({\n\t        formData: formData\n\t      }, this.setParentFormData);\n\t    }\n\t  }, {\n\t    key: 'setContainerParentFormData',\n\t    value: function setContainerParentFormData(containerParentFormData) {\n\t      var formData = this.state.formData;\n\t\n\t      for (var field in containerParentFormData) {\n\t        formData[field] = containerParentFormData[field];\n\t      }\n\t\n\t      this.setState({\n\t        formData: formData\n\t      }, this.setParentFormData);\n\t    }\n\t  }, {\n\t    key: 'setParentFormData',\n\t    value: function setParentFormData() {\n\t      if (!this.props.edit) {\n\t        var formData = this.state.formData;\n\t        this.props.setParentFormData(formData);\n\t      }\n\t    }\n\t\n\t    // This generates all the form fields for a given specimen type\n\t\n\t  }, {\n\t    key: 'getSpecimenTypeFields',\n\t    value: function getSpecimenTypeFields(fieldsObject) {\n\t      var _this3 = this;\n\t\n\t      var specimenTypeFields = Object.keys(fieldsObject).map(function (attribute) {\n\t        var datatype = _this3.props.attributeDatatypes[fieldsObject[attribute]['datatypeId']].datatype;\n\t        if (datatype === \"text\" || datatype === \"number\") {\n\t          if (fieldsObject[attribute]['refTableId'] == null) {\n\t            return React.createElement(TextboxElement, {\n\t              name: attribute,\n\t              label: fieldsObject[attribute]['name'],\n\t              onUserInput: _this3.setSpecimenTypeFieldFormData,\n\t              ref: attribute,\n\t              required: fieldsObject[attribute]['required'],\n\t              value: _this3.state.formData.data[attribute]\n\t            });\n\t          }\n\t\n\t          // OPTIONS FOR SELECT ELEMENT WILL MOST LIKELY BE PASSED VIA AJAX CALL\n\t          // BUT IT CAN ALSO BE PRELOADED --\n\t          // ASK RIDA HOW THIS SHOULD BE DONE\n\t          if (fieldsObject[attribute]['refTableId'] !== null) {\n\t            console.log(fieldsObject[attribute]['refTableId']);\n\t            console.log(_this3.props.attributeOptions[fieldsObject[attribute]['refTableId']]);\n\t            return React.createElement(SelectElement, {\n\t              name: attribute,\n\t              label: fieldsObject[attribute]['name'],\n\t              options: _this3.props.attributeOptions[fieldsObject[attribute]['refTableId']],\n\t              onUserInput: _this3.setSpecimenTypeFieldFormData,\n\t              ref: attribute,\n\t              required: fieldsObject[attribute]['required'],\n\t              value: _this3.state.formData.data[attribute]\n\t            });\n\t          }\n\t        }\n\t\n\t        if (datatype === \"datetime\") {\n\t          return React.createElement(DateElement, {\n\t            name: attribute,\n\t            label: fieldsObject[attribute]['name'],\n\t            onUserInput: _this3.setSpecimenTypeFieldFormData,\n\t            ref: attribute,\n\t            required: fieldsObject[attribute]['required'],\n\t            value: _this3.state.formData.data[attribute]\n\t          });\n\t        }\n\t\n\t        if (datatype === \"boolean\") {}\n\t      });\n\t\n\t      return specimenTypeFields;\n\t    }\n\t  }, {\n\t    key: 'handleUpdate',\n\t    value: function handleUpdate(e) {\n\t      //more things will go here later\n\t      this.updateSpecimen();\n\t    }\n\t  }, {\n\t    key: 'updateSpecimen',\n\t    value: function updateSpecimen() {\n\t      var _$$ajax;\n\t\n\t      var formData = this.state.formData;\n\t      formData['data'] = JSON.stringify(formData['data']);\n\t\n\t      var formObj = new FormData();\n\t      for (var key in formData) {\n\t        if (formData[key] !== \"\") {\n\t          formObj.append(key, formData[key]);\n\t        }\n\t      }\n\t\n\t      $.ajax((_$$ajax = {\n\t        type: 'POST',\n\t        url: this.props.action,\n\t        data: formObj,\n\t        cache: false,\n\t        contentType: false,\n\t        processData: false\n\t      }, _defineProperty(_$$ajax, 'processData', false), _defineProperty(_$$ajax, 'xhr', function () {\n\t        var xhr = new window.XMLHttpRequest();\n\t        return xhr;\n\t      }.bind(this)), _defineProperty(_$$ajax, 'success', function () {\n\t        //Update Parent Specimen Page Here\n\t        formData.data = JSON.parse(formData.data);\n\t        this.props.refreshParent();\n\t      }.bind(this)), _defineProperty(_$$ajax, 'error', function (err) {\n\t        console.error(err);\n\t        var msg = err.responseJSON ? err.responseJSON.message : \"Specimen error!\";\n\t        this.setState({\n\t          errorMessage: msg\n\t        });\n\t        swal(msg, \"\", \"error\");\n\t      }.bind(this)), _$$ajax));\n\t    }\n\t  }]);\n\t\n\t  return SpecimenCollectionForm;\n\t}(React.Component);\n\t\n\tSpecimenCollectionForm.propTypes = {\n\t  setParentFormData: React.PropTypes.func,\n\t  specimenTypes: React.PropTypes.object.isRequired,\n\t  containerTypesPrimary: React.PropTypes.object.isRequired,\n\t  specimenTypeAttributes: React.PropTypes.object.isRequired,\n\t  attributeDatatypes: React.PropTypes.object.isRequired,\n\t  capacities: React.PropTypes.object.isRequired\n\t};\n\t\n\texports.default = SpecimenCollectionForm;\n\n/***/ },\n/* 6 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _containerDisplay = __webpack_require__(7);\n\t\n\tvar _containerDisplay2 = _interopRequireDefault(_containerDisplay);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Biobank Container Parent Form\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Fetches data from Loris backend and displays a form allowing\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * to specimen a biobank file attached to a specific instrument\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author Henri Rabalais\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @version 1.0.0\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\n\tn\t\n\tvar ContainerParentForm = function (_React$Component) {\n\t  _inherits(ContainerParentForm, _React$Component);\n\t\n\t  function ContainerParentForm(props) {\n\t    _classCallCheck(this, ContainerParentForm);\n\t\n\t    var _this = _possibleConstructorReturn(this, (ContainerParentForm.__proto__ || Object.getPrototypeOf(ContainerParentForm)).call(this, props));\n\t\n\t    _this.state = {\n\t      formData: {},\n\t      formErrors: {},\n\t      errorMessage: null\n\t    };\n\t\n\t    _this.mapFormOptions = _this.mapFormOptions.bind(_this);\n\t    _this.handleSubmit = _this.handleSubmit.bind(_this);\n\t    _this.setFormData = _this.setFormData.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(ContainerParentForm, [{\n\t    key: 'componentDidMount',\n\t    value: function componentDidMount() {\n\t      // This is where we will pass a parentContainerId if it already exists\n\t      // These are simply to provide 'Defaults' to the page. I am not sure that in\n\t      // if they are entirely necessary.\n\t      if (this.props.container) {\n\t        var formData = this.state.formData;\n\t        formData['container'] = JSON.stringify(this.props.container);\n\t        formData['parentContainerId'] = this.props.container.parentContainerId;\n\t\n\t        this.setState({\n\t          formData: formData\n\t        });\n\t      }\n\t    }\n\t\n\t    //map options for forms\n\t\n\t  }, {\n\t    key: 'mapFormOptions',\n\t    value: function mapFormOptions(rawObject, targetAttribute) {\n\t      var data = {};\n\t      for (var id in rawObject) {\n\t        data[id] = rawObject[id][targetAttribute];\n\t      }\n\t\n\t      return data;\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t\n\t      var parentContainerField;\n\t      var coordinateField;\n\t      var containerDisplay;\n\t      var containerBarcodesNonPrimary = this.mapFormOptions(this.props.containersNonPrimary, 'barcode');\n\t\n\t      parentContainerField = React.createElement(SelectElement, {\n\t        name: 'parentContainerId',\n\t        label: 'Parent Container Barcode',\n\t        options: containerBarcodesNonPrimary,\n\t        onUserInput: this.setFormData,\n\t        ref: 'parentContainerId',\n\t        required: false,\n\t        value: this.state.formData.parentContainerId\n\t      });\n\t\n\t      // THIS IS VERY POORLY DONE AND NEEDS REFACTORING\n\t      // this should be a 'currentParentContainerId' state\n\t      if (this.state.formData.parentContainerId) {\n\t\n\t        var dimensionId = this.props.containersNonPrimary[this.state.formData.parentContainerId].dimensionId;\n\t\n\t        if (dimensionId) {\n\t          //This will eventually become unecessary\n\t          ///////////////////////////////////////////////////\n\t          var dimensions = this.props.containerDimensions[dimensionId];\n\t\n\t          // Total coordinates is determined by the product of the dimensions\n\t          var coordinatesTotal = 1;\n\t          for (var dimension in dimensions) {\n\t            coordinatesTotal = coordinatesTotal * dimensions[dimension];\n\t          }\n\t\n\t          // Mapping of options for the SelectElement\n\t          var coordinates = {};\n\t          for (var i = 1; i <= coordinatesTotal; i++) {\n\t\n\t            // If the coordinate is already taken, skip it.\n\t            // this doubling of if statements seems unnecessary\n\t            if (this.props.containerCoordinates[this.state.formData.parentContainerId]) {\n\t              if (this.props.containerCoordinates[this.state.formData.parentContainerId][i]) {\n\t                continue;\n\t              }\n\t            }\n\t\n\t            coordinates[i] = i;\n\t          }\n\t\n\t          // coordinateField = ( \n\t          //   <SelectElement\n\t          //     name=\"coordinate\"\n\t          //     label=\"Coordinate\"\n\t          //     options={coordinates}\n\t          //     onUserInput={this.setFormData}\n\t          //     ref=\"coordinate\"\n\t          //     required={false}\n\t          //     value={this.state.formData.coordinate}\n\t          //   />  \n\t          // );  \n\t          ///////////////////////////////////////////////////\n\t\n\t          containerDisplay = React.createElement(_containerDisplay2.default, {\n\t            dimensions: this.props.containerDimensions[this.props.containersNonPrimary[this.state.formData.parentContainerId].dimensionId],\n\t            coordinates: this.props.containerCoordinates[this.state.formData.parentContainerId],\n\t            containerTypes: this.props.containerTypes,\n\t            containerStati: this.props.containerStati,\n\t            select: true,\n\t            selectedCoordinate: this.state.formData.coordinate,\n\t            updateParent: this.setFormData\n\t          });\n\t        }\n\t      }\n\t\n\t      var updateButton;\n\t      if (this.props.container) {\n\t        updateButton = React.createElement(ButtonElement, { label: 'Update' });\n\t      }\n\t\n\t      return React.createElement(\n\t        FormElement,\n\t        {\n\t          onSubmit: this.handleSubmit\n\t        },\n\t        parentContainerField,\n\t        coordinateField,\n\t        containerDisplay,\n\t        React.createElement('br', null),\n\t        updateButton\n\t      );\n\t    }\n\t\n\t    /** *******************************************************************************\n\t     *                      ******     Helper methods     *******\n\t     *********************************************************************************/\n\t\n\t    // Validation functions will go here later...\n\t\n\t    /*\n\t     * Uploads the file to the server\n\t     */\n\t\n\t  }, {\n\t    key: 'handleSubmit',\n\t    value: function handleSubmit() {\n\t      // Set form data and specimen the biobank file\n\t      var formData = this.state.formData;\n\t      var formObj = new FormData();\n\t      for (var key in formData) {\n\t        if (formData[key] !== \"\") {\n\t          formObj.append(key, formData[key]);\n\t        }\n\t      }\n\t\n\t      $.ajax({\n\t        type: 'POST',\n\t        url: this.props.action,\n\t        data: formObj,\n\t        cache: false,\n\t        contentType: false,\n\t        processData: false,\n\t        xhr: function () {\n\t          var xhr = new window.XMLHttpRequest();\n\t          return xhr;\n\t        }.bind(this),\n\t        success: function () {\n\t\n\t          this.props.refreshParent();\n\t          swal(\"Parent Container Update Successful!\", \"\", \"success\");\n\t          this.props.onSuccess();\n\t        }.bind(this),\n\t        error: function (err) {\n\t          console.error(err);\n\t          var msg = err.responseJSON ? err.responseJSON.message : \"Specimen error!\";\n\t          this.setState({\n\t            errorMessage: msg\n\t          });\n\t          swal(msg, \"\", \"error\");\n\t        }.bind(this)\n\t      });\n\t    }\n\t\n\t    /**\n\t     * Set the form data based on state values of child elements/componenets\n\t     *\n\t     * @param {string} formElement - name of the selected element\n\t     * @param {string} value - selected value for corresponding form element\n\t     */\n\t\n\t  }, {\n\t    key: 'setFormData',\n\t    value: function setFormData(formElement, value) {\n\t\n\t      var formData = this.state.formData;\n\t      formData[formElement] = value;\n\t\n\t      if (formElement === 'parentContainerId') {\n\t        formData['coordinate'] = \"\";\n\t      }\n\t\n\t      this.setState({\n\t        formData: formData\n\t      }, this.setParentFormData);\n\t    }\n\t  }, {\n\t    key: 'setParentFormData',\n\t    value: function setParentFormData() {\n\t      if (!this.props.container) {\n\t        var formData = this.state.formData;\n\t        this.props.setParentFormData(formData);\n\t      }\n\t    }\n\t  }]);\n\t\n\t  return ContainerParentForm;\n\t}(React.Component);\n\t\n\tContainerParentForm.propTypes = {\n\t  DataURL: React.PropTypes.string,\n\t  action: React.PropTypes.string,\n\t  barcode: React.PropTypes.string,\n\t  refreshTable: React.PropTypes.func,\n\t  onSuccess: React.PropTypes.func\n\t};\n\t\n\texports.default = ContainerParentForm;\n\n/***/ },\n/* 7 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * ContainerDisplay\n\t *\n\t * @author Henri Rabalais\n\t * @version 1.0.0\n\t *\n\t **/\n\t\n\tvar ContainerDisplay = function (_React$Component) {\n\t  _inherits(ContainerDisplay, _React$Component);\n\t\n\t  function ContainerDisplay(props) {\n\t    _classCallCheck(this, ContainerDisplay);\n\t\n\t    var _this = _possibleConstructorReturn(this, (ContainerDisplay.__proto__ || Object.getPrototypeOf(ContainerDisplay)).call(this, props));\n\t\n\t    _this.state = {};\n\t\n\t    _this.redirectURL = _this.redirectURL.bind(_this);\n\t    _this.drag = _this.drag.bind(_this);\n\t    _this.drop = _this.drop.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(ContainerDisplay, [{\n\t    key: 'componentDidMount',\n\t    value: function componentDidMount() {\n\t      $('[data-toggle=\"tooltip\"]').tooltip();\n\t    }\n\t  }, {\n\t    key: 'componentDidUpdate',\n\t    value: function componentDidUpdate() {\n\t      $('[data-toggle=\"tooltip\"]').tooltip();\n\t    }\n\t  }, {\n\t    key: 'redirectURL',\n\t    value: function redirectURL(e) {\n\t      var coordinate = e.target.id;\n\t      if (this.props.coordinates[coordinate]) {\n\t        var url = void 0;\n\t        if (this.props.types[this.props.children[this.props.coordinates[coordinate]].typeId].primary) {\n\t          url = loris.BaseURL + \"/biobank/specimen/?barcode=\" + this.props.children[this.props.coordinates[coordinate]].barcode;\n\t        } else {\n\t          url = loris.BaseURL + \"/biobank/container/?barcode=\" + this.props.children[this.props.coordinates[coordinate]].barcode;\n\t        }\n\t\n\t        window.location.href = url;\n\t      }\n\t    }\n\t  }, {\n\t    key: 'allowDrop',\n\t    value: function allowDrop(e) {\n\t      e.preventDefault();\n\t    }\n\t  }, {\n\t    key: 'drag',\n\t    value: function drag(e) {\n\t      var container = JSON.stringify(this.props.children[this.props.coordinates[e.target.id]]);\n\t      e.dataTransfer.setData(\"text/plain\", container);\n\t    }\n\t  }, {\n\t    key: 'drop',\n\t    value: function drop(e) {\n\t      e.preventDefault();\n\t\n\t      var container = e.dataTransfer.getData(\"text/plain\");\n\t      var newCoordinate = parseInt(e.target.id);\n\t\n\t      this.props.updateParent(container, newCoordinate);\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t      var _this2 = this;\n\t\n\t      // This is eventually need to be reworked and cleaned up\n\t      var column = [];\n\t      var row = [];\n\t      var display = void 0;\n\t      var coordinate = 1;\n\t      if (this.props.dimensions) {\n\t        for (var y = 0; y < this.props.dimensions.y; y++) {\n\t          column = [];\n\t          for (var x = 1; x <= this.props.dimensions.x; x++) {\n\t\n\t            var nodeWidth = 500 / this.props.dimensions.x - 500 / this.props.dimensions.x * 0.08;\n\t            var nodeStyle = { width: nodeWidth };\n\t            var nodeClass = 'node';\n\t            var tooltipTitle = null;\n\t            var dataHtml = 'false';\n\t            var dataToggle = null;\n\t            var dataPlacement = null;\n\t            var draggable = 'false';\n\t            var onDragStart = null;\n\t            var onDragOver = this.allowDrop;\n\t            var onDrop = this.drop;\n\t            var onClick = null;\n\t\n\t            if (!this.props.select) {\n\t              // This double if statement doesn't sound great\n\t              if (this.props.coordinates) {\n\t                if (this.props.coordinates[coordinate]) {\n\t                  nodeClass = 'node occupied';\n\t                  dataHtml = 'true';\n\t                  dataToggle = 'tooltip';\n\t                  dataPlacement = 'top';\n\t                  tooltipTitle = '<h5>' + this.props.children[this.props.coordinates[coordinate]].barcode + '</h5>' + '<h5>' + this.props.containerTypes[this.props.children[this.props.coordinates[coordinate]].typeId].label + '</h5>' + '<h5>' + this.props.containerStati[this.props.children[this.props.coordinates[coordinate]].statusId].status + '</h5>';\n\t                  draggable = 'true';\n\t                  onDragStart = this.drag;\n\t                  onDragOver = null;\n\t                  onDrop = null;\n\t                  onClick = this.redirectURL;\n\t                }\n\t              }\n\t            }\n\t\n\t            if (this.props.select) {\n\t              if (coordinate == this.props.selectedCoordinate) {\n\t                nodeClass = 'node occupied';\n\t              } else if (!this.props.coordinates) {\n\t                nodeClass = 'node available';\n\t                onClick = function onClick(e) {\n\t                  return _this2.props.updateParent('coordinate', e.target.id);\n\t                };\n\t              } else if (this.props.coordinates) {\n\t                if (!this.props.coordinates[coordinate]) {\n\t                  nodeClass = 'node available';\n\t                  onClick = function onClick(e) {\n\t                    return _this2.props.updateParent('coordinate', e.target.id);\n\t                  };\n\t                } else if (this.props.coordinates[coordinate]) {\n\t                  // --- This is currently not working ---\n\t                  //  dataHtml = 'true';\n\t                  //  dataToggle = 'tooltip';\n\t                  //  dataPlacement = 'top';\n\t                  //  tooltipTitle = \n\t                  //'<h5>' + this.props.children[this.props.coordinates[coordinate]].barcode + '</h5>' + \n\t                  //'<h5>' + this.props.containerTypes[this.props.children[this.props.coordinates[coordinate]].typeId].label + '</h5>' + \n\t                  //'<h5>' + this.props.containerStati[this.props.children[this.props.coordinates[coordinate]].statusId].status + '</h5>';\n\t                }\n\t              }\n\t            }\n\t\n\t            var coordinateDisplay = void 0;\n\t            if (true) {\n\t              coordinateDisplay = x + this.props.dimensions.x * y;\n\t            } else if (false) {\n\t              coordinateDisplay = String.fromCharCode(65 + y) + '' + x;\n\t            }\n\t\n\t            column.push(React.createElement(\n\t              'div',\n\t              {\n\t                id: coordinate,\n\t                className: nodeClass,\n\t                'data-html': dataHtml,\n\t                'data-toggle': dataToggle,\n\t                'data-placement': dataPlacement,\n\t                'data-original-title': tooltipTitle,\n\t                style: nodeStyle,\n\t                onClick: onClick,\n\t                draggable: draggable,\n\t                onDragStart: onDragStart,\n\t                onDragOver: onDragOver,\n\t                onDrop: onDrop\n\t              },\n\t              coordinateDisplay\n\t            ));\n\t\n\t            coordinate++;\n\t          }\n\t\n\t          var rowHeight = 500 / this.props.dimensions.y - 500 / this.props.dimensions.y * 0.08;\n\t          var rowMargin = 500 / this.props.dimensions.y * 0.04;\n\t          var rowStyle = {\n\t            height: rowHeight\n\t          };\n\t\n\t          row.push(React.createElement(\n\t            'div',\n\t            {\n\t              className: 'row',\n\t              style: rowStyle\n\t            },\n\t            column\n\t          ));\n\t        }\n\t\n\t        display = row;\n\t      }\n\t\n\t      return React.createElement(\n\t        'div',\n\t        { className: 'display' },\n\t        display\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return ContainerDisplay;\n\t}(React.Component);\n\t\n\tContainerDisplay.propTypes = {};\n\t\n\texports.default = ContainerDisplay;\n\n/***/ },\n/* 8 */,\n/* 9 */,\n/* 10 */,\n/* 11 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _Modal = __webpack_require__(12);\n\t\n\tvar _Modal2 = _interopRequireDefault(_Modal);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * This file contains React components for Modal component.\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author Henri Rabalais\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @version 1.1.0\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */\n\t\n\t/**\n\t * Modal Component.\n\t * React wrapper for a Modal Window. Allows to dynamically toggle a Modal window.\n\t *\n\t * ================================================\n\t * Usage:\n\t *\n\t * =================================================\n\t *\n\t */\n\t\n\tvar FormModal = function (_React$Component) {\n\t  _inherits(FormModal, _React$Component);\n\t\n\t  function FormModal(props) {\n\t    _classCallCheck(this, FormModal);\n\t\n\t    var _this = _possibleConstructorReturn(this, (FormModal.__proto__ || Object.getPrototypeOf(FormModal)).call(this, props));\n\t\n\t    _this.state = { show: false, throwWarning: false };\n\t\n\t    _this.openModal = _this.openModal.bind(_this);\n\t    _this.closeModal = _this.closeModal.bind(_this);\n\t    _this.confirmClose = _this.confirmClose.bind(_this);\n\t    _this.setWarning = _this.setWarning.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(FormModal, [{\n\t    key: \"renderChildren\",\n\t    value: function renderChildren() {\n\t      var _this2 = this;\n\t\n\t      return React.Children.map(this.props.children, function (child) {\n\t        return React.cloneElement(child, { onSuccess: _this2.closeModal, onChange: _this2.setWarning });\n\t      });\n\t    }\n\t  }, {\n\t    key: \"openModal\",\n\t    value: function openModal() {\n\t      this.setState({\n\t        show: true\n\t      });\n\t    }\n\t  }, {\n\t    key: \"setWarning\",\n\t    value: function setWarning() {\n\t      this.setState({\n\t        throwWarning: true\n\t      });\n\t    }\n\t  }, {\n\t    key: \"confirmClose\",\n\t    value: function confirmClose() {\n\t      if (this.state.throwWarning) {\n\t        swal({\n\t          title: \"Are You Sure?\",\n\t          text: \"Leaving the form will result in the loss of any information entered.\",\n\t          type: \"warning\",\n\t          showCancelButton: true,\n\t          confirmButtonText: 'Proceed',\n\t          cancelButtonText: 'Cancel'\n\t        }, function () {\n\t          this.closeModal();\n\t        }.bind(this));\n\t      } else {\n\t        this.closeModal();\n\t      }\n\t    }\n\t  }, {\n\t    key: \"closeModal\",\n\t    value: function closeModal() {\n\t      this.setState({\n\t        show: false,\n\t        throwWarning: false\n\t      });\n\t    }\n\t  }, {\n\t    key: \"render\",\n\t    value: function render() {\n\t      return React.createElement(\n\t        _Modal2.default,\n\t        _extends({\n\t          closeModal: this.confirmClose,\n\t          openModal: this.openModal,\n\t          show: this.state.show\n\t        }, this.props),\n\t        this.renderChildren()\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return FormModal;\n\t}(React.Component);\n\t\n\tFormModal.propTypes = {\n\t  title: React.PropTypes.string,\n\t  buttonClass: React.PropTypes.string,\n\t  buttonStyle: React.PropTypes.object,\n\t  buttonContent: React.PropTypes.object\n\t};\n\tFormModal.defaultProps = {\n\t  buttonClass: 'btn btn-primary'\n\t};\n\t\n\texports.default = FormModal;\n\n/***/ },\n/* 12 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * This file contains React components for Modal component.\n\t *\n\t * @author Henri Rabalais\n\t * @version 1.1.0\n\t *\n\t */\n\t\n\t/**\n\t * Modal Component.\n\t * React wrapper for a Modal Window. Allows to dynamically toggle a Modal window.\n\t *\n\t * ================================================\n\t * Usage:\n\t *\n\t * =================================================\n\t *\n\t */\n\tvar Modal = function (_React$Component) {\n\t  _inherits(Modal, _React$Component);\n\t\n\t  function Modal(props) {\n\t    _classCallCheck(this, Modal);\n\t\n\t    return _possibleConstructorReturn(this, (Modal.__proto__ || Object.getPrototypeOf(Modal)).call(this, props));\n\t  }\n\t\n\t  _createClass(Modal, [{\n\t    key: 'render',\n\t    value: function render() {\n\t      // Black Background with Alpha Channel\n\t      var backdropStyle = {\n\t        position: 'fixed',\n\t        zIndex: 9998,\n\t        top: 0,\n\t        bottom: 0,\n\t        left: 0,\n\t        right: 0,\n\t        backgroundColor: 'rgba(0,0,0,0.3)',\n\t        padding: 50\n\t      };\n\t\n\t      // White Modal Window\n\t      var modalStyle = {\n\t        position: 'relative',\n\t        maxWidth: 1000,\n\t        maxHeight: '100%',\n\t        margin: '0 auto',\n\t        backgroundColor: '#fff',\n\t        borderRadius: 10,\n\t        overflowY: 'auto',\n\t        zIndex: 9999\n\t      };\n\t\n\t      var titleStyle = {\n\t        display: 'flex',\n\t        flexDirection: 'row',\n\t        alignItems: 'center',\n\t        background: '#093782',\n\t        height: '70px',\n\t        borderTopRightRadius: '10',\n\t        color: '#FFFFFF',\n\t        fontSize: 24,\n\t        padding: 20\n\t      };\n\t\n\t      var glyphStyle = {\n\t        marginLeft: 'auto',\n\t        cursor: 'pointer'\n\t      };\n\t\n\t      var bodyStyle = {\n\t        padding: 15\n\t      };\n\t\n\t      var button = React.createElement(\n\t        'button',\n\t        {\n\t          type: 'button',\n\t          className: this.props.buttonClass,\n\t          onClick: this.props.openModal,\n\t          style: this.props.buttonStyle\n\t        },\n\t        this.props.buttonContent\n\t      );\n\t\n\t      var modal;\n\t      if (this.props.show) {\n\t        modal = React.createElement(\n\t          'div',\n\t          { style: backdropStyle, onClick: this.props.closeModal },\n\t          React.createElement(\n\t            'div',\n\t            {\n\t              style: modalStyle,\n\t              onClick: function onClick(e) {\n\t                e.stopPropagation();\n\t              }\n\t            },\n\t            React.createElement(\n\t              'div',\n\t              {\n\t                style: titleStyle\n\t              },\n\t              this.props.title,\n\t              React.createElement('span', {\n\t                className: 'glyphicon glyphicon-remove',\n\t                style: glyphStyle,\n\t                onClick: this.props.closeModal\n\t              })\n\t            ),\n\t            React.createElement(\n\t              'div',\n\t              {\n\t                style: bodyStyle\n\t              },\n\t              this.props.children\n\t            )\n\t          )\n\t        );\n\t      }\n\t\n\t      return React.createElement(\n\t        'div',\n\t        null,\n\t        button,\n\t        modal\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return Modal;\n\t}(React.Component);\n\t\n\tModal.propTypes = {\n\t  title: React.PropTypes.string,\n\t  buttonClass: React.PropTypes.string,\n\t  buttonStyle: React.PropTypes.object,\n\t  buttonContent: React.PropTypes.object,\n\t  show: React.PropTypes.boolean,\n\t  closeModal: React.PropTypes.func,\n\t  openModal: React.PropTypes.func\n\t};\n\tModal.defaultProps = {\n\t  buttonClass: 'btn btn-primary'\n\t};\n\t\n\texports.default = Modal;\n\n/***/ },\n/* 13 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * This file contains React component for Loader\n\t *\n\t * @author Henri Rabalais\n\t * @version 1.0.0\n\t *\n\t */\n\t\n\t/**\n\t * Loader component\n\t */\n\tvar Loader = function (_React$Component) {\n\t  _inherits(Loader, _React$Component);\n\t\n\t  function Loader(props) {\n\t    _classCallCheck(this, Loader);\n\t\n\t    return _possibleConstructorReturn(this, (Loader.__proto__ || Object.getPrototypeOf(Loader)).call(this, props));\n\t  }\n\t\n\t  _createClass(Loader, [{\n\t    key: \"render\",\n\t    value: function render() {\n\t\n\t      return React.createElement(\n\t        \"div\",\n\t        { className: \"loader-container\" },\n\t        React.createElement(\"div\", { className: \"loader\" })\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return Loader;\n\t}(React.Component);\n\t\n\texports.default = Loader;\n\n/***/ },\n/* 14 */,\n/* 15 */,\n/* 16 */,\n/* 17 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * LifeCycle\n\t *\n\t * @author Henri Rabalais\n\t * @version 1.0.0\n\t *\n\t **/\n\t\n\tvar LifeCycle = function (_React$Component) {\n\t  _inherits(LifeCycle, _React$Component);\n\t\n\t  function LifeCycle(props) {\n\t    _classCallCheck(this, LifeCycle);\n\t\n\t    var _this = _possibleConstructorReturn(this, (LifeCycle.__proto__ || Object.getPrototypeOf(LifeCycle)).call(this, props));\n\t\n\t    _this.state = {};\n\t\n\t    return _this;\n\t  }\n\t\n\t  _createClass(LifeCycle, [{\n\t    key: 'componentDidMount',\n\t    value: function componentDidMount() {}\n\t  }, {\n\t    key: 'mouseOver',\n\t    value: function mouseOver(e) {\n\t      //this isn't a very 'react' way of doing things, so consider revision\n\t      $('.collection').css({ 'border': '4px solid #093782',\n\t        'box-shadow': '0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19)' });\n\t    }\n\t  }, {\n\t    key: 'mouseLeave',\n\t    value: function mouseLeave(e) {\n\t      //this isn't a very 'react' way of doing things, so consider revision\n\t      $('.collection').css({ 'border': '4px solid #A6D3F5', 'box-shadow': 'none' });\n\t    }\n\t  }, {\n\t    key: 'mouseOverPreparation',\n\t    value: function mouseOverPreparation(e) {\n\t      //this isn't a very 'react' way of doing things, so consider revision\n\t      $('.preparation').css({ 'border': '4px solid #093782', 'box-shadow': '0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19)' });\n\t    }\n\t  }, {\n\t    key: 'mouseLeavePreparation',\n\t    value: function mouseLeavePreparation(e) {\n\t      //this isn't a very 'react' way of doing things, so consider revision\n\t      $('.preparation').css({ 'border': '4px solid #A6D3F5', 'box-shadow': 'none' });\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t      var _this2 = this;\n\t\n\t      var collectionNode = void 0;\n\t      var collectionTooltip = void 0;\n\t      if (this.props.collection || this.props.container) {\n\t        collectionTooltip = React.createElement(\n\t          'div',\n\t          null,\n\t          React.createElement(\n\t            'h',\n\t            null,\n\t            'Collection'\n\t          ),\n\t          React.createElement(\n\t            'p',\n\t            null,\n\t            'Date:'\n\t          )\n\t        );\n\t\n\t        collectionNode = React.createElement(\n\t          'div',\n\t          {\n\t            onMouseEnter: function onMouseEnter(e) {\n\t              return _this2.mouseOver(e);\n\t            },\n\t            onMouseLeave: function onMouseLeave(e) {\n\t              return _this2.mouseLeave(e);\n\t            },\n\t            className: 'lifecycle-node collection'\n\t          },\n\t          React.createElement(\n\t            'div',\n\t            { className: 'letter' },\n\t            'C'\n\t          )\n\t        );\n\t      }\n\t\n\t      var preparationNode = void 0;\n\t      if (this.props.preparation) {\n\t        preparationNode = React.createElement(\n\t          'div',\n\t          {\n\t            onMouseEnter: this.mouseOverPreparation,\n\t            onMouseLeave: this.mouseLeavePreparation,\n\t            className: 'lifecycle-node preparation'\n\t          },\n\t          React.createElement(\n\t            'div',\n\t            { className: 'letter' },\n\t            'P'\n\t          )\n\t        );\n\t      }\n\t\n\t      var analysisNode = void 0;\n\t      if (this.props.analysis) {\n\t        analysisNode = React.createElement(\n\t          'div',\n\t          { className: 'lifecycle-node-container' },\n\t          React.createElement('div', { className: 'lifecycle-node' }),\n\t          React.createElement(\n\t            'div',\n\t            { className: 'lifecycle-text' },\n\t            'Analysis'\n\t          )\n\t        );\n\t      }\n\t\n\t      var line = void 0;\n\t      line = React.createElement('div', { className: 'lifecycle-line' });\n\t\n\t      return React.createElement(\n\t        'div',\n\t        { className: 'lifecycle' },\n\t        React.createElement(\n\t          'div',\n\t          { className: 'lifecycle-graphic' },\n\t          collectionNode,\n\t          preparationNode ? line : null,\n\t          preparationNode,\n\t          analysisNode\n\t        )\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return LifeCycle;\n\t}(React.Component);\n\t\n\tLifeCycle.propTypes = {};\n\t\n\texports.default = LifeCycle;\n\n/***/ },\n/* 18 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _collectionForm = __webpack_require__(5);\n\t\n\tvar _collectionForm2 = _interopRequireDefault(_collectionForm);\n\t\n\tvar _preparationForm = __webpack_require__(19);\n\t\n\tvar _preparationForm2 = _interopRequireDefault(_preparationForm);\n\t\n\tvar _containerParentForm = __webpack_require__(6);\n\t\n\tvar _containerParentForm2 = _interopRequireDefault(_containerParentForm);\n\t\n\tvar _FormModal = __webpack_require__(11);\n\t\n\tvar _FormModal2 = _interopRequireDefault(_FormModal);\n\t\n\tvar _Panel = __webpack_require__(2);\n\t\n\tvar _Panel2 = _interopRequireDefault(_Panel);\n\t\n\tvar _Loader = __webpack_require__(13);\n\t\n\tvar _Loader2 = _interopRequireDefault(_Loader);\n\t\n\tvar _specimenForm = __webpack_require__(3);\n\t\n\tvar _specimenForm2 = _interopRequireDefault(_specimenForm);\n\t\n\tvar _lifeCycle = __webpack_require__(17);\n\t\n\tvar _lifeCycle2 = _interopRequireDefault(_lifeCycle);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /* exported RBiobankSpecimen */\n\t\n\t/**\n\t * Biobank Specimen\n\t *\n\t * Fetches data corresponding to a given Specimen from Loris backend and\n\t * displays a page allowing viewing of meta information of the specimen\n\t *\n\t * @author Henri Rabalais\n\t * @version 1.0.0\n\t *\n\t */\n\tvar BiobankSpecimen = function (_React$Component) {\n\t  _inherits(BiobankSpecimen, _React$Component);\n\t\n\t  function BiobankSpecimen(props) {\n\t    _classCallCheck(this, BiobankSpecimen);\n\t\n\t    var _this = _possibleConstructorReturn(this, (BiobankSpecimen.__proto__ || Object.getPrototypeOf(BiobankSpecimen)).call(this, props));\n\t\n\t    _this.state = {\n\t      Data: {},\n\t      isLoaded: false,\n\t      loadedData: 0,\n\t      editCollection: false,\n\t      editPreparation: false\n\t    };\n\t\n\t    _this.fetchSpecimenData = _this.fetchSpecimenData.bind(_this);\n\t    _this.toggleEditCollection = _this.toggleEditCollection.bind(_this);\n\t    _this.toggleEditPreparation = _this.toggleEditPreparation.bind(_this);\n\t    _this.mapFormOptions = _this.mapFormOptions.bind(_this);\n\t    _this.updateCollection = _this.updateCollection.bind(_this);\n\t    _this.updatePreparation = _this.updatePreparation.bind(_this);\n\t    //this.redirectURL = this.redirectURL.bind(this);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(BiobankSpecimen, [{\n\t    key: 'componentDidMount',\n\t    value: function componentDidMount() {\n\t      this.fetchSpecimenData();\n\t    }\n\t  }, {\n\t    key: 'fetchSpecimenData',\n\t    value: function fetchSpecimenData() {\n\t      var self = this;\n\t      $.ajax(this.props.specimenPageDataURL, {\n\t        dataType: 'json',\n\t        success: function success(data) {\n\t          self.setState({\n\t            Data: data,\n\t            isLoaded: true\n\t          });\n\t        },\n\t        error: function error(_error, errorCode, errorMsg) {\n\t          console.error(_error, errorCode, errorMsg);\n\t          self.setState({\n\t            error: 'An error occurred when loading the form!'\n\t          });\n\t        }\n\t      });\n\t    }\n\t  }, {\n\t    key: 'toggleEditCollection',\n\t    value: function toggleEditCollection() {\n\t      var editCollection = this.state.editCollection;\n\t      this.setState({\n\t        editCollection: !editCollection\n\t      });\n\t    }\n\t  }, {\n\t    key: 'toggleEditPreparation',\n\t    value: function toggleEditPreparation() {\n\t      var editPreparation = this.state.editPreparation;\n\t      this.setState({\n\t        editPreparation: !editPreparation\n\t      });\n\t    }\n\t  }, {\n\t    key: 'updateCollection',\n\t    value: function updateCollection() {\n\t      this.fetchSpecimenData();\n\t      this.toggleEditCollection();\n\t    }\n\t  }, {\n\t    key: 'updatePreparation',\n\t    value: function updatePreparation() {\n\t      this.fetchSpecimenData();\n\t      this.toggleEditPreparation();\n\t    }\n\t\n\t    //map options for forms\n\t\n\t  }, {\n\t    key: 'mapFormOptions',\n\t    value: function mapFormOptions(rawObject, targetAttribute) {\n\t      var data = {};\n\t      for (var id in rawObject) {\n\t        data[id] = rawObject[id][targetAttribute];\n\t      }\n\t\n\t      return data;\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t      var _this2 = this;\n\t\n\t      // Data loading error\n\t      if (this.state.error !== undefined) {\n\t        return React.createElement(\n\t          'div',\n\t          { className: 'alert alert-danger text-center' },\n\t          React.createElement(\n\t            'strong',\n\t            null,\n\t            this.state.error\n\t          )\n\t        );\n\t      }\n\t\n\t      // Waiting for data to load\n\t      if (!this.state.isLoaded) {\n\t        return React.createElement(_Loader2.default, null);\n\t      }\n\t\n\t      // Checks if parent specimen exists \n\t      // If exist: returns Barcode value with href\n\t      // If !exist: returns value 'None'\n\t      var parentSpecimenBarcodeValue = void 0;\n\t      var parentSpecimenBarcode = void 0;\n\t      if (this.state.Data.parentSpecimenBarcode) {\n\t        var specimenURL = loris.BaseURL + \"/biobank/specimen/?barcode=\";\n\t        parentSpecimenBarcodeValue = React.createElement(\n\t          'a',\n\t          { href: specimenURL + this.state.Data.parentSpecimenBarcode },\n\t          this.state.Data.parentSpecimenBarcode\n\t        );\n\t\n\t        parentSpecimenBarcode = React.createElement(\n\t          'div',\n\t          { className: 'item' },\n\t          React.createElement(\n\t            'div',\n\t            { className: 'field' },\n\t            'Parent Specimen',\n\t            React.createElement(\n\t              'div',\n\t              { className: 'value' },\n\t              parentSpecimenBarcodeValue ? parentSpecimenBarcodeValue : 'None'\n\t            )\n\t          )\n\t        );\n\t      }\n\t\n\t      // Checks if parent container exists and returns static element with href\n\t      var parentContainerBarcodeValue = void 0;\n\t      if (this.state.Data.parentContainerBarcode) {\n\t        var containerURL = loris.BaseURL + \"/biobank/container/?barcode=\";\n\t        parentContainerBarcodeValue = React.createElement(\n\t          'a',\n\t          { href: containerURL + this.state.Data.parentContainerBarcode },\n\t          this.state.Data.parentContainerBarcode\n\t        );\n\t      }\n\t\n\t      var parentContainerBarcode = React.createElement(\n\t        'div',\n\t        { className: 'item' },\n\t        React.createElement(\n\t          'div',\n\t          { className: 'field' },\n\t          'Parent Container',\n\t          React.createElement(\n\t            'div',\n\t            { className: 'value' },\n\t            parentContainerBarcodeValue ? parentContainerBarcodeValue : 'None'\n\t          ),\n\t          parentContainerBarcodeValue && this.state.Data.container.coordinate ? 'Coordinate ' + this.state.Data.container.coordinate : null\n\t        ),\n\t        React.createElement(\n\t          'div',\n\t          { className: 'action' },\n\t          React.createElement(\n\t            _FormModal2.default,\n\t            {\n\t              title: 'Update Parent Container',\n\t              buttonContent: React.createElement(\n\t                'div',\n\t                null,\n\t                'Move',\n\t                React.createElement('span', {\n\t                  className: 'glyphicon glyphicon-chevron-right',\n\t                  style: { marginLeft: '5px' }\n\t                })\n\t              )\n\t            },\n\t            React.createElement(_containerParentForm2.default, {\n\t              containersNonPrimary: this.state.Data.containersNonPrimary,\n\t              containerDimensions: this.state.Data.containerDimensions,\n\t              containerCoordinates: this.state.Data.containerCoordinates,\n\t              container: this.state.Data.container,\n\t              containerTypes: this.state.Data.containerTypes,\n\t              containerStati: this.state.Data.containerStati,\n\t              action: loris.BaseURL + '/biobank/ajax/ContainerInfo.php?action=updateContainerParent',\n\t              refreshParent: this.fetchSpecimenData\n\t            })\n\t          )\n\t        )\n\t      );\n\t\n\t      /**\n\t       * Specimen Form\n\t       */\n\t      var addAliquotButton = void 0;\n\t\n\t      if (loris.userHasPermission('biobank_write')) {\n\t        /**\n\t         * Map Options for Form Select Elements\n\t         */\n\t        var specimenTypes = {};\n\t        //produces options conditionally based on the parentId of the specimen\n\t        for (var _id in this.state.Data.specimenTypes) {\n\t          // if parentTypeId is equal to typeId\n\t          if (this.state.Data.specimenTypes[_id].parentTypeId == this.state.Data.specimen.typeId || _id == this.state.Data.specimen.typeId) {\n\t            specimenTypes[_id] = this.state.Data.specimenTypes[_id]['type'];\n\t          }\n\t        }\n\t\n\t        var specimenUnits = this.mapFormOptions(this.state.Data.specimenUnits, 'unit');\n\t        var containerTypesPrimary = this.mapFormOptions(this.state.Data.containerTypesPrimary, 'label');\n\t\n\t        var addAliquotButtonContent = React.createElement(\n\t          'div',\n\t          { className: 'specimen-button' },\n\t          React.createElement('span', {\n\t            className: 'glyphicon glyphicon-plus',\n\t            style: { marginRight: '5px' }\n\t          }),\n\t          'Aliquots'\n\t        );\n\t\n\t        addAliquotButton = React.createElement(\n\t          _FormModal2.default,\n\t          {\n\t            title: 'Create Specimen Aliquots',\n\t            buttonClass: 'btn btn-success',\n\t            buttonStyle: { display: 'flex', alignItems: 'center' },\n\t            buttonContent: addAliquotButtonContent\n\t          },\n\t          React.createElement(_specimenForm2.default, {\n\t            action: loris.BaseURL + '/biobank/ajax/SpecimenInfo.php?action=submitSpecimen',\n\t            child: 'true',\n\t            specimenId: this.state.Data.specimen.id,\n\t            barcode: this.state.Data.container.barcode,\n\t            candidateId: this.state.Data.specimen.candidateId,\n\t            sessionId: this.state.Data.specimen.sessionId,\n\t            pscid: this.state.Data.candidateInfo[this.state.Data.specimen.candidateId].PSCID,\n\t            visit: this.state.Data.sessionInfo[this.state.Data.specimen.sessionId].Visit_label,\n\t            unitId: this.state.Data.specimen.unitId,\n\t            specimenTypes: specimenTypes,\n\t            specimenTypeUnits: this.state.Data.specimenTypeUnits,\n\t            specimenUnits: specimenUnits,\n\t            containerTypesPrimary: containerTypesPrimary,\n\t            containersNonPrimary: this.state.Data.containersNonPrimary,\n\t            containerDimensions: this.state.Data.containerDimensions,\n\t            containerCoordinates: this.state.Data.containerCoordinates,\n\t            specimenTypeAttributes: this.state.Data.specimenTypeAttributes,\n\t            attributeDatatypes: this.state.Data.attributeDatatypes,\n\t            refreshParent: this.fetchSpecimenData\n\t          })\n\t        );\n\t      }\n\t\n\t      /** \n\t       * Collection Form\n\t       */\n\t\n\t      // Declare Variables\n\t      var collectionPanel = void 0;\n\t      var collectionPanelForm = void 0;\n\t      var cancelEditCollectionButton = void 0;\n\t\n\t      if (this.state.editCollection) {\n\t\n\t        //Map Options for Form Select Elements\n\t        var _specimenTypes = {};\n\t        //produces options conditionally based on the parentId of the specimen\n\t        for (var id in this.state.Data.specimenTypes) {\n\t          // if specimen type has a parent type\n\t          if (this.state.Data.specimenTypes[this.state.Data.specimen.typeId].parentTypeId) {\n\t            if (this.state.Data.specimenTypes[id].parentTypeId == this.state.Data.specimenTypes[this.state.Data.specimen.typeId].parentTypeId || id == this.state.Data.specimen.typeId) {\n\t              _specimenTypes[id] = this.state.Data.specimenTypes[id]['type'];\n\t            }\n\t            // else if specimen type has no parent type\n\t          } else {\n\t            if (!this.state.Data.specimenTypes[id].parentTypeId) {\n\t              _specimenTypes[id] = this.state.Data.specimenTypes[id]['type'];\n\t            }\n\t          }\n\t        }\n\t\n\t        var _containerTypesPrimary = this.mapFormOptions(this.state.Data.containerTypesPrimary, 'label');\n\t\n\t        collectionPanelForm = React.createElement(_collectionForm2.default, {\n\t          specimenId: this.state.Data.specimen.id,\n\t          specimenType: this.state.Data.specimen.typeId,\n\t          containerId: this.state.Data.container.id,\n\t          containerType: this.state.Data.container.typeId,\n\t          collection: this.state.Data.specimen.collection,\n\t          specimenTypes: _specimenTypes,\n\t          specimenTypeAttributes: this.state.Data.specimenTypeAttributes,\n\t          attributeDatatypes: this.state.Data.attributeDatatypes,\n\t          containerTypesPrimary: _containerTypesPrimary,\n\t          specimenTypeUnits: this.state.Data.specimenTypeUnits,\n\t          edit: true,\n\t          action: loris.BaseURL + '/biobank/ajax/SpecimenInfo.php?action=updateSpecimenCollection',\n\t          toggleEdit: this.toggleEditCollection,\n\t          refreshParent: this.updateCollection\n\t        });\n\t\n\t        cancelEditCollectionButton = React.createElement(\n\t          'a',\n\t          { className: 'pull-right', style: { cursor: 'pointer' }, onClick: this.toggleEditCollection },\n\t          'Cancel'\n\t        );\n\t      } else {\n\t\n\t        //loops through data object to produce static elements\n\t        if (this.state.Data.specimen.collection.data) {\n\t          var dataObject = this.state.Data.specimen.collection.data;\n\t          var specimenTypeAttributes = Object.keys(dataObject).map(function (key) {\n\t            return React.createElement(StaticElement, {\n\t              label: _this2.state.Data.specimenTypeAttributes[_this2.state.Data.specimen.typeId][key].name,\n\t              text: dataObject[key]\n\t            });\n\t          });\n\t        }\n\t\n\t        collectionPanelForm = React.createElement(\n\t          FormElement,\n\t          null,\n\t          React.createElement(StaticElement, {\n\t            label: 'Quantity',\n\t            text: this.state.Data.specimen.collection.quantity + ' ' + this.state.Data.specimenUnits[this.state.Data.specimen.collection.unitId].unit\n\t          }),\n\t          React.createElement(StaticElement, {\n\t            label: 'Location',\n\t            text: this.state.Data.sites[this.state.Data.specimen.collection.locationId]\n\t          }),\n\t          specimenTypeAttributes,\n\t          React.createElement(StaticElement, {\n\t            label: 'Date',\n\t            text: this.state.Data.specimen.collection.date\n\t          }),\n\t          React.createElement(StaticElement, {\n\t            label: 'Time',\n\t            text: this.state.Data.specimen.collection.time\n\t          }),\n\t          React.createElement(StaticElement, {\n\t            label: 'Comments',\n\t            text: this.state.Data.specimen.collection.comments\n\t          })\n\t        );\n\t      }\n\t\n\t      collectionPanel = React.createElement(\n\t        'div',\n\t        { className: 'panel panel-default' },\n\t        React.createElement(\n\t          'div',\n\t          { className: 'panel-heading' },\n\t          React.createElement(\n\t            'div',\n\t            { className: 'lifecycle-node collection' },\n\t            React.createElement(\n\t              'div',\n\t              { className: 'letter' },\n\t              'C'\n\t            )\n\t          ),\n\t          React.createElement(\n\t            'div',\n\t            { className: 'title' },\n\t            'Collection'\n\t          ),\n\t          React.createElement('span', {\n\t            className: this.state.editCollection ? null : 'glyphicon glyphicon-pencil',\n\t            onClick: this.state.editCollection ? null : this.toggleEditCollection\n\t          })\n\t        ),\n\t        React.createElement(\n\t          'div',\n\t          { className: 'panel-body' },\n\t          collectionPanelForm,\n\t          cancelEditCollectionButton\n\t        )\n\t      );\n\t\n\t      /*\n\t       * Preparation Form\n\t       */\n\t\n\t      // Preparation Panel variable declaration\n\t      var preparationPanel = void 0;\n\t      var preparationForm = void 0;\n\t      var specimenProtocolAttributes = void 0;\n\t      var cancelEditPreparationButton = void 0;\n\t\n\t      // If the form is an edit state\n\t      if (this.state.editPreparation) {\n\t        //Map Options for Form Select Elements Here\n\t        specimenProtocolAttributes = this.state.Data.specimenProtocolAttributes[this.state.Data.specimen.typeId];\n\t\n\t        //This remaps specimen Protocols based on the specimen Type\n\t        //this may need to be refactored or put into a function later\n\t        var specimenProtocols = {};\n\t        for (var id in specimenProtocolAttributes) {\n\t          specimenProtocols[id] = this.state.Data.specimenProtocols[id];\n\t        }\n\t\n\t        specimenProtocols = this.mapFormOptions(specimenProtocols, 'protocol');\n\t\n\t        preparationForm = React.createElement(_preparationForm2.default, {\n\t          specimenId: this.state.Data.specimen.id,\n\t          preparation: this.state.Data.specimen.preparation ? this.state.Data.specimen.preparation : null,\n\t          specimenProtocols: specimenProtocols,\n\t          sites: this.state.Data.sites,\n\t          specimenProtocolAttributes: specimenProtocolAttributes,\n\t          attributeDatatypes: this.state.Data.attributeDatatypes,\n\t          insertAction: loris.BaseURL + '/biobank/ajax/SpecimenInfo.php?action=insertSpecimenPreparation',\n\t          updateAction: loris.BaseURL + '/biobank/ajax/SpecimenInfo.php?action=updateSpecimenPreparation',\n\t          refreshParent: this.updatePreparation\n\t        });\n\t\n\t        cancelEditPreparationButton = React.createElement(\n\t          'a',\n\t          { className: 'pull-right', style: { cursor: 'pointer' }, onClick: this.toggleEditPreparation },\n\t          'Cancel'\n\t        );\n\t      }\n\t\n\t      // If Preparation Does Exist and the form is not in an edit state\n\t      if (this.state.Data.specimen.preparation && !this.state.editPreparation) {\n\t        var dataObject = this.state.Data.specimen.preparation.data;\n\t\n\t        if (dataObject) {\n\t          specimenProtocolAttributes = Object.keys(dataObject).map(function (key) {\n\t            return React.createElement(StaticElement, {\n\t              label: _this2.state.Data.specimenProtocolAttributes[_this2.state.Data.specimen.typeId][_this2.state.Data.specimen.preparation.protocolId][key].name,\n\t              text: dataObject[key]\n\t            });\n\t          });\n\t        }\n\t\n\t        preparationForm = React.createElement(\n\t          FormElement,\n\t          null,\n\t          React.createElement(StaticElement, {\n\t            label: 'Protocol',\n\t            text: this.state.Data.specimenProtocols[this.state.Data.specimen.preparation.protocolId].protocol\n\t          }),\n\t          React.createElement(StaticElement, {\n\t            label: 'Location',\n\t            text: this.state.Data.sites[this.state.Data.specimen.preparation.locationId]\n\t          }),\n\t          specimenProtocolAttributes,\n\t          React.createElement(StaticElement, {\n\t            label: 'Date',\n\t            text: this.state.Data.specimen.preparation.date\n\t          }),\n\t          React.createElement(StaticElement, {\n\t            label: 'Time',\n\t            text: this.state.Data.specimen.preparation.time\n\t          }),\n\t          React.createElement(StaticElement, {\n\t            label: 'Comments',\n\t            text: this.state.Data.specimen.preparation.comments\n\t          })\n\t        );\n\t      }\n\t\n\t      // If preparation does not exist and if the form is not in an edit state\n\t      // and a preparation protocol exists for this specimen type\n\t      if (this.state.Data.specimenProtocolAttributes[this.state.Data.specimen.typeId] && !this.state.Data.specimen.preparation && !this.state.editPreparation) {\n\t        preparationPanel = React.createElement(\n\t          'div',\n\t          {\n\t            className: 'panel inactive'\n\t          },\n\t          React.createElement(\n\t            'div',\n\t            {\n\t              className: 'add-process',\n\t              onClick: this.toggleEditPreparation\n\t            },\n\t            React.createElement('span', { className: 'glyphicon glyphicon-plus' })\n\t          ),\n\t          React.createElement(\n\t            'div',\n\t            null,\n\t            'ADD PREPARATION'\n\t          )\n\t        );\n\t      } else if (this.state.Data.specimen.preparation || this.state.editPreparation) {\n\t        preparationPanel = React.createElement(\n\t          'div',\n\t          { className: 'panel panel-default' },\n\t          React.createElement(\n\t            'div',\n\t            { className: 'panel-heading' },\n\t            React.createElement(\n\t              'div',\n\t              { className: 'lifecycle-node preparation' },\n\t              React.createElement(\n\t                'div',\n\t                { className: 'letter' },\n\t                'P'\n\t              )\n\t            ),\n\t            React.createElement(\n\t              'div',\n\t              { className: 'title' },\n\t              'Preparation'\n\t            ),\n\t            React.createElement('span', {\n\t              className: this.state.editPreparation ? null : 'glyphicon glyphicon-pencil',\n\t              onClick: this.state.editPreparation ? null : this.toggleEditPreparation\n\t            })\n\t          ),\n\t          React.createElement(\n\t            'div',\n\t            { className: 'panel-body' },\n\t            preparationForm,\n\t            cancelEditPreparationButton\n\t          )\n\t        );\n\t      }\n\t\n\t      /**\n\t       * Analysis Form\n\t       */\n\t      var analysisPanel = void 0;\n\t      analysisPanel = React.createElement(\n\t        'div',\n\t        {\n\t          className: 'panel inactive'\n\t        },\n\t        React.createElement(\n\t          'div',\n\t          {\n\t            className: 'add-process'\n\t          },\n\t          React.createElement('span', { className: 'glyphicon glyphicon-plus' })\n\t        ),\n\t        React.createElement(\n\t          'div',\n\t          null,\n\t          'ADD ANALYSIS'\n\t        )\n\t      );\n\t\n\t      // This should eventually go into its own component \n\t      var globals = React.createElement(\n\t        'div',\n\t        { className: 'globals' },\n\t        React.createElement(\n\t          'div',\n\t          { className: 'list' },\n\t          React.createElement(\n\t            'div',\n\t            { className: 'item' },\n\t            React.createElement(\n\t              'div',\n\t              { className: 'field' },\n\t              'Specimen Type',\n\t              React.createElement(\n\t                'div',\n\t                { className: 'value' },\n\t                this.state.Data.specimenTypes[this.state.Data.specimen.typeId].type\n\t              )\n\t            )\n\t          ),\n\t          React.createElement(\n\t            'div',\n\t            { className: 'item' },\n\t            React.createElement(\n\t              'div',\n\t              { className: 'field' },\n\t              'Container Type',\n\t              React.createElement(\n\t                'div',\n\t                { className: 'value' },\n\t                this.state.Data.containerTypes[this.state.Data.container.typeId].label\n\t              )\n\t            )\n\t          ),\n\t          React.createElement(\n\t            'div',\n\t            { className: 'item' },\n\t            React.createElement(\n\t              'div',\n\t              { className: 'field' },\n\t              'Quantity',\n\t              React.createElement(\n\t                'div',\n\t                { className: 'value' },\n\t                this.state.Data.specimen.quantity,\n\t                ' ' + this.state.Data.specimenUnits[this.state.Data.specimen.unitId].unit\n\t              )\n\t            ),\n\t            React.createElement(\n\t              'div',\n\t              { className: 'action' },\n\t              React.createElement(_FormModal2.default, {\n\t                title: 'Update',\n\t                buttonContent: React.createElement(\n\t                  'div',\n\t                  null,\n\t                  'Update',\n\t                  React.createElement('span', {\n\t                    className: 'glyphicon glyphicon-chevron-right',\n\t                    style: { marginLeft: '5px' }\n\t                  })\n\t                )\n\t              })\n\t            )\n\t          ),\n\t          React.createElement(\n\t            'div',\n\t            { className: 'item' },\n\t            React.createElement(\n\t              'div',\n\t              { className: 'field' },\n\t              'Temperature',\n\t              React.createElement(\n\t                'div',\n\t                { className: 'value' },\n\t                this.state.Data.container.temperature + '°C'\n\t              )\n\t            ),\n\t            React.createElement(\n\t              'div',\n\t              { className: 'action' },\n\t              React.createElement(_FormModal2.default, {\n\t                title: 'Update',\n\t                buttonContent: React.createElement(\n\t                  'div',\n\t                  null,\n\t                  'Update',\n\t                  React.createElement('span', {\n\t                    className: 'glyphicon glyphicon-chevron-right',\n\t                    style: { marginLeft: '5px' }\n\t                  })\n\t                )\n\t              })\n\t            )\n\t          ),\n\t          React.createElement(\n\t            'div',\n\t            { className: 'item' },\n\t            React.createElement(\n\t              'div',\n\t              { className: 'field' },\n\t              'Status',\n\t              React.createElement(\n\t                'div',\n\t                { className: 'value' },\n\t                this.state.Data.containerStati[this.state.Data.container.statusId].status\n\t              )\n\t            ),\n\t            React.createElement(\n\t              'div',\n\t              { className: 'action' },\n\t              React.createElement(_FormModal2.default, {\n\t                title: 'Update',\n\t                buttonContent: React.createElement(\n\t                  'div',\n\t                  null,\n\t                  'Update',\n\t                  React.createElement('span', {\n\t                    className: 'glyphicon glyphicon-chevron-right',\n\t                    style: { marginLeft: '5px' }\n\t                  })\n\t                )\n\t              })\n\t            )\n\t          ),\n\t          React.createElement(\n\t            'div',\n\t            { className: 'item' },\n\t            React.createElement(\n\t              'div',\n\t              { className: 'field' },\n\t              'Location',\n\t              React.createElement(\n\t                'div',\n\t                { className: 'value' },\n\t                this.state.Data.sites[this.state.Data.container.locationId]\n\t              )\n\t            ),\n\t            React.createElement(\n\t              'div',\n\t              { className: 'action' },\n\t              React.createElement(_FormModal2.default, {\n\t                title: 'Ship',\n\t                buttonContent: React.createElement(\n\t                  'div',\n\t                  null,\n\t                  'Ship',\n\t                  React.createElement('span', {\n\t                    className: 'glyphicon glyphicon-chevron-right',\n\t                    style: { marginLeft: '5px' }\n\t                  })\n\t                )\n\t              })\n\t            )\n\t          ),\n\t          parentSpecimenBarcode,\n\t          parentContainerBarcode,\n\t          React.createElement(\n\t            'div',\n\t            { className: 'item' },\n\t            React.createElement(\n\t              'div',\n\t              { className: 'field' },\n\t              'PSCID',\n\t              React.createElement(\n\t                'div',\n\t                { className: 'value' },\n\t                React.createElement(\n\t                  'a',\n\t                  { href: loris.BaseURL + '/' + this.state.Data.specimen.candidateId },\n\t                  this.state.Data.candidateInfo[this.state.Data.specimen.candidateId].PSCID\n\t                )\n\t              )\n\t            ),\n\t            React.createElement(\n\t              'div',\n\t              { className: 'field' },\n\t              'Visit Label',\n\t              React.createElement(\n\t                'div',\n\t                { className: 'value' },\n\t                React.createElement(\n\t                  'a',\n\t                  { href: loris.BaseURL + '/instrument_list/?candID=' + this.state.Data.specimen.candidateId + '&sessionID=' + this.state.Data.specimen.sessionId },\n\t                  this.state.Data.sessionInfo[this.state.Data.specimen.sessionId].Visit_label\n\t                )\n\t              )\n\t            )\n\t          )\n\t        )\n\t      );\n\t\n\t      return React.createElement(\n\t        'div',\n\t        { id: 'specimen-page' },\n\t        React.createElement(\n\t          'div',\n\t          { className: 'specimen-header' },\n\t          React.createElement(\n\t            'div',\n\t            { className: 'specimen-title' },\n\t            React.createElement(\n\t              'div',\n\t              { className: 'barcode' },\n\t              'Barcode',\n\t              React.createElement(\n\t                'div',\n\t                { className: 'value' },\n\t                React.createElement(\n\t                  'strong',\n\t                  null,\n\t                  this.state.Data.container.barcode\n\t                )\n\t              )\n\t            ),\n\t            addAliquotButton\n\t          ),\n\t          React.createElement(_lifeCycle2.default, {\n\t            collection: this.state.Data.specimen.collection,\n\t            preparation: this.state.Data.specimen.preparation,\n\t            analysis: this.state.Data.specimen.analysis,\n\t            sites: this.state.Data.sites\n\t          })\n\t        ),\n\t        React.createElement(\n\t          'div',\n\t          { className: 'summary' },\n\t          globals,\n\t          React.createElement(\n\t            'div',\n\t            { className: 'processing' },\n\t            collectionPanel,\n\t            preparationPanel,\n\t            analysisPanel\n\t          )\n\t        )\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return BiobankSpecimen;\n\t}(React.Component);\n\t\n\tBiobankSpecimen.propTypes = {\n\t  specimenPageDataURL: React.PropTypes.string.isRequired\n\t};\n\t\n\tvar RBiobankSpecimen = React.createFactory(BiobankSpecimen);\n\t\n\twindow.BiobankSpecimen = BiobankSpecimen;\n\twindow.RBiobankSpecimen = RBiobankSpecimen;\n\t\n\texports.default = BiobankSpecimen;\n\n/***/ },\n/* 19 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * Biobank Specimen Form\n\t *\n\t * Acts a subform for BiobankCollectionForm\n\t *\n\t * @author Henri Rabalais\n\t * @version 1.0.0\n\t *\n\t **/\n\t\n\tvar SpecimenPreparationForm = function (_React$Component) {\n\t  _inherits(SpecimenPreparationForm, _React$Component);\n\t\n\t  function SpecimenPreparationForm(props) {\n\t    _classCallCheck(this, SpecimenPreparationForm);\n\t\n\t    var _this = _possibleConstructorReturn(this, (SpecimenPreparationForm.__proto__ || Object.getPrototypeOf(SpecimenPreparationForm)).call(this, props));\n\t\n\t    _this.state = {\n\t      formData: { data: {} },\n\t      currentProtocol: _this.props.preparation ? _this.props.preparation.protocolId : null,\n\t      formErrors: {}\n\t    };\n\t\n\t    _this.setFormData = _this.setFormData.bind(_this);\n\t    _this.setSpecimenProtocolFieldFormData = _this.setSpecimenProtocolFieldFormData.bind(_this);\n\t    _this.getSpecimenProtocolFields = _this.getSpecimenProtocolFields.bind(_this);\n\t    _this.handleSave = _this.handleSave.bind(_this);\n\t    _this.savePreparation = _this.savePreparation.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(SpecimenPreparationForm, [{\n\t    key: 'componentDidMount',\n\t    value: function componentDidMount() {\n\t      var _this2 = this;\n\t\n\t      var formData = this.state.formData;\n\t\n\t      formData['specimenId'] = this.props.specimenId;\n\t\n\t      // This for autoloading data and will be used later\n\t      if (this.props.preparation) {\n\t        formData['protocolId'] = this.props.preparation.protocolId;\n\t        formData['locationId'] = this.props.preparation.locationId;\n\t        formData['date'] = this.props.preparation.date;\n\t        formData['time'] = this.props.preparation.time;\n\t        formData['comments'] = this.props.preparation.comments;\n\t\n\t        var specimenProtocolFieldsObject = this.props.specimenProtocolAttributes[this.state.currentProtocol];\n\t        if (specimenProtocolFieldsObject) {\n\t          var specimenProtocolFields = Object.keys(specimenProtocolFieldsObject).map(function (attribute) {\n\t            formData.data[attribute] = _this2.props.preparation.data[attribute];\n\t          });\n\t        }\n\t      }\n\t      this.setState({\n\t        formData: formData\n\t      });\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t\n\t      var submitButton;\n\t      if (!this.props.preparation) {\n\t        submitButton = React.createElement(ButtonElement, { label: 'Submit' });\n\t      }\n\t\n\t      var updateButton;\n\t      var locationField;\n\t      if (this.props.preparation) {\n\t        updateButton = React.createElement(ButtonElement, { label: 'Update' });\n\t\n\t        locationField = React.createElement(SelectElement, {\n\t          name: 'locationId',\n\t          label: 'Location',\n\t          options: this.props.sites,\n\t          onUserInput: this.setFormData,\n\t          required: true,\n\t          value: this.state.formData.locationId\n\t        });\n\t      }\n\t\n\t      var specimenProtocolFields = void 0;\n\t      if (this.state.currentProtocol) {\n\t        var specimenProtocolFieldsObject = this.props.specimenProtocolAttributes[this.state.currentProtocol];\n\t\n\t        if (specimenProtocolFieldsObject) {\n\t          specimenProtocolFields = this.getSpecimenProtocolFields(specimenProtocolFieldsObject);\n\t        }\n\t      }\n\t\n\t      //This will be for default fields, if there are any eventually\n\t      if (this.state.currentSpecimenProtocol) {\n\t        preparationFields = React.createElement('div', null);\n\t      }\n\t\n\t      return React.createElement(\n\t        FormElement,\n\t        {\n\t          name: 'specimenPreparation',\n\t          onSubmit: this.handleSave,\n\t          ref: 'form'\n\t        },\n\t        React.createElement(SelectElement, {\n\t          name: 'protocolId',\n\t          label: 'Protocol',\n\t          options: this.props.specimenProtocols,\n\t          onUserInput: this.setFormData,\n\t          required: true,\n\t          value: this.state.formData.protocolId\n\t        }),\n\t        locationField,\n\t        specimenProtocolFields,\n\t        React.createElement(DateElement, {\n\t          name: 'date',\n\t          label: 'Date',\n\t          onUserInput: this.setFormData,\n\t          required: true,\n\t          value: this.state.formData.date\n\t        }),\n\t        React.createElement(TimeElement, {\n\t          name: 'time',\n\t          label: 'Time',\n\t          onUserInput: this.setFormData,\n\t          required: true,\n\t          value: this.state.formData.time\n\t        }),\n\t        React.createElement(TextareaElement, {\n\t          name: 'comments',\n\t          label: 'Comments',\n\t          onUserInput: this.setFormData,\n\t          value: this.state.formData.comments\n\t        }),\n\t        submitButton,\n\t        updateButton\n\t      );\n\t    }\n\t\n\t    /**\n\t     * Set the form data based on state values of child elements/componenets\n\t     *\n\t     * @param {string} formElement - name of the selected element\n\t     * @param {string} value - selected value for corresponding form element\n\t     */\n\t\n\t  }, {\n\t    key: 'setFormData',\n\t    value: function setFormData(formElement, value) {\n\t\n\t      var formData = this.state.formData;\n\t\n\t      if (formElement === \"protocolId\" && value !== \"\") {\n\t        //This is to eliminate the values for the specimen protocol fields\n\t        //This could potentially be improved later to retain the values\n\t        //for the fields that are common accross protocols\n\t        formData.data = {};\n\t        this.setState({\n\t          currentProtocol: value\n\t        });\n\t      }\n\t\n\t      formData[formElement] = value;\n\t\n\t      this.setState({\n\t        formData: formData\n\t      });\n\t    }\n\t  }, {\n\t    key: 'setSpecimenProtocolFieldFormData',\n\t    value: function setSpecimenProtocolFieldFormData(formElement, value) {\n\t      var formData = this.state.formData;\n\t      formData.data[formElement] = value;\n\t\n\t      this.setState({\n\t        formData: formData\n\t      });\n\t    }\n\t\n\t    // This generates all the form fields for a given specimen protocol\n\t\n\t  }, {\n\t    key: 'getSpecimenProtocolFields',\n\t    value: function getSpecimenProtocolFields(fieldsObject) {\n\t      var _this3 = this;\n\t\n\t      var specimenProtocolFields = Object.keys(fieldsObject).map(function (attribute) {\n\t        var datatype = _this3.props.attributeDatatypes[fieldsObject[attribute]['datatypeId']].datatype;\n\t\n\t        if (datatype === \"text\" || datatype === \"number\") {\n\t          if (fieldsObject[attribute]['refTableId'] == null) {\n\t            return React.createElement(TextboxElement, {\n\t              name: attribute,\n\t              label: fieldsObject[attribute]['name'],\n\t              onUserInput: _this3.setSpecimenProtocolFieldFormData,\n\t              ref: attribute,\n\t              required: fieldsObject[attribute]['required'],\n\t              value: _this3.state.formData.data[attribute],\n\t              hasError: _this3.state.formErrors[attribute],\n\t              errorMessage: \"This is a \" + datatype + \" field.\"\n\t            });\n\t          }\n\t\n\t          if (fieldsObject[attribute]['refTableId'] !== null) {\n\t            return React.createElement(SelectElement, {\n\t              name: attribute,\n\t              label: fieldsObject[attribute]['name'],\n\t              options: '',\n\t              onUserInput: _this3.setSpecimenProtocolFieldFormData,\n\t              ref: attribute,\n\t              required: fieldsObject[attribute]['required'],\n\t              value: _this3.state.formData.data[attribute]\n\t            });\n\t          }\n\t        }\n\t\n\t        if (datatype === \"datetime\") {\n\t          return React.createElement(DateElement, {\n\t            name: attribute,\n\t            label: fieldsObject[attribute]['name'],\n\t            onUserInput: _this3.setSpecimenProtocolFieldFormData,\n\t            ref: attribute,\n\t            required: fieldsObject[attribute]['required'],\n\t            value: _this3.state.formData.data[attribute]\n\t          });\n\t        }\n\t\n\t        if (datatype === \"boolean\") {}\n\t      });\n\t\n\t      return specimenProtocolFields;\n\t    }\n\t  }, {\n\t    key: 'handleSave',\n\t    value: function handleSave(e) {\n\t      //more things will go here later\n\t      if (!this.props.preparation) {\n\t        this.savePreparation(this.props.insertAction);\n\t      }\n\t      if (this.props.preparation) {\n\t        this.savePreparation(this.props.updateAction);\n\t      }\n\t    }\n\t  }, {\n\t    key: 'savePreparation',\n\t    value: function savePreparation(action) {\n\t      var formData = this.state.formData;\n\t      formData['data'] = JSON.stringify(formData['data']);\n\t\n\t      var formObj = new FormData();\n\t      for (var key in formData) {\n\t        if (formData[key] !== \"\") {\n\t          formObj.append(key, formData[key]);\n\t        }\n\t      }\n\t\n\t      $.ajax({\n\t        type: 'POST',\n\t        url: action,\n\t        data: formObj,\n\t        cache: false,\n\t        contentType: false,\n\t        processData: false,\n\t        xhr: function () {\n\t          var xhr = new window.XMLHttpRequest();\n\t          return xhr;\n\t        }.bind(this),\n\t        success: function () {\n\t          //Update Parent Specimen Page Here\n\t          formData.data = JSON.parse(formData.data);\n\t          this.props.refreshParent();\n\t          //swal(\"Specimen Preparation Update Successful!\", \"\", \"success\");\n\t          this.props.onSuccess();\n\t        }.bind(this),\n\t        error: function (err) {\n\t          console.error(err);\n\t          var msg = err.responseJSON ? err.responseJSON.message : \"Specimen error!\";\n\t\n\t          this.setState({\n\t            errorMessage: msg\n\t          });\n\t          swal(msg, \"\", \"error\");\n\t        }.bind(this)\n\t      });\n\t    }\n\t  }]);\n\t\n\t  return SpecimenPreparationForm;\n\t}(React.Component);\n\t\n\tSpecimenPreparationForm.propTypes = {\n\t  containerTypesPrimary: React.PropTypes.object.isRequired,\n\t  specimenTypeAttributes: React.PropTypes.object.isRequired,\n\t  attributeDatatypes: React.PropTypes.object.isRequired,\n\t  capacities: React.PropTypes.object.isRequired,\n\t  units: React.PropTypes.object.isRequired\n\t};\n\t\n\texports.default = SpecimenPreparationForm;\n\n/***/ }\n/******/ ]);\n\n\n// WEBPACK FOOTER //\n// modules/biobank/js/specimenIndex.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap c84edf0d9354854f165d","/* global ReactDOM */\n\nimport BiobankSpecimen from './specimen';\nconst args = QueryString.get(document.currentScript.src);\n\n$(function() {\n  const biobankSpecimen = (\n    <div className=\"page-specimen-form\">\n      <div className=\"row\">\n        <div className=\"col-md-9 col-lg-12\">\n          <BiobankSpecimen\n            specimenPageDataURL={`${loris.BaseURL}/biobank/ajax/SpecimenInfo.php?action=getSpecimenData&barcode=${args.barcode}`}\n          />\n        </div>\n      </div>\n    </div>\n  );\n\n  ReactDOM.render(biobankSpecimen, document.getElementById(\"lorisworkspace\"));\n});\n\n\n\n// WEBPACK FOOTER //\n// ./modules/biobank/jsx/specimenIndex.js","/**\n * This file contains React component for Panel\n *\n * @author Alex I.\n * @version 1.0.0\n *\n */\n\n/**\n * Panel component\n * Wraps children in a collapsible bootstrap panel\n */\nclass Panel extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      collapsed: this.props.initCollapsed\n    };\n\n    // Initialize panel class based on collapsed status\n    this.panelClass = (\n      this.props.initCollapsed ?\n        \"panel-collapse collapse\" :\n        \"panel-collapse collapse in\"\n    );\n\n    this.toggleCollapsed = this.toggleCollapsed.bind(this);\n  }\n\n  toggleCollapsed() {\n    this.setState({collapsed: !this.state.collapsed});\n  }\n\n  render() {\n    // Change arrow direction based on collapse status\n    let glyphClass = (\n      this.state.collapsed ?\n        \"glyphicon pull-right glyphicon-chevron-down\" :\n        \"glyphicon pull-right glyphicon-chevron-up\"\n    );\n\n    let pencilGlyph;\n    if (this.props.edit) {\n      pencilGlyph = (\n        <span\n          className=\"glyphicon pull-right glyphicon-pencil\"\n          style={{marginRight:'10px', cursor: 'pointer'}}\n          onClick={this.props.edit}\n        /> \n      );\n    } \n\n    let plusGlyph;\n    if (this.props.add) {\n      plusGlyph = (\n        <span\n          className=\"glyphicon pull-right glyphicon-plus\"\n          style={{marginRight:'10px', cursor: 'pointer'}}\n          onClick={this.props.add}\n        />\n      );\n    }\n\n    let removeGlyph;\n    if (this.props.cancel) {\n      removeGlyph = (\n        <span\n          className=\"glyphicon pull-right glyphicon-remove\"\n          style={{marginRight:'10px', cursor: 'pointer'}}\n          onClick={this.props.cancel}\n        />\n      );\n    }\n\n    // Add panel header, if title is set\n    const panelHeading = this.props.title ? (\n      <div\n        className=\"panel-heading\"\n      >\n        <span \n          className={glyphClass}\n          onClick={this.toggleCollapsed}\n          data-toggle=\"collapse\"\n          data-target={'#' + this.props.id}\n          style={{cursor: 'pointer'}}\n        />\n        {pencilGlyph}\n        {plusGlyph}\n        {removeGlyph}\n        {this.props.title}\n      </div>\n    ) : '';\n\n    return (\n      <div className=\"panel panel-primary\">\n        {panelHeading}\n        <div id={this.props.id} className={this.panelClass} role=\"tabpanel\">\n          <div className=\"panel-body\" style={{height: this.props.height}}>\n            {this.props.children}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nPanel.propTypes = {\n  id: React.PropTypes.string,\n  height: React.PropTypes.string,\n  title: React.PropTypes.string,\n  edit: React.PropTypes.func,\n  add: React.PropTypes.func\n};\nPanel.defaultProps = {\n  initCollapsed: false,\n  id: 'default-panel',\n  height: '100%'\n};\n\nexport default Panel;\n\n\n\n// WEBPACK FOOTER //\n// ./jsx/Panel.js","import SpecimenBarcodeForm from './barcodeForm.js';\n\n/**\n * Biobank Collection Form\n *\n * Fetches data from Loris backend and displays a form allowing\n * to specimen a biobank file attached to a specific instrument\n *\n * @author Henri Rabalais\n * @version 1.0.0\n *\n * */\nclass BiobankSpecimenForm extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      formData: {},\n      errorMessage: null,\n      formErrors: {},\n      barcodeFormList: {1: {}},\n      countBarcodeForms: 1\n    };\n\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.validateForm = this.validateForm.bind(this);\n    this.setFormData = this.setFormData.bind(this);\n    this.specimenSubmit = this.specimenSubmit.bind(this);\n    this.addBarcodeForm = this.addBarcodeForm.bind(this);\n    this.setBarcodeFormData = this.setBarcodeFormData.bind(this);\n  }\n\n  componentDidMount() {\n    //if this is a child specimen form then certain formData is set when component mounts\n    if (this.props.child) {\n      var formData = this.state.formData;\n      formData['parentSpecimen'] = this.props.specimenId;\n      formData['pscid'] = this.props.candidateId;\n      formData['visitLabel'] = this.props.sessionId;\n      formData['unitId'] = this.props.unitId;\n\n      this.setState({\n        formData: formData\n      });\n    }\n  }\n\n  render() {\n\n    //Generates new Barcode Form everytime the addBarcodeForm button is pressed\n    var barcodeListArray = Object.keys(this.state.barcodeFormList);\n    var barcodeForms = [];\n    let i = 1;\n    for (let key of barcodeListArray) {\n      barcodeForms.push(\n        <SpecimenBarcodeForm\n          key={key}\n          barcodeKey={key}\n          id={i} \n          formData={this.state.barcodeFormList[key] ? this.state.barcodeFormList[key] : null}\n          removeBarcodeForm={barcodeListArray.length !== 1 ? () => this.removeBarcodeForm(key) : null}\n          addBarcodeForm={i == barcodeListArray.length ? this.addBarcodeForm : null}\n          duplicateBarcodeForm={i == barcodeListArray.length && this.state.barcodeFormList[key] ? () => this.duplicateBarcodeForm(key) : null}\n          setParentFormData={this.setBarcodeFormData}\n          onChange={this.props.onChange}\n          specimenTypes={this.props.specimenTypes}\n          containerTypesPrimary={this.props.containerTypesPrimary}\n          containersNonPrimary={this.props.containersNonPrimary}\n          specimenTypeAttributes={this.props.specimenTypeAttributes}\n          attributeDatatypes={this.props.attributeDatatypes}\n          attributeOptions={this.props.attributeOptions}\n          capacities={this.props.capacities}\n          containerDimensions={this.props.containerDimensions}\n          containerCoordinates={this.props.containerCoordinates}\n          specimenTypeUnits={this.props.specimenTypeUnits}\n          units={this.props.units}\n        />\n      )\n      \n      i++;\n    }\n\n    let globalFields;\n    let remainingQuantityFields;\n    if (this.props.child) {\n      globalFields = (   \n        <div>\n          <StaticElement\n            label=\"Parent Specimen\"\n            text={this.props.barcode}\n          />\n          <StaticElement\n            label=\"PSCID\"\n            text={this.props.pscid}\n          />\n          <StaticElement\n            label=\"Visit Label\"\n            text={this.props.visit}\n          />\n        </div>\n      );\n\n      //It may be wise to make unit static and forced, or atleast prepopulated --\n      remainingQuantityFields = (\n        <div>\n          <TextboxElement\n            name=\"quantity\"\n            label=\"Remaining Quantity\"\n            onUserInput={this.setFormData}\n            required={true}\n            value={this.state.formData.quantity}\n          />\n          <SelectElement\n            name=\"unitId\"\n            label=\"Unit\"\n            options={this.props.specimenUnits}\n            onUserInput={this.setFormData}\n            emptyOption={false}\n            required={true}\n            value={this.state.formData.unitId}\n          />\n        </div>\n      );\n\n    } else {\n      globalFields = (\n          <div>\n            <SelectElement\n              name=\"pscid\"\n              label=\"PSCID\"\n              options={this.props.pSCIDs}\n              onUserInput={this.setFormData}\n              ref=\"pscid\"\n              required={true}\n              value={this.state.formData.pscid}\n            />\n            <SelectElement\n              name=\"visitLabel\"\n              label=\"Visit Label\"\n              options={this.state.visits}\n              onUserInput={this.setFormData}\n              ref=\"visitLabel\"\n              required={true}\n              value={this.state.formData.visitLabel}\n              disabled={this.state.formData.pscid ? false : true}\n            />\n          </div>\n      );\n    }\n\n    return (\n      <FormElement\n        name=\"specimenForm\"\n        id='specimenForm'\n        onSubmit={this.handleSubmit}\n        ref=\"form\"\n      >\n        <br/>\n        <div className='row'>\n          <div className=\"col-xs-11\">\n            {globalFields}\n            {remainingQuantityFields}\n          </div>\n        </div>\n        {barcodeForms}\n        <div className=\"col-xs-3 col-xs-offset-9\">\n          <ButtonElement label=\"Submit\"/>\n        </div>\n      </FormElement>\n    );\n  }\n\n/** *******************************************************************************\n *                      ******     Helper methods     *******\n *********************************************************************************/\n\n  /**\n   * Returns a valid name for the file to be specimened\n   *\n   * @param {string} pscid - PSCID selected from the dropdown\n   * @param {string} visitLabel - Visit label selected from the dropdown\n   * @param {string} instrument - Instrument selected from the dropdown\n   * @return {string} - Generated valid filename for the current selection\n   */\n//  getValidFileName(pscid, visitLabel, instrument) {\n//    var fileName = pscid + \"_\" + visitLabel;\n//    if (instrument) fileName += \"_\" + instrument;\n//\n//    return fileName;\n//  }\n\n\n  validateForm(formElement, value) {\n    let formErrors = this.state.formErrors;\n\n    //validate barcode regex\n    if (formElement === \"barcode\" && value !== \"\") {\n      if (!(/^hello/.test(this.state.formData.barcode))) {\n        formErrors.barcode = true;\n      } else {\n        formErrors.barcode = false;\n      }\n    }\n\n    //validate that quantity is a number and less than capacity\n    if (formElement === \"quantity\" && value !== \"\") {\n      if (isNaN(value) || (value > this.props.capacities[this.state.currentContainerType])) {\n        formErrors.quantity = true;\n      } else {\n        formErrors.quantity = false;\n      }\n    }\n\n    //validate datatypes and regex of generated type attributes\n    var specimenTypeFieldsObject = this.props.specimenTypeAttributes[this.state.currentSpecimenType];\n    var specimenTypeFields = Object.keys(specimenTypeFieldsObject).map((attribute) => {\n\n      let datatype = this.props.attributeDatatypes[specimenTypeFieldsObject[attribute]['datatypeId']].datatype;\n      if (datatype === \"number\") {\n        if (formElement === attribute) {\n          if (isNaN(value) && value !== \"\") {\n            formErrors[attribute] = true;\n          } else {\n            formErrors[attribute] = false;\n          }\n        }\n      }\n    })\n\n    this.setState({\n      formErrors: formErrors\n    });\n\n  }\n\n\n  /**\n   * Handle form submission\n   * @param {object} e - Form submission event\n   */\n  handleSubmit(e) {\n    e.preventDefault();\n\n    let formData = this.state.formData;\n    let barcodeFormList = this.state.barcodeFormList;\n    let formRefs = this.refs;\n    //let biobankFiles = this.state.Data.biobankFiles ? this.state.Data.biobankFiles : [];\n\n    // Validate the form\n    if (!this.isValidForm(formRefs, formData)) {\n      return;\n    }\n\n\n//    // Validate specimened file name\n//    let instrument = formData.instrument ? formData.instrument : null;\n//    let fileName = formData.file ? formData.file.name.replace(/\\s+/g, '_') : null;\n//    let requiredFileName = this.getValidFileName(\n//      formData.pscid, formData.visitLabel, instrument\n//    );\n//    if (!this.isValidFileName(requiredFileName, fileName)) {\n//      swal(\n//        \"Invalid Specimen name!\",\n//        \"File name should begin with: \" + requiredFileName,\n//        \"error\"\n//      );\n//      return;\n//    }\n\n    // Check for duplicate file names\n//    let isDuplicate = biobankFiles.indexOf(fileName);\n//    if (isDuplicate >= 0) {\n//      swal({\n//        title: \"Are you sure?\",\n//        text: \"A file with this name already exists!\\n Would you like to override existing file?\",\n//        type: \"warning\",\n//        showCancelButton: true,\n//        confirmButtonText: 'Yes, I am sure!',\n//        cancelButtonText: \"No, cancel it!\"\n//      }, function(isConfirm) {\n//        if (isConfirm) {\n//          this.specimenFile();\n//        } else {\n//          swal(\"Cancelled\", \"Your imaginary file is safe :)\", \"error\");\n//        }\n//      }.bind(this));\n//    } else {\n\n    this.specimenSubmit();\n//    }\n  }\n\n  /*\n   * Uploads the file to the server\n   */\n  specimenSubmit() {\n    // Set form data and specimen the biobank file\n    let formData = this.state.formData;\n    let barcodeFormList = this.state.barcodeFormList;\n    formData['barcodeFormList'] = JSON.stringify(barcodeFormList);\n    let formObj = new FormData();\n    for (let key in formData) {\n      if (formData[key] !== \"\") {\n        formObj.append(key, formData[key]);\n      }\n    }\n\n    $.ajax({\n      type: 'POST',\n      url: this.props.action,\n      data: formObj,\n      cache: false,\n      contentType: false,\n      processData: false,\n      xhr: function() {\n        let xhr = new window.XMLHttpRequest();\n        return xhr;\n      }.bind(this),\n      success: function() {\n\n        this.props.refreshParent();\n        swal(\"Specimen Submission Successful!\", \"\", \"success\");\n        this.props.onSuccess();\n      }.bind(this),\n      error: function(err) {\n        console.error(err);\n        let msg = err.responseJSON ? err.responseJSON.message : \"Specimen error!\";\n        this.setState({\n          errorMessage: msg,\n        });\n        swal(msg, \"\", \"error\");\n      }.bind(this)\n    });\n  }\n\n  /**\n   * Checks if the inputted file name is valid\n   *\n   * @param {string} requiredFileName - Required file name\n   * @param {string} fileName - Provided file name\n   * @return {boolean} - true if fileName starts with requiredFileName, false\n   *   otherwise\n   */\n//  isValidFileName(requiredFileName, fileName) {\n//    if (fileName === null || requiredFileName === null) {\n//      return false;\n//    }\n//\n//    return (fileName.indexOf(requiredFileName) === 0);\n//  }\n\n  /**\n   * Validate the form\n   *\n   * @param {object} formRefs - Object containing references to React form elements\n   * @param {object} formData - Object containing form data inputed by user\n   * @return {boolean} - true if all required fields are filled, false otherwise\n   */\n  isValidForm(formRefs, formData) {\n    var isValidForm = true;\n\n    var requiredFields = {\n      pscid: null,\n      visitLabel: null,\n    };\n\n    Object.keys(requiredFields).map(function(field) {\n      if (formData[field]) {\n        requiredFields[field] = formData[field];\n      } else if (formRefs[field]) {\n        formRefs[field].props.hasError = true;\n        isValidForm = false;\n      }\n    });\n    this.forceUpdate();\n\n    return isValidForm;\n  }\n\n  /**\n   * Set the form data based on state values of child elements/componenets\n   *\n   * @param {string} formElement - name of the selected element\n   * @param {string} value - selected value for corresponding form element\n   */\n  setFormData(formElement, value) {\n    // This lets the modal window know that there is formData\n    // and will cause a warning to be thrown of the modal window\n    // is exited/\n    this.props.onChange instanceof Function && this.props.onChange();\n  \n    if (formElement === \"pscid\" && value !== \"\") {\n      this.state.visits = this.props.sessionData[this.props.pSCIDs[value]].visits;\n    }\n\n    var formData = this.state.formData;\n    formData[formElement] = value;\n\n    this.setState({\n      formData: formData\n    });\n  }\n\n  setBarcodeFormData(barcodeFormData, barcodeKey) {\n    var formData = this.state.formData;\n    var barcodeFormList = this.state.barcodeFormList;\n    barcodeFormList[barcodeKey] = barcodeFormData;\n    formData['barcodeFormList'] = barcodeFormList;\n\n    this.setState({\n      formData: formData\n    });\n  }\n\n  addBarcodeForm() {\n    let barcodeFormList = this.state.barcodeFormList;\n    let count = this.state.countBarcodeForms;\n    \n    barcodeFormList[count+1] = {}; \n\n    this.setState({\n      barcodeFormList: barcodeFormList,\n      countBarcodeForms: count + 1\n    });\n  }\n\n  duplicateBarcodeForm(key) {\n    let count = this.state.countBarcodeForms;\n    let nextKey = count+1;\n    let barcodeFormList = this.state.barcodeFormList;\n    \n    barcodeFormList[nextKey] = JSON.parse(JSON.stringify(barcodeFormList[key])); \n    delete barcodeFormList[nextKey].barcode;\n\n    this.setState({\n      barcodeFormList: barcodeFormList,\n      countBarcodeForms: nextKey\n    });\n  }\n\n  removeBarcodeForm(key) {\n    let barcodeFormList = this.state.barcodeFormList;\n    delete barcodeFormList[key];\n\n    this.setState({\n      barcodeFormList: barcodeFormList\n    });\n  }\n}\n\nBiobankSpecimenForm.propTypes = {\n  DataURL: React.PropTypes.string.isRequired,\n  action: React.PropTypes.string.isRequired,\n  barcode: React.PropTypes.string,\n  refreshTable: React.PropTypes.func\n};\n\nexport default BiobankSpecimenForm;\n\n\n\n// WEBPACK FOOTER //\n// ./modules/biobank/jsx/specimenForm.js","import SpecimenCollectionForm from './collectionForm'\n\n/**\n * Biobank Barcode Form\n *\n * Acts a subform for BiobankSpecimenForm\n *\n * @author Henri Rabalais\n * @version 1.0.0\n *\n **/\n\nclass SpecimenBarcodeForm extends React.Component {\n  constructor(props) {\n    super(props);\n \n    this.state = {\n      formData: {},\n      formErrors: {},\n      collapsed: true\n    };\n   \n    this.setFormData = this.setFormData.bind(this);\n    this.setCollectionFormData = this.setCollectionFormData.bind(this);\n    this.setParentFormData = this.setParentFormData.bind(this);\n    this.toggleCollapse = this.toggleCollapse.bind(this);\n  }\n\n  componentDidMount() {\n\n    if (this.props.formData) {\n      let formData = this.props.formData;\n    \n      this.setState({\n        formData: formData\n      }); \n    }   \n  }\n\n  toggleCollapse() {\n    this.setState({collapsed: !this.state.collapsed});\n  }\n\n  render() {\n\n    //HR TODO: This CSS should evenutally be moved\n    let addBarcodeFormButton;\n    let duplicateBarcodeFormButton;\n    if (this.props.addBarcodeForm) {\n      addBarcodeFormButton = (\n        <button\n          type='button'\n          className='btn btn-success btn-sm'\n          onClick={this.props.addBarcodeForm}\n        >\n          <span className='glyphicon glyphicon-plus' style={{marginRight: 5}}/>\n          New\n        </button>\n      );\n    }\n\t\n    if (this.props.duplicateBarcodeForm) {\n      duplicateBarcodeFormButton = (\n        <button\n          type='button'\n          className='btn btn-success btn-sm'\n          onClick={this.props.duplicateBarcodeForm}\n        >\n          <span className='glyphicon glyphicon-duplicate'style={{marginRight: 5}}/>\n          Replicate\n        </button>\n      );\n    }\n\n\n    let removeBarcodeFormButton;\n    if (this.props.removeBarcodeForm) {\n      const glyphStyle = {\n        color: '#DDDDDD',\n        marginLeft: 10,\n        cursor: 'pointer',\n        fontSize: 15\n      }\n\n      const buttonStyle = {\n        appearance: 'non',\n        outline: 'non',\n        boxShadow: 'none',\n        borderColor: 'transparent',\n        backgroundColor: 'transparent'\n      }\n\n      removeBarcodeFormButton = (\n        <span \n          className='glyphicon glyphicon-remove' \n          onClick={this.props.removeBarcodeForm}\n          style={glyphStyle}\n        />\n      );\n    }\n\n    return (\n      <FormElement\n        name=\"biobankBarcode\"\n      >\n        <div className=\"row\">\n          <div className=\"col-xs-11\">\n            <div>   \n              <TextboxElement\n                name={\"barcode\"}\n                label={\"Barcode \" + this.props.id}\n                onUserInput={this.setFormData}\n                ref={\"barcode\"}\n                required={true}\n                value={this.state.formData[\"barcode\"]}\n              />\n            </div>\n          </div>\n          <div className='col-xs-1' style={{paddingLeft:0, marginTop:10}}>\n            <span \n              className= {this.state.collapsed ? 'glyphicon glyphicon-chevron-down' : 'glyphicon glyphicon-chevron-up'}\n              style={{cursor: 'pointer', fontSize:15, position:'relative', right:40}}\n              data-toggle=\"collapse\" \n              data-target={\"#item-\" + this.props.id}\n              onClick={this.toggleCollapse}\n            />\n            {removeBarcodeFormButton}\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"col-xs-2\"/>\n          <div className=\"col-xs-9\">\n            <div id={'item-'+this.props.id} className=\"collapse\">\n              <SpecimenCollectionForm\n                formData={this.props.formData}\n                setParentFormData={this.setCollectionFormData}\n                onChange={this.props.onChange}\n                specimenTypes={this.props.specimenTypes}\n                specimenTypeAttributes={this.props.specimenTypeAttributes}\n                attributeDatatypes={this.props.attributeDatatypes}\n                attributeOptions={this.props.attributeOptions}\n                containerTypesPrimary={this.props.containerTypesPrimary}\n                containersNonPrimary={this.props.containersNonPrimary}\n                containerDimensions={this.props.containerDimensions}\n                containerCoordinates={this.props.containerCoordinates}\n                specimenTypeUnits={this.props.specimenTypeUnits}\n                stati={this.props.stati}\n              />\n            </div>\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"col-xs-11\">\n            <div className=\"col-xs-3\"/>\n            <div className=\"col-xs-1\">\n              {addBarcodeFormButton}\n            </div>\n            <div className=\"col-xs-1\">\n              {duplicateBarcodeFormButton}\n            </div>\n          </div>\n        </div>\n      </FormElement>\n    );\n  }\n\n  /**\n   * Set the form data based on state values of child elements/componenets\n   *\n   * @param {string} formElement - name of the selected element\n   * @param {string} value - selected value for corresponding form element\n   */\n  setFormData(formElement, value) {\n    this.props.onChange instanceof Function && this.props.onChange();   \n\n    var formData = this.state.formData;\n    formData[formElement] = value;\n\n    this.setState(\n      {\n      formData: formData\n      },\n      this.setParentFormData\n    );\n  }\n\n  setCollectionFormData(collectionFormData) {\n    var formData = this.state.formData;\n    \n    for (let field in collectionFormData) {\n      formData[field] = collectionFormData[field]\n    }\n \n    this.setState(\n      {\n        formData: formData\n      },\n      this.setParentFormData\n    );\n  }\n\n  setParentFormData() {\n    this.props.setParentFormData(this.state.formData, this.props.barcodeKey);\n  }\n}\n\nSpecimenBarcodeForm.propTypes = {\n  \n  id: React.PropTypes.string,\n  specimenTypes: React.PropTypes.object.isRequired,\n  containerTypesPrimary: React.PropTypes.object.isRequired,\n  specimenTypeAttributes: React.PropTypes.object.isRequired,\n  attributeDatatypes: React.PropTypes.object.isRequired,\n  capacities: React.PropTypes.object.isRequired,\n}\n\nexport default SpecimenBarcodeForm;\n\n\n\n// WEBPACK FOOTER //\n// ./modules/biobank/jsx/barcodeForm.js","import ContainerParentForm from './containerParentForm'\n\n\n/**\n * Biobank Specimen Form\n *\n * Acts a subform for BiobankCollectionForm\n *\n * @author Henri Rabalais\n * @version 1.0.0\n *\n **/\n\nclass SpecimenCollectionForm extends React.Component {\n  constructor(props) {\n    super(props);\n    \n    this.state = {\n      formData: {data:{}},\n      currentSpecimenType: this.props.edit ? this.props.specimenType : null,\n      currentContainerType: this.props.edit ? this.props.containerType : null,\n    };\n\n    this.setFormData = this.setFormData.bind(this);\n    this.setSpecimenTypeFieldFormData = this.setSpecimenTypeFieldFormData.bind(this);\n    this.setParentFormData = this.setParentFormData.bind(this);\n    this.setContainerParentFormData = this.setContainerParentFormData.bind(this);\n    this.getSpecimenTypeFields = this.getSpecimenTypeFields.bind(this);\n    this.handleUpdate = this.handleUpdate.bind(this);\n    this.updateSpecimen = this.updateSpecimen.bind(this);\n  }\n\n  componentDidMount() {\n    let formData = this.state.formData;\n\n    if (this.props.formData) {\n      formData = this.props.formData;\n      let currentSpecimenType = this.state.currentSpecimenType;\n      \n      this.setState({\n        currentSpecimenType: formData.specimenType\n      });\n    }\n\n    if (this.props.edit) {\n      formData['specimenId']    = this.props.specimenId;\n      formData['containerId']   = this.props.containerId;\n      formData['specimenType']  = this.props.specimenType;\n      formData['containerType'] = this.props.containerType;\n      formData['quantity']      = this.props.collection.quantity;\n      formData['unitId']        = this.props.collection.unitId;\n      formData['date']          = this.props.collection.date;\n      formData['time']          = this.props.collection.time;\n      formData['comments']      = this.props.collection.comments;\n\n      var specimenTypeFieldsObject = this.props.specimenTypeAttributes[this.state.currentSpecimenType];\n      if (specimenTypeFieldsObject) {\n        var specimenTypeFields = Object.keys(specimenTypeFieldsObject).map((attribute) => {\n          formData.data[attribute] = this.props.collection.data[attribute];\n        });\n      }\n    }\n\n    this.setState({\n      formData: formData\n    });\n  }\n\n  mapFormOptions(rawObject, targetAttribute) {\n    let data = {};\n    for (let id in rawObject) {\n      data[id] = rawObject[id][targetAttribute];\n    }\n\n    return data;\n  }\n\n  render() {\n\n    // This entire parentContainerField and parentContainerCoordinateField section should go into its own\n    // re-usable component\n    var containerParentForm;\n    if (!this.props.edit) {\n      containerParentForm = (\n        <ContainerParentForm\n          setParentFormData={this.setContainerParentFormData}\n          containersNonPrimary={this.props.containersNonPrimary}\n          containerDimensions={this.props.containerDimensions}\n          containerCoordinates={this.props.containerCoordinates}\n        />\n      );\n    }\n\n    var updateButton;\n    if (this.props.edit) {\n      updateButton = (\n        <ButtonElement label=\"Update\"/>\n      );\n    }\n\n    //This block of code should potentially be moved to setFormData();\n    //Consider Refactoring...\n    var specimenTypeUnits = {};\n    if (this.state.currentSpecimenType) {\n     \n      //This modifies the selections for unit drop down based on the chosend specimen type \n      for (var id in this.props.specimenTypeUnits[this.state.currentSpecimenType]) {\n        specimenTypeUnits[id] = this.props.specimenTypeUnits[this.state.currentSpecimenType][id].unit;\n      }\n\n      var specimenTypeFieldsObject = this.props.specimenTypeAttributes[this.state.currentSpecimenType];\n      if (specimenTypeFieldsObject) {\n        var specimenTypeFields = this.getSpecimenTypeFields(specimenTypeFieldsObject);\n      }\n    }\n\n    var specimenFields;\n    if (this.state.currentSpecimenType) {\n      specimenFields = (\n        <div>\n          <SelectElement\n            name=\"containerType\"\n            label=\"Container Type\"\n            options={this.props.containerTypesPrimary}\n            onUserInput={this.setFormData}\n            ref=\"containerType\"\n            required={true}\n            value={this.state.formData.containerType}\n          />\n          <TextboxElement\n            name=\"quantity\"\n            label=\"Quantity\"\n            onUserInput={this.setFormData}\n            ref=\"quantity\"\n            required={true}\n            value={this.state.formData.quantity}\n          />\n          <SelectElement\n            name=\"unitId\"\n            label=\"Unit\"\n            options={specimenTypeUnits}\n            onUserInput={this.setFormData}\n            required={true}\n            value={this.state.formData.unitId}\n          />\n          {specimenTypeFields}\n          <DateElement\n            name=\"date\"\n            label=\"Date\"\n            minYear=\"2000\"\n            maxYear=\"2018\"\n            onUserInput={this.setFormData}\n            required={true}\n            value={this.state.formData.date}\n          />\n          <TimeElement\n            name=\"time\"\n            label=\"Time\"\n            onUserInput={this.setFormData}\n            required={true}\n            value={this.state.formData.time}\n          />\n          <TextareaElement\n            name=\"comments\"\n            label=\"Comments\"\n            onUserInput={this.setFormData}\n            ref=\"comments\"\n            value={this.state.formData.comments}\n          />\n          {containerParentForm}\n        </div>\n      );\n    }\n\n    return (\n      <FormElement\n        name=\"biobankSpecimen\"\n        onSubmit={this.handleUpdate}\n        ref=\"form\"\n      >\n        <SelectElement\n          name=\"specimenType\"\n          label=\"Specimen Type\"\n          options={this.props.specimenTypes}\n          onUserInput={this.setFormData}\n          ref=\"specimenType\"\n          required={true}\n          value={this.state.formData.specimenType}\n        />\n        {specimenFields}\n        {updateButton}\n      </FormElement>\n    );\n  }\n\n  /**\n   * Set the form data based on state values of child elements/componenets\n   *\n   * @param {string} formElement - name of the selected element\n   * @param {string} value - selected value for corresponding form element\n   */\n  setFormData(formElement, value) {\n\n    this.props.onChange instanceof Function && this.props.onChange();\n\n    let formData = this.state.formData;\n    formData[formElement] = value;\n\n    if (formElement === \"specimenType\" && value !== \"\") {\n      //This throws a warning if the specimen type is changed because of the cascading effects this \n      //would cause.\n      if (this.props.edit) {\n        swal({\n          title: \"Warning\",\n          text: \"Changing the specimen type will result in the loss of any preparation or anaylsis \"+\n            \"data for this specimen. You will also need to manually change the specimen type of any \"+\n            \"aliquots derived from this specimen. Proceed with caution.\",\n          type: \"warning\",\n          showCancelButton: true,\n          confirmButtonText: 'Cancel Change',\n          cancelButtonText: 'Proceed',\n        }, \n        function(isConfirm) {\n          if (isConfirm) {\n            this.props.toggleEdit();\n          } else {\n          }\n        }.bind(this));\n      }\n\n      //This is to eliminate the values for the specimen type fields\n      //This could potentially be improved later to retain the values\n      //for the fields that are common across specimen types\n      formData.data = {}; \n      this.setState({\n        currentSpecimenType: value\n      });\n    }\n\n    if (formElement === \"containerType\" && value !== \"\") {\n      this.setState({\n        currentContainerType: value\n      });\n    }\n\n    this.setState(\n      {\n        formData: formData\n      },\n      this.setParentFormData\n    );\n  }\n\n  setSpecimenTypeFieldFormData(formElement, value) {\n    let formData = this.state.formData;\n    formData.data[formElement] = value;\n\n    this.setState(\n      {\n        formData: formData\n      },\n      this.setParentFormData\n    );\n  \n  }\n\n  setContainerParentFormData(containerParentFormData) {\n    var formData = this.state.formData;\n\n    for (let field in containerParentFormData) {\n      formData[field] = containerParentFormData[field];\n    }\n\n    this.setState(\n      {\n        formData: formData\n      },\n      this.setParentFormData\n    );\n  }\n\n  setParentFormData() {\n    if (!this.props.edit) {\n      var formData = this.state.formData;\n      this.props.setParentFormData(formData);\n    }\n  }\n\n\n  // This generates all the form fields for a given specimen type\n  getSpecimenTypeFields(fieldsObject) {\n    var specimenTypeFields = Object.keys(fieldsObject).map((attribute) => {\n      let datatype = this.props.attributeDatatypes[fieldsObject[attribute]['datatypeId']].datatype;\n      if (datatype === \"text\" || datatype === \"number\") {\n        if (fieldsObject[attribute]['refTableId'] == null) {\n          return (\n            <TextboxElement\n              name={attribute}\n              label={fieldsObject[attribute]['name']}\n              onUserInput={this.setSpecimenTypeFieldFormData}\n              ref={attribute}\n              required={fieldsObject[attribute]['required']}\n              value={this.state.formData.data[attribute]}\n            />\n          );\n        }\n\n        // OPTIONS FOR SELECT ELEMENT WILL MOST LIKELY BE PASSED VIA AJAX CALL\n        // BUT IT CAN ALSO BE PRELOADED --\n        // ASK RIDA HOW THIS SHOULD BE DONE\n        if (fieldsObject[attribute]['refTableId'] !== null) {\n          console.log(fieldsObject[attribute]['refTableId']);\n          console.log(this.props.attributeOptions[fieldsObject[attribute]['refTableId']]);\n          return (\n            <SelectElement\n              name={attribute}\n              label={fieldsObject[attribute]['name']}\n              options={this.props.attributeOptions[fieldsObject[attribute]['refTableId']]}\n              onUserInput={this.setSpecimenTypeFieldFormData}\n              ref={attribute}\n              required={fieldsObject[attribute]['required']}\n              value={this.state.formData.data[attribute]}\n            />\n          );\n        }\n      }\n\n      if (datatype === \"datetime\") {\n        return (\n          <DateElement\n            name={attribute}\n            label={fieldsObject[attribute]['name']}\n            onUserInput={this.setSpecimenTypeFieldFormData}\n            ref={attribute}\n            required={fieldsObject[attribute]['required']}\n            value={this.state.formData.data[attribute]}\n          />\n        );\n      }\n\n      if (datatype === \"boolean\") {\n      \n      }\n    })\n\n    return specimenTypeFields;\n  }\n\n  handleUpdate(e) {\n    //more things will go here later\n    this.updateSpecimen();\n  }\n\n  updateSpecimen() {\n    let formData = this.state.formData;\n    formData['data'] = JSON.stringify(formData['data']);\n\n    let formObj = new FormData();\n    for (let key in formData) {\n      if (formData[key] !== \"\") {\n        formObj.append(key, formData[key]);\n      }\n    }\n\n    $.ajax({\n      type: 'POST',\n      url: this.props.action,\n      data: formObj,\n      cache: false,\n      contentType: false,\n      processData: false,\n      processData: false,\n      xhr: function() {\n        let xhr = new window.XMLHttpRequest();\n        return xhr;\n      }.bind(this),\n      success: function() {\n        //Update Parent Specimen Page Here\n        formData.data = JSON.parse(formData.data);\n        this.props.refreshParent();\n      }.bind(this),\n      error: function(err) {\n        console.error(err);\n        let msg = err.responseJSON ? err.responseJSON.message : \"Specimen error!\";\n        this.setState({\n          errorMessage: msg,\n        });\n        swal(msg, \"\", \"error\");\n      }.bind(this)\n    });\n  }\n}\n\nSpecimenCollectionForm.propTypes = {\n  setParentFormData: React.PropTypes.func,\n  specimenTypes: React.PropTypes.object.isRequired,\n  containerTypesPrimary: React.PropTypes.object.isRequired,\n  specimenTypeAttributes: React.PropTypes.object.isRequired,\n  attributeDatatypes: React.PropTypes.object.isRequired,\n  capacities: React.PropTypes.object.isRequired,\n}\n\nexport default SpecimenCollectionForm;\n\n\n\n\n// WEBPACK FOOTER //\n// ./modules/biobank/jsx/collectionForm.js","/**\n * Biobank Container Parent Form\n *\n * Fetches data from Loris backend and displays a form allowing\n * to specimen a biobank file attached to a specific instrument\n *\n * @author Henri Rabalais\n * @version 1.0.0\n *\n * */\n\nimport ContainerDisplay from './containerDisplay.js';\n\nclass ContainerParentForm extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      formData: {},\n      formErrors: {},\n      errorMessage: null\n    };\n\n    this.mapFormOptions = this.mapFormOptions.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.setFormData = this.setFormData.bind(this);\n  }\n\n  componentDidMount() {\n    // This is where we will pass a parentContainerId if it already exists\n    // These are simply to provide 'Defaults' to the page. I am not sure that in\n    // if they are entirely necessary.\n    if (this.props.container) {\n    let formData = this.state.formData;\n    formData['container'] = JSON.stringify(this.props.container);\n    formData['parentContainerId'] = this.props.container.parentContainerId;\n\n    this.setState({\n      formData: formData\n    });\n    }\n  }\n\n  //map options for forms\n  mapFormOptions(rawObject, targetAttribute) {\n    var data = {}; \n    for (var id in rawObject) {\n      data[id] = rawObject[id][targetAttribute];\n    }   \n\n    return data;\n  }\n\n  render() {\n\n    var parentContainerField;\n    var coordinateField;\n    var containerDisplay;\n    let containerBarcodesNonPrimary = this.mapFormOptions(this.props.containersNonPrimary, 'barcode');\n\n    parentContainerField = ( \n      <SelectElement\n        name=\"parentContainerId\"\n        label=\"Parent Container Barcode\"\n        options={containerBarcodesNonPrimary}\n        onUserInput={this.setFormData}\n        ref=\"parentContainerId\"\n        required={false}\n        value={this.state.formData.parentContainerId}\n      />  \n    );  \n\n    // THIS IS VERY POORLY DONE AND NEEDS REFACTORING\n    // this should be a 'currentParentContainerId' state\n    if (this.state.formData.parentContainerId) {\n\n      let dimensionId = this.props.containersNonPrimary[this.state.formData.parentContainerId].dimensionId;\n      \n\n      if (dimensionId) {\n        //This will eventually become unecessary\n        ///////////////////////////////////////////////////\n        let dimensions = this.props.containerDimensions[dimensionId];\n\n        // Total coordinates is determined by the product of the dimensions\n        let coordinatesTotal = 1;\n        for (let dimension in dimensions) {\n          coordinatesTotal = coordinatesTotal * dimensions[dimension];\n        }   \n\n        // Mapping of options for the SelectElement\n        let coordinates = {}; \n        for (let i = 1; i <= coordinatesTotal; i++) {\n\n          // If the coordinate is already taken, skip it.\n          // this doubling of if statements seems unnecessary\n          if (this.props.containerCoordinates[this.state.formData.parentContainerId]) {\n            if (this.props.containerCoordinates[this.state.formData.parentContainerId][i]) {\n              continue; \n            }\n          }\n\n          coordinates[i] = i;\n        }   \n\n       // coordinateField = ( \n       //   <SelectElement\n       //     name=\"coordinate\"\n       //     label=\"Coordinate\"\n       //     options={coordinates}\n       //     onUserInput={this.setFormData}\n       //     ref=\"coordinate\"\n       //     required={false}\n       //     value={this.state.formData.coordinate}\n       //   />  \n       // );  \n       ///////////////////////////////////////////////////\n\n        containerDisplay = (\n          <ContainerDisplay\n            dimensions = {this.props.containerDimensions[this.props.containersNonPrimary[this.state.formData.parentContainerId].dimensionId]}\n            coordinates = {this.props.containerCoordinates[this.state.formData.parentContainerId]}\n            containerTypes = {this.props.containerTypes}\n            containerStati = {this.props.containerStati} \n            select = {true}\n            selectedCoordinate = {this.state.formData.coordinate}\n            updateParent = {this.setFormData}\n          />\n        );\n      }\n    }   \n\n    var updateButton;\n    if (this.props.container) {\n      updateButton = (\n        <ButtonElement label=\"Update\"/>\n      );\n    }\n\n    return (\n      <FormElement\n        onSubmit={this.handleSubmit}\n      >\n        {parentContainerField}\n        {coordinateField}\n        {containerDisplay}\n        <br/>\n        {updateButton}\n      </FormElement>\n    );\n  }\n\n/** *******************************************************************************\n *                      ******     Helper methods     *******\n *********************************************************************************/\n\n  // Validation functions will go here later...\n\n  /*\n   * Uploads the file to the server\n   */\n  handleSubmit() {\n    // Set form data and specimen the biobank file\n    let formData = this.state.formData;\n    let formObj = new FormData();\n    for (let key in formData) {\n      if (formData[key] !== \"\") {\n        formObj.append(key, formData[key]);\n      }\n    }\n\n    $.ajax({\n      type: 'POST',\n      url: this.props.action,\n      data: formObj,\n      cache: false,\n      contentType: false,\n      processData: false,\n      xhr: function() {\n        let xhr = new window.XMLHttpRequest();\n        return xhr;\n      }.bind(this),\n      success: function() {\n      \n        this.props.refreshParent();\n        swal(\"Parent Container Update Successful!\", \"\", \"success\");\n        this.props.onSuccess();\n      }.bind(this),\n      error: function(err) {\n        console.error(err);\n        let msg = err.responseJSON ? err.responseJSON.message : \"Specimen error!\";\n        this.setState({\n          errorMessage: msg,\n        });\n        swal(msg, \"\", \"error\");\n      }.bind(this)\n    });\n  }\n\n  /**\n   * Set the form data based on state values of child elements/componenets\n   *\n   * @param {string} formElement - name of the selected element\n   * @param {string} value - selected value for corresponding form element\n   */\n  setFormData(formElement, value) {\n\n    var formData = this.state.formData;\n    formData[formElement] = value;\n\n    if (formElement === 'parentContainerId') {\n      formData['coordinate'] = \"\";\n    }\n\n    this.setState(\n      {\n        formData: formData\n      },\n      this.setParentFormData\n    );\n  }\n\n  setParentFormData() {\n    if (!this.props.container) {\n      var formData = this.state.formData;\n      this.props.setParentFormData(formData);\n    }\n  } \n}\n\nContainerParentForm.propTypes = {\n  DataURL: React.PropTypes.string,\n  action: React.PropTypes.string,\n  barcode: React.PropTypes.string,\n  refreshTable: React.PropTypes.func,\n  onSuccess: React.PropTypes.func\n};\n\nexport default ContainerParentForm;\n\n\n\n// WEBPACK FOOTER //\n// ./modules/biobank/jsx/containerParentForm.js","/**\n * ContainerDisplay\n *\n * @author Henri Rabalais\n * @version 1.0.0\n *\n **/\n\nclass ContainerDisplay extends React.Component {\n  constructor(props) {\n    super(props);\n \n    this.state = {\n    };\n   \n    this.redirectURL = this.redirectURL.bind(this);\n    this.drag = this.drag.bind(this);\n    this.drop = this.drop.bind(this);\n  }\n\n  componentDidMount() {\n    $('[data-toggle=\"tooltip\"]').tooltip();\n  }\n\n  componentDidUpdate() {\n    $('[data-toggle=\"tooltip\"]').tooltip();\n  }\n\n  redirectURL(e) {\n    let coordinate = e.target.id;\n    if (this.props.coordinates[coordinate]) {\n      let url;\n      if (this.props.types[this.props.children[this.props.coordinates[coordinate]].typeId].primary) {\n        url = loris.BaseURL+\"/biobank/specimen/?barcode=\"+this.props.children[this.props.coordinates[coordinate]].barcode;\n      } else {\n        url = loris.BaseURL+\"/biobank/container/?barcode=\"+this.props.children[this.props.coordinates[coordinate]].barcode;\n      }\n\n      window.location.href = url;\n    }\n  }\n\n  allowDrop(e) {\n      e.preventDefault();\n  }\n  \n  drag(e) {\n      let container = JSON.stringify(this.props.children[this.props.coordinates[e.target.id]]);\n      e.dataTransfer.setData(\"text/plain\", container);\n  }\n  \n  drop(e) {\n    e.preventDefault();\n\n    let container = e.dataTransfer.getData(\"text/plain\");\n    let newCoordinate = parseInt(e.target.id);\n    \n    this.props.updateParent(container, newCoordinate);\n  }\n\n  render() {\n  // This is eventually need to be reworked and cleaned up\n  let column = [];\n  let row = [];\n  let display;\n  var coordinate = 1;\n  if (this.props.dimensions) {\n    for (let y=0; y < this.props.dimensions.y; y++) {\n      column = [];\n      for (let x=1; x <= this.props.dimensions.x; x++) {\n        \n        let nodeWidth = (500/this.props.dimensions.x) - (500/this.props.dimensions.x * 0.08);\n        let nodeStyle = {width: nodeWidth}\n        let nodeClass = 'node';\n        let tooltipTitle = null;\n        let dataHtml = 'false';\n        let dataToggle = null;\n        let dataPlacement = null;\n        let draggable = 'false';\n        let onDragStart = null;\n        let onDragOver = this.allowDrop;\n        let onDrop = this.drop;\n        let onClick = null;\n\n        if (!this.props.select) {\n          // This double if statement doesn't sound great\n          if (this.props.coordinates) {\n            if (this.props.coordinates[coordinate]) {\n              nodeClass = 'node occupied';\n              dataHtml = 'true';\n              dataToggle = 'tooltip';\n              dataPlacement = 'top';\n              tooltipTitle = \n            '<h5>' + this.props.children[this.props.coordinates[coordinate]].barcode + '</h5>' + \n            '<h5>' + this.props.containerTypes[this.props.children[this.props.coordinates[coordinate]].typeId].label + '</h5>' + \n            '<h5>' + this.props.containerStati[this.props.children[this.props.coordinates[coordinate]].statusId].status + '</h5>';\n              draggable = 'true';\n              onDragStart = this.drag;\n              onDragOver = null;\n              onDrop = null;\n              onClick = this.redirectURL;\n            }\n          }\n        }\n      \n        if (this.props.select) {\n          if (coordinate == this.props.selectedCoordinate) {\n            nodeClass = 'node occupied';\n          }\n          else if (!this.props.coordinates) {\n            nodeClass = 'node available';\n            onClick = (e) => this.props.updateParent('coordinate', e.target.id);\n          } \n          else if (this.props.coordinates) {\n            if (!this.props.coordinates[coordinate]) {\n              nodeClass = 'node available';\n\t\t\t  onClick = (e) => this.props.updateParent('coordinate', e.target.id);\n            }\n            else if (this.props.coordinates[coordinate]){\n            // --- This is currently not working ---\n            //  dataHtml = 'true';\n            //  dataToggle = 'tooltip';\n            //  dataPlacement = 'top';\n            //  tooltipTitle = \n            //'<h5>' + this.props.children[this.props.coordinates[coordinate]].barcode + '</h5>' + \n            //'<h5>' + this.props.containerTypes[this.props.children[this.props.coordinates[coordinate]].typeId].label + '</h5>' + \n            //'<h5>' + this.props.containerStati[this.props.children[this.props.coordinates[coordinate]].statusId].status + '</h5>';\n            }\n          }\n        }\n\n        let coordinateDisplay;\n        if (true) {\n          coordinateDisplay = x + (this.props.dimensions.x * y);\n        } else if (false) {\n          coordinateDisplay = String.fromCharCode(65+y)+''+x;\n        }\n\n        column.push(\n          <div\n            id={coordinate}\n            className={nodeClass}\n            data-html={dataHtml}\n            data-toggle={dataToggle}\n            data-placement={dataPlacement}\n            data-original-title={tooltipTitle}\n            style={nodeStyle}\n            onClick={onClick}\n            draggable={draggable}\n            onDragStart={onDragStart}\n            onDragOver={onDragOver}\n            onDrop={onDrop}\n          >\n            {coordinateDisplay}\n          </div>\n        );\n\n        coordinate++;\n      }\n\n      let rowHeight = (500/this.props.dimensions.y) - (500/this.props.dimensions.y * 0.08);\n      let rowMargin = (500/this.props.dimensions.y * 0.04);\n      let rowStyle = {\n        height: rowHeight,\n      }\n      \n      row.push(\n        <div\n          className='row'\n          style={rowStyle} \n        >\n          {column}\n        </div>\n      )\n    }\n    \n    display = row;\n  }\n \n    return (\n      <div className='display'>\n        {display}\n      </div>\n    );\n  }\n}\n\nContainerDisplay.propTypes = {\n}\n\nexport default ContainerDisplay;\n\n\n\n// WEBPACK FOOTER //\n// ./modules/biobank/jsx/containerDisplay.js","/**\n * This file contains React components for Modal component.\n *\n * @author Henri Rabalais\n * @version 1.1.0\n *\n */\n\nimport Modal from './Modal';\n\n/**\n * Modal Component.\n * React wrapper for a Modal Window. Allows to dynamically toggle a Modal window.\n *\n * ================================================\n * Usage:\n *\n * =================================================\n *\n */\n\nclass FormModal extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { show: false, throwWarning: false }\n\n    this.openModal = this.openModal.bind(this);\n    this.closeModal = this.closeModal.bind(this);\n    this.confirmClose = this.confirmClose.bind(this);\n    this.setWarning = this.setWarning.bind(this);\n  }\n\n  renderChildren() {\n    return React.Children.map(this.props.children, child => {\n      return React.cloneElement(child, { onSuccess: this.closeModal, onChange: this.setWarning });\n    });\n  }\n\n  openModal() {\n    this.setState({\n      show: true\n    });\n  } \n\n  setWarning() {\n    this.setState({\n      throwWarning: true\n    });\n  }\n\n  confirmClose() {\n    if (this.state.throwWarning) {\n      swal({\n        title: \"Are You Sure?\",\n        text: \"Leaving the form will result in the loss of any information entered.\",\n        type: \"warning\",\n        showCancelButton: true,\n        confirmButtonText: 'Proceed',\n        cancelButtonText: 'Cancel',\n      },\n      function() {\n        this.closeModal();\n      }.bind(this));\n    } else {\n      this.closeModal();\n    }\n  }\n\n  closeModal() {\n    this.setState({\n      show: false,\n      throwWarning: false\n    });\n  }\n\n  render() {\n    return (\n      <Modal \n        closeModal={this.confirmClose} \n        openModal={this.openModal} \n        show={this.state.show}\n        {...this.props} \n      >\n        {this.renderChildren()}\n      </Modal>\n    );\n  }\n}\n\nFormModal.propTypes = {\n  title: React.PropTypes.string,\n  buttonClass: React.PropTypes.string,\n  buttonStyle: React.PropTypes.object,\n  buttonContent: React.PropTypes.object,\n};\nFormModal.defaultProps = {\n  buttonClass: 'btn btn-primary'\n};\n\nexport default FormModal;\n\n\n\n// WEBPACK FOOTER //\n// ./jsx/FormModal.js","/**\n * This file contains React components for Modal component.\n *\n * @author Henri Rabalais\n * @version 1.1.0\n *\n */\n\n/**\n * Modal Component.\n * React wrapper for a Modal Window. Allows to dynamically toggle a Modal window.\n *\n * ================================================\n * Usage:\n *\n * =================================================\n *\n */\nclass Modal extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n  }\n\n  render() {\n    // Black Background with Alpha Channel\n    const backdropStyle = {\n      position: 'fixed',\n      zIndex: 9998,\n      top: 0,\n      bottom: 0,\n      left: 0,\n      right: 0,\n      backgroundColor: 'rgba(0,0,0,0.3)',\n      padding: 50\n    };\n\n    // White Modal Window\n    const modalStyle = {\n      position: 'relative',\n      maxWidth: 1000,\n      maxHeight: '100%',\n      margin: '0 auto',\n      backgroundColor: '#fff',\n      borderRadius: 10,\n      overflowY: 'auto',\n      zIndex: 9999\n    };\n\n    const titleStyle = {\n      display: 'flex',\n      flexDirection: 'row',\n      alignItems: 'center',\n      background: '#093782',\n      height: '70px',\n      borderTopRightRadius: '10',\n      color: '#FFFFFF',\n      fontSize: 24,\n      padding: 20,\n    }\n\n    const glyphStyle = {\n      marginLeft: 'auto',\n      cursor: 'pointer'\n    }\n\n    const bodyStyle = {\n      padding: 15\n    }\n  \n    var button = (\n      <button\n        type='button'\n        className={this.props.buttonClass}\n        onClick={this.props.openModal}\n        style={this.props.buttonStyle}\n      >\n        {this.props.buttonContent}\n      </button>\n    );\n\n    var modal;\n    if (this.props.show) {\n      modal = (\n        <div style={backdropStyle} onClick={this.props.closeModal}>\n          <div\n            style={modalStyle}\n            onClick={e => {\n              e.stopPropagation();\n            }}\n          >\n            <div\n              style={titleStyle}\n            >\n              {this.props.title}\n              <span \n                className='glyphicon glyphicon-remove'\n                style={glyphStyle}\n                onClick={this.props.closeModal}\n              />\n            </div>\n            <div\n              style={bodyStyle}\n            >\n              {this.props.children}\n            </div>\n          </div>\n        </div>\n      );\n    }\n\n    return (\n      <div>\n        {button}\n        {modal}\n      </div>\n    );\n  }\n}\n\nModal.propTypes = {\n  title: React.PropTypes.string,\n  buttonClass: React.PropTypes.string,\n  buttonStyle: React.PropTypes.object,\n  buttonContent: React.PropTypes.object,\n  show: React.PropTypes.boolean,\n  closeModal: React.PropTypes.func,\n  openModal: React.PropTypes.func\n};\nModal.defaultProps = {\n  buttonClass: 'btn btn-primary'\n};\n\nexport default Modal;\n\n\n\n// WEBPACK FOOTER //\n// ./jsx/Modal.js","/**\n * This file contains React component for Loader\n *\n * @author Henri Rabalais\n * @version 1.0.0\n *\n */\n\n/**\n * Loader component\n */\nclass Loader extends React.Component {\n\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n\n    return (\n      <div className='loader-container'>\n        <div className=\"loader\"/>\n      </div>\n\n\n    );\n  }\n}\n\nexport default Loader;\n\n\n\n// WEBPACK FOOTER //\n// ./jsx/Loader.js","/**\n * LifeCycle\n *\n * @author Henri Rabalais\n * @version 1.0.0\n *\n **/\n\nclass LifeCycle extends React.Component {\n  constructor(props) {\n    super(props);\n \n    this.state = {\n    \n    };\n   \n  }\n\n  componentDidMount() {\n  }\n\n  mouseOver(e) {\n    //this isn't a very 'react' way of doing things, so consider revision\n      $('.collection').css(\n        {'border': '4px solid #093782',\n         'box-shadow': '0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19)'});\n  }\n\n  mouseLeave(e) {\n    //this isn't a very 'react' way of doing things, so consider revision\n      $('.collection').css({'border': '4px solid #A6D3F5', 'box-shadow': 'none'});\n  }\n\n  mouseOverPreparation(e) {\n    //this isn't a very 'react' way of doing things, so consider revision\n      $('.preparation').css({'border': '4px solid #093782', 'box-shadow': '0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19)'});\n  }\n\n  mouseLeavePreparation(e) {\n    //this isn't a very 'react' way of doing things, so consider revision\n      $('.preparation').css({'border': '4px solid #A6D3F5', 'box-shadow': 'none'});\n  }\n\n  render() {\n\n    let collectionNode;\n    let collectionTooltip;\n    if (this.props.collection || this.props.container) {\n      collectionTooltip = (\n        <div>\n          <h>Collection</h>\n          <p>Date:</p> \n        </div>\n      );\n\n      collectionNode = (\n        <div \n          onMouseEnter={(e) => this.mouseOver(e)}\n          onMouseLeave={(e) => this.mouseLeave(e)}\n          className='lifecycle-node collection'\n        >\n          <div className='letter'>\n            C\n          </div>\n        </div>\n      );\n    }\n\n    let preparationNode;\n    if (this.props.preparation) {\n      preparationNode = (\n        <div \n          onMouseEnter={this.mouseOverPreparation}\n          onMouseLeave={this.mouseLeavePreparation}\n          className='lifecycle-node preparation' \n        >\n          <div className='letter'>\n            P\n          </div>\n        </div>\n      );\n    }\n\n    let analysisNode;\n    if (this.props.analysis) {\n      analysisNode = (\n        <div className='lifecycle-node-container'>\n           <div className='lifecycle-node'/>\n           <div className='lifecycle-text'>Analysis</div>\n        </div>\n      );\n    }\n\n    let line;\n    line = (\n        <div className='lifecycle-line'/>\n    );\n\n    return (\n      <div className='lifecycle'>\n        <div className='lifecycle-graphic'>\n          {collectionNode}\n          {preparationNode ? line : null}\n          {preparationNode}\n          {analysisNode} \n        </div>\n      </div>\n    );\n  }\n\n}\n\nLifeCycle.propTypes = {\n}\n\nexport default LifeCycle;\n\n\n\n// WEBPACK FOOTER //\n// ./modules/biobank/jsx/lifeCycle.js","/* exported RBiobankSpecimen */\n\nimport SpecimenCollectionForm from './collectionForm';\nimport SpecimenPreparationForm from './preparationForm';\nimport ContainerParentForm from './containerParentForm';\nimport FormModal from 'FormModal';\nimport Panel from '../../../jsx/Panel';\nimport Loader from 'Loader';\nimport BiobankSpecimenForm from './specimenForm.js';\nimport LifeCycle from './lifeCycle.js';\n\n/**\n * Biobank Specimen\n *\n * Fetches data corresponding to a given Specimen from Loris backend and\n * displays a page allowing viewing of meta information of the specimen\n *\n * @author Henri Rabalais\n * @version 1.0.0\n *\n */\nclass BiobankSpecimen extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      Data: {},\n      isLoaded: false,\n      loadedData: 0,\n      editCollection: false,\n      editPreparation: false\n    };\n\n    this.fetchSpecimenData = this.fetchSpecimenData.bind(this);\n    this.toggleEditCollection = this.toggleEditCollection.bind(this);\n    this.toggleEditPreparation = this.toggleEditPreparation.bind(this);\n    this.mapFormOptions = this.mapFormOptions.bind(this);\n    this.updateCollection = this.updateCollection.bind(this);\n    this.updatePreparation = this.updatePreparation.bind(this);\n    //this.redirectURL = this.redirectURL.bind(this);\n  }\n\n  componentDidMount() {\n    this.fetchSpecimenData();\n  }\n\n  fetchSpecimenData() {\n    var self = this;\n    $.ajax(this.props.specimenPageDataURL, {\n      dataType: 'json',\n      success: function(data) {\n        self.setState({\n          Data: data,\n          isLoaded: true,\n        });\n      },\n      error: function(error, errorCode, errorMsg) {\n        console.error(error, errorCode, errorMsg);\n        self.setState({\n          error: 'An error occurred when loading the form!'\n        });\n      }\n    });\n  }\n\n  toggleEditCollection() {\n    let editCollection = this.state.editCollection;\n    this.setState({\n      editCollection: !editCollection\n    });\n  }\n\n  toggleEditPreparation() {\n    let editPreparation = this.state.editPreparation;\n    this.setState({\n     editPreparation: !editPreparation\n    });\n  }\n\n  updateCollection() {\n    this.fetchSpecimenData();\n    this.toggleEditCollection();\n  } \n\n  updatePreparation() {\n    this.fetchSpecimenData();\n    this.toggleEditPreparation();\n  } \n\n  //map options for forms\n  mapFormOptions(rawObject, targetAttribute) {\n    var data = {};\n    for (var id in rawObject) {\n      data[id] = rawObject[id][targetAttribute];\n    }\n\n    return data;\n  }\n\n  render() {\n    // Data loading error\n    if (this.state.error !== undefined) {\n      return (\n        <div className=\"alert alert-danger text-center\">\n          <strong>\n            {this.state.error}\n          </strong>\n        </div>\n      );\n    }\n\n    // Waiting for data to load\n    if (!this.state.isLoaded) {\n      return (\n        <Loader/>\n      );\n    }\n\n\t// Checks if parent specimen exists \n    // If exist: returns Barcode value with href\n    // If !exist: returns value 'None'\n    let parentSpecimenBarcodeValue\n    let parentSpecimenBarcode;\n\tif (this.state.Data.parentSpecimenBarcode) {\n\t  var specimenURL = loris.BaseURL+\"/biobank/specimen/?barcode=\";\n\t  parentSpecimenBarcodeValue = (\n        <a href={specimenURL+this.state.Data.parentSpecimenBarcode}>\n          {this.state.Data.parentSpecimenBarcode}\n        </a>\n\t  );\n\n      parentSpecimenBarcode = (\n       <div className='item'>\n         <div className='field'>\n         Parent Specimen\n           <div className='value'>\n             {parentSpecimenBarcodeValue ? parentSpecimenBarcodeValue : 'None'}\n           </div>\n         </div>\n       </div>\n      );\n    }\n\n    // Checks if parent container exists and returns static element with href\n    let parentContainerBarcodeValue\n    if (this.state.Data.parentContainerBarcode) {\n      var containerURL = loris.BaseURL+\"/biobank/container/?barcode=\";\n      parentContainerBarcodeValue = ( \n          <a href={containerURL+this.state.Data.parentContainerBarcode}>   \n            {this.state.Data.parentContainerBarcode}\n          </a> \n      );  \n    }\n\n    var parentContainerBarcode = ( \n      <div className=\"item\">\n        <div className='field'>\n          Parent Container\n          <div className='value'>\n            {parentContainerBarcodeValue ? parentContainerBarcodeValue : 'None'}\n          </div>\n          {(parentContainerBarcodeValue && this.state.Data.container.coordinate) ? 'Coordinate '+this.state.Data.container.coordinate : null}\n        </div>\n        <div className='action'>\n          <FormModal\n            title='Update Parent Container'\n            buttonContent={\n              <div>\n                Move\n                <span\n                  className='glyphicon glyphicon-chevron-right'\n                  style={{marginLeft: '5px'}}\n                />  \n              </div>\n            }   \n          >   \n            <ContainerParentForm\n              containersNonPrimary={this.state.Data.containersNonPrimary}\n              containerDimensions={this.state.Data.containerDimensions}\n              containerCoordinates={this.state.Data.containerCoordinates}\n              container={this.state.Data.container}\n              containerTypes={this.state.Data.containerTypes}\n              containerStati={this.state.Data.containerStati}\n              action={`${loris.BaseURL}/biobank/ajax/ContainerInfo.php?action=updateContainerParent`}\n              refreshParent={this.fetchSpecimenData}\n            />\n          </FormModal>\n        </div>\n      </div>\n    );\n\n    /**\n     * Specimen Form\n     */\n    let addAliquotButton;\n\n    if (loris.userHasPermission('biobank_write')) {\n      /**\n       * Map Options for Form Select Elements\n       */      \n      let specimenTypes = {};\n      //produces options conditionally based on the parentId of the specimen\n      for (let id in this.state.Data.specimenTypes) {\n        // if parentTypeId is equal to typeId\n        if ((this.state.Data.specimenTypes[id].parentTypeId == this.state.Data.specimen.typeId) || \n                                                    (id == this.state.Data.specimen.typeId)) {\n          specimenTypes[id] = this.state.Data.specimenTypes[id]['type'];\n        }\n      }\n\n      let specimenUnits = this.mapFormOptions(this.state.Data.specimenUnits, 'unit');\n      let containerTypesPrimary = this.mapFormOptions(this.state.Data.containerTypesPrimary, 'label');\n\n      let addAliquotButtonContent = (\n        <div className='specimen-button'>\n          <span\n            className='glyphicon glyphicon-plus'\n            style={{marginRight: '5px'}}\n          />  \n          Aliquots\n        </div>\n      );\n\n      addAliquotButton = (\n        <FormModal\n          title='Create Specimen Aliquots'\n          buttonClass='btn btn-success'\n          buttonStyle={{display:'flex', alignItems:'center'}}\n          buttonContent={addAliquotButtonContent}\n        >\n          <BiobankSpecimenForm\n            action={`${loris.BaseURL}/biobank/ajax/SpecimenInfo.php?action=submitSpecimen`}\n            child='true'\n            specimenId={this.state.Data.specimen.id}\n            barcode={this.state.Data.container.barcode}\n            candidateId={this.state.Data.specimen.candidateId}\n            sessionId={this.state.Data.specimen.sessionId} \n            pscid={this.state.Data.candidateInfo[this.state.Data.specimen.candidateId].PSCID}\n            visit={this.state.Data.sessionInfo[this.state.Data.specimen.sessionId].Visit_label}\n            unitId={this.state.Data.specimen.unitId}\n            specimenTypes={specimenTypes}\n            specimenTypeUnits={this.state.Data.specimenTypeUnits}\n            specimenUnits = {specimenUnits}\n            containerTypesPrimary={containerTypesPrimary}\n            containersNonPrimary={this.state.Data.containersNonPrimary}\n            containerDimensions={this.state.Data.containerDimensions}\n            containerCoordinates={this.state.Data.containerCoordinates}\n            specimenTypeAttributes={this.state.Data.specimenTypeAttributes}\n            attributeDatatypes={this.state.Data.attributeDatatypes}\n            refreshParent={this.fetchSpecimenData}\n          />\n        </FormModal>\n      );\n    }\n   \n\n    /** \n     * Collection Form\n     */\n\n    // Declare Variables\n    let collectionPanel;\n    let collectionPanelForm;\n    let cancelEditCollectionButton;\n\n    if (this.state.editCollection) {\n\n      //Map Options for Form Select Elements\n      let specimenTypes = {};\n      //produces options conditionally based on the parentId of the specimen\n      for (var id in this.state.Data.specimenTypes) {\n        // if specimen type has a parent type\n        if (this.state.Data.specimenTypes[this.state.Data.specimen.typeId].parentTypeId) {\n          if (this.state.Data.specimenTypes[id].parentTypeId == this.state.Data.specimenTypes[this.state.Data.specimen.typeId].parentTypeId\n             || id == this.state.Data.specimen.typeId) {\n            specimenTypes[id] = this.state.Data.specimenTypes[id]['type'];\n          }\n        // else if specimen type has no parent type\n        } else {\n          if (!this.state.Data.specimenTypes[id].parentTypeId) {\n            specimenTypes[id] = this.state.Data.specimenTypes[id]['type'];\n          }\n        }\n      }\n\n      let containerTypesPrimary = this.mapFormOptions(this.state.Data.containerTypesPrimary, 'label');\n\n      collectionPanelForm = (\n        <SpecimenCollectionForm\n          specimenId={this.state.Data.specimen.id}\n          specimenType={this.state.Data.specimen.typeId}\n          containerId={this.state.Data.container.id}\n          containerType={this.state.Data.container.typeId}\n          collection={this.state.Data.specimen.collection}\n          specimenTypes={specimenTypes}\n          specimenTypeAttributes={this.state.Data.specimenTypeAttributes}\n          attributeDatatypes={this.state.Data.attributeDatatypes}\n          containerTypesPrimary={containerTypesPrimary}\n          specimenTypeUnits={this.state.Data.specimenTypeUnits}\n          edit={true}\n          action={`${loris.BaseURL}/biobank/ajax/SpecimenInfo.php?action=updateSpecimenCollection`}\n          toggleEdit={this.toggleEditCollection}\n          refreshParent={this.updateCollection}\n        />\n      );\n\n      cancelEditCollectionButton = (\n        <a className=\"pull-right\" style={{cursor:'pointer'}} onClick={this.toggleEditCollection}>Cancel</a>\n      );\n\n    } else {\n\n      //loops through data object to produce static elements\n      if (this.state.Data.specimen.collection.data) {\n        var dataObject = this.state.Data.specimen.collection.data;\n        var specimenTypeAttributes = Object.keys(dataObject).map((key) => {\n          return (\n            <StaticElement\n              label={this.state.Data.specimenTypeAttributes[this.state.Data.specimen.typeId][key].name}\n              text={dataObject[key]}\n            />\n          );\n        })\n      }\n\n      collectionPanelForm = (\n        <FormElement>\n          <StaticElement\n            label='Quantity'\n            text={this.state.Data.specimen.collection.quantity+' '+this.state.Data.specimenUnits[this.state.Data.specimen.collection.unitId].unit}\n          />\n          <StaticElement\n            label='Location'\n            text={this.state.Data.sites[this.state.Data.specimen.collection.locationId]}\n          />\n\t      {specimenTypeAttributes}\n          <StaticElement\n            label='Date'\n            text={this.state.Data.specimen.collection.date}\n          />\n          <StaticElement\n            label='Time'\n            text={this.state.Data.specimen.collection.time}\n          />\n          <StaticElement\n            label='Comments'\n            text={this.state.Data.specimen.collection.comments}\n          />\n        </FormElement>\n      );\n    }\n\n    collectionPanel = (\n\t  <div className='panel panel-default'>\n        <div className='panel-heading'>\n          <div className='lifecycle-node collection'>\n            <div className='letter'>C</div>\n          </div>\n          <div className='title'>\n            Collection\n          </div>\n          <span \n            className={this.state.editCollection ? null : 'glyphicon glyphicon-pencil'}\n            onClick={this.state.editCollection ? null : this.toggleEditCollection}\n          />\n        </div>\n        <div className='panel-body'>\n          {collectionPanelForm}\n          {cancelEditCollectionButton}\n        </div>\n\t  </div>\n    );\n\n    /*\n     * Preparation Form\n     */\n    \n    // Preparation Panel variable declaration\n    let preparationPanel;\n    let preparationForm;\n    let specimenProtocolAttributes;\n    let cancelEditPreparationButton;\n\n    // If the form is an edit state\n    if (this.state.editPreparation) {\n      //Map Options for Form Select Elements Here\n      specimenProtocolAttributes = this.state.Data.specimenProtocolAttributes[this.state.Data.specimen.typeId];\n\n      //This remaps specimen Protocols based on the specimen Type\n      //this may need to be refactored or put into a function later\n      let specimenProtocols = {};\n      for (var id in specimenProtocolAttributes) {\n        specimenProtocols[id] = this.state.Data.specimenProtocols[id];\n      }\n\n      specimenProtocols = this.mapFormOptions(specimenProtocols, 'protocol');\n \n      preparationForm = (\n        <SpecimenPreparationForm\n          specimenId={this.state.Data.specimen.id}\n          preparation={this.state.Data.specimen.preparation ? this.state.Data.specimen.preparation : null}\n          specimenProtocols={specimenProtocols}\n          sites={this.state.Data.sites}\n          specimenProtocolAttributes={specimenProtocolAttributes}\n          attributeDatatypes={this.state.Data.attributeDatatypes}\n          insertAction={`${loris.BaseURL}/biobank/ajax/SpecimenInfo.php?action=insertSpecimenPreparation`}\n          updateAction={`${loris.BaseURL}/biobank/ajax/SpecimenInfo.php?action=updateSpecimenPreparation`}\n          refreshParent={this.updatePreparation}\n        />\n      );\n\n      cancelEditPreparationButton = (\n        <a className=\"pull-right\" style={{cursor:'pointer'}} onClick={this.toggleEditPreparation}>Cancel</a>\n      );\n    }\n\n    // If Preparation Does Exist and the form is not in an edit state\n    if (this.state.Data.specimen.preparation && !this.state.editPreparation) {\n      var dataObject = this.state.Data.specimen.preparation.data;\n      \n      if (dataObject) {\n        specimenProtocolAttributes = Object.keys(dataObject).map((key) => {\n          return (\n            <StaticElement\n              label={this.state.Data.specimenProtocolAttributes[this.state.Data.specimen.typeId][this.state.Data.specimen.preparation.protocolId][key].name}\n              text={dataObject[key]}\n            />\n          );\n        })\n      }\n\n      preparationForm = (\n        <FormElement>\n          <StaticElement\n            label='Protocol'\n            text={this.state.Data.specimenProtocols[this.state.Data.specimen.preparation.protocolId].protocol}\n          />\n          <StaticElement\n            label='Location'\n            text={this.state.Data.sites[this.state.Data.specimen.preparation.locationId]}\n          />\n          {specimenProtocolAttributes}\n          <StaticElement\n            label='Date'\n            text={this.state.Data.specimen.preparation.date}\n          />\n          <StaticElement\n            label='Time'\n            text={this.state.Data.specimen.preparation.time}\n          />\n          <StaticElement\n            label='Comments'\n            text={this.state.Data.specimen.preparation.comments}\n          />\n        </FormElement>\n      );\n    }\n\n    // If preparation does not exist and if the form is not in an edit state\n    // and a preparation protocol exists for this specimen type\n    if (this.state.Data.specimenProtocolAttributes[this.state.Data.specimen.typeId] && \n        !this.state.Data.specimen.preparation && !this.state.editPreparation) {\n      preparationPanel = (\n        <div\n          className='panel inactive'\n        >\n          <div\n            className='add-process'\n            onClick={this.toggleEditPreparation}\n          >\n            <span className='glyphicon glyphicon-plus'/>\n          </div>\n          <div>\n          ADD PREPARATION\n          </div>\n        </div>\n      );\n\n    } else if (this.state.Data.specimen.preparation || this.state.editPreparation) {\n      preparationPanel = (\n        <div className='panel panel-default'>\n          <div className='panel-heading'>\n            <div className='lifecycle-node preparation'>\n              <div className='letter'>P</div>\n            </div>\n            <div className='title'>\n              Preparation\n            </div>\n            <span \n              className={this.state.editPreparation ? null : 'glyphicon glyphicon-pencil'}\n              onClick={this.state.editPreparation ? null : this.toggleEditPreparation}\n            />\n          </div>\n          <div className='panel-body'>\n            {preparationForm}\n            {cancelEditPreparationButton}\n          </div>\n        </div>\n      );\n    }\n\n\n    /**\n     * Analysis Form\n     */\n    let analysisPanel;\n    analysisPanel = (\n\t  <div\n        className='panel inactive'\n\t  >\n        <div\n          className='add-process'\n        >\n          <span className='glyphicon glyphicon-plus'/>\n        </div>\n        <div>\n        ADD ANALYSIS\n        </div>\n      </div>\n    );\n\n    // This should eventually go into its own component \n    let globals = (\n      <div className='globals'>\n        <div className='list'>\n          <div className='item'>\n            <div className='field'>\n              Specimen Type\n              <div className='value'>\n                {this.state.Data.specimenTypes[this.state.Data.specimen.typeId].type}\n              </div>\n            </div>\n          </div>\n          <div className='item'>\n            <div className='field'>\n              Container Type\n              <div className='value'>\n                {this.state.Data.containerTypes[this.state.Data.container.typeId].label}\n              </div>\n            </div>\n          </div>\n          <div className=\"item\">\n            <div className='field'>\n              Quantity\n              <div className='value'>\n                {this.state.Data.specimen.quantity}\n                {' '+this.state.Data.specimenUnits[this.state.Data.specimen.unitId].unit}\n              </div>\n            </div>\n            <div className='action'>\n              <FormModal\n                title='Update'\n                buttonContent={\n                  <div>\n                    Update\n                    <span\n                      className='glyphicon glyphicon-chevron-right'\n                      style={{marginLeft: '5px'}}\n                    />  \n                  </div>\n                }\n              />\n            </div>\n          </div>\n          <div className=\"item\">\n            <div className='field'>\n              Temperature\n              <div className='value'>\n                {this.state.Data.container.temperature + '°C'}\n              </div>\n            </div>\n            <div className='action'>\n              <FormModal\n                title='Update'\n                buttonContent={\n                  <div>\n                    Update\n                    <span\n                      className='glyphicon glyphicon-chevron-right'\n                      style={{marginLeft: '5px'}}\n                    />  \n                  </div>\n                }\n              />\n            </div>\n          </div>\n          <div className=\"item\">\n            <div className='field'>\n              Status\n              <div className='value'>\n                {this.state.Data.containerStati[this.state.Data.container.statusId].status}\n              </div>\n            </div>\n            <div className='action'>\n              <FormModal\n                title='Update'\n                buttonContent={\n                  <div>\n                    Update\n                    <span\n                      className='glyphicon glyphicon-chevron-right'\n                      style={{marginLeft: '5px'}}\n                    />  \n                  </div>\n                }\n              />\n            </div>\n          </div>\n          <div className=\"item\">\n            <div className='field'>\n              Location\n              <div className='value'>\n                {this.state.Data.sites[this.state.Data.container.locationId]}\n              </div>\n            </div>\n            <div className='action'>\n              <FormModal\n                title='Ship'\n                buttonContent={\n                  <div>\n                    Ship\n                    <span\n                      className='glyphicon glyphicon-chevron-right'\n                      style={{marginLeft: '5px'}}\n                    />  \n                  </div>\n                }\n              />\n            </div>\n          </div>\n          {parentSpecimenBarcode}\n          {parentContainerBarcode}\n          <div className=\"item\">\n            <div className='field'>\n              PSCID\n              <div className='value'>\n                <a href={loris.BaseURL+'/'+this.state.Data.specimen.candidateId}>\n                  {this.state.Data.candidateInfo[this.state.Data.specimen.candidateId].PSCID}\n                </a>\n              </div>\n            </div>\n            <div className='field'>\n              Visit Label\n              <div className='value'>\n                <a href={loris.BaseURL+'/instrument_list/?candID='+this.state.Data.specimen.candidateId+'&sessionID='+this.state.Data.specimen.sessionId}>\n                  {this.state.Data.sessionInfo[this.state.Data.specimen.sessionId].Visit_label}\n                </a>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n\n    return (\n      <div id='specimen-page'>\n        <div className=\"specimen-header\">\n          <div className='specimen-title'>\n            <div className='barcode'>\n              Barcode\n              <div className='value'>\n                <strong>{this.state.Data.container.barcode}</strong>\n              </div>\n            </div>\n            {addAliquotButton}\n          </div>\n          <LifeCycle\n            collection={this.state.Data.specimen.collection}\n            preparation={this.state.Data.specimen.preparation}\n            analysis={this.state.Data.specimen.analysis}\n            sites={this.state.Data.sites}\n          />\n        </div>\n        <div className='summary'>\n          {globals}\n          <div className=\"processing\">\n            {collectionPanel}\n            {preparationPanel}\n            {analysisPanel}\n          </div>\n        </div>\n      </div>\n    ); \n  }\n}\n\nBiobankSpecimen.propTypes = {\n  specimenPageDataURL: React.PropTypes.string.isRequired,\n};\n\nvar RBiobankSpecimen = React.createFactory(BiobankSpecimen);\n\nwindow.BiobankSpecimen = BiobankSpecimen;\nwindow.RBiobankSpecimen = RBiobankSpecimen;\n\nexport default BiobankSpecimen;\n\n\n\n// WEBPACK FOOTER //\n// ./modules/biobank/jsx/specimen.js","\n/**\n * Biobank Specimen Form\n *\n * Acts a subform for BiobankCollectionForm\n *\n * @author Henri Rabalais\n * @version 1.0.0\n *\n **/\n\nclass SpecimenPreparationForm extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      formData: {data:{}},\n      currentProtocol: this.props.preparation ? this.props.preparation.protocolId : null,\n      formErrors: {},\n    };\n\n    this.setFormData = this.setFormData.bind(this);\n    this.setSpecimenProtocolFieldFormData = this.setSpecimenProtocolFieldFormData.bind(this);\n    this.getSpecimenProtocolFields = this.getSpecimenProtocolFields.bind(this);\n    this.handleSave = this.handleSave.bind(this);\n    this.savePreparation = this.savePreparation.bind(this);\n  }\n\n  componentDidMount() {\n    let formData = this.state.formData;\n\n    formData['specimenId'] = this.props.specimenId;\n\n    // This for autoloading data and will be used later\n    if (this.props.preparation) {\n      formData['protocolId'] = this.props.preparation.protocolId;\n      formData['locationId'] = this.props.preparation.locationId;\n      formData['date']       = this.props.preparation.date;\n      formData['time']       = this.props.preparation.time;\n      formData['comments']   = this.props.preparation.comments;\n\n      var specimenProtocolFieldsObject = this.props.specimenProtocolAttributes[this.state.currentProtocol];\n      if (specimenProtocolFieldsObject) {\n        var specimenProtocolFields = Object.keys(specimenProtocolFieldsObject).map((attribute) => {\n          formData.data[attribute] = this.props.preparation.data[attribute];\n        });\n      }\n    }\n    this.setState({\n      formData: formData\n    });\n  }\n\n  render() {\n\n    var submitButton;\n    if (!this.props.preparation) {\n      submitButton = (\n        <ButtonElement label=\"Submit\"/>\n      );\n    }\n\n    var updateButton;\n    var locationField;\n    if (this.props.preparation) {\n      updateButton = (\n        <ButtonElement label=\"Update\"/>\n      );\n\n      locationField = (\n        <SelectElement\n          name=\"locationId\"\n          label=\"Location\"\n          options={this.props.sites}\n          onUserInput={this.setFormData}\n          required={true}\n          value={this.state.formData.locationId}\n        />\n      );\n    }\n\n  let specimenProtocolFields;\n  if (this.state.currentProtocol) {\n    var specimenProtocolFieldsObject = this.props.specimenProtocolAttributes[this.state.currentProtocol];\n\n    if (specimenProtocolFieldsObject) {\n      specimenProtocolFields = this.getSpecimenProtocolFields(specimenProtocolFieldsObject);\n    }\n  }\n\n    //This will be for default fields, if there are any eventually\n    if (this.state.currentSpecimenProtocol) {\n      preparationFields = (\n        <div>\n        </div>\n      );\n    }\n\n    return (\n      <FormElement\n        name=\"specimenPreparation\"\n        onSubmit={this.handleSave}\n        ref=\"form\"\n      >\n        <SelectElement\n          name=\"protocolId\"\n          label=\"Protocol\"\n          options={this.props.specimenProtocols}\n          onUserInput={this.setFormData}\n          required={true}\n          value={this.state.formData.protocolId}\n        />\n        {locationField}\n        {specimenProtocolFields}\n        <DateElement\n          name=\"date\"\n          label=\"Date\"\n          onUserInput={this.setFormData}\n          required={true}\n          value={this.state.formData.date}\n        />\n        <TimeElement\n          name=\"time\"\n          label=\"Time\"\n          onUserInput={this.setFormData}\n          required={true}\n          value={this.state.formData.time}\n        />\n        <TextareaElement\n          name=\"comments\"\n          label=\"Comments\"\n          onUserInput={this.setFormData}\n          value={this.state.formData.comments}\n        />\n        {submitButton} \n        {updateButton}\n      </FormElement>\n    );\n  }\n\n  /**\n   * Set the form data based on state values of child elements/componenets\n   *\n   * @param {string} formElement - name of the selected element\n   * @param {string} value - selected value for corresponding form element\n   */\n  setFormData(formElement, value) {\n\n    let formData = this.state.formData;\n\n    if (formElement === \"protocolId\" && value !== \"\") {\n      //This is to eliminate the values for the specimen protocol fields\n      //This could potentially be improved later to retain the values\n      //for the fields that are common accross protocols\n      formData.data = {};\n      this.setState({\n        currentProtocol: value\n      });\n    }\n\n    formData[formElement] = value;\n\n    this.setState({\n      formData: formData\n    });\n  }\n\n  setSpecimenProtocolFieldFormData(formElement, value) {\n    let formData = this.state.formData;\n    formData.data[formElement] = value;\n  \n    this.setState({\n        formData: formData\n    });\n  }\n\n  // This generates all the form fields for a given specimen protocol\n  getSpecimenProtocolFields(fieldsObject) {\n    var specimenProtocolFields = Object.keys(fieldsObject).map((attribute) => {\n      let datatype = this.props.attributeDatatypes[fieldsObject[attribute]['datatypeId']].datatype;\n\n      if (datatype === \"text\" || datatype === \"number\") {\n        if (fieldsObject[attribute]['refTableId'] == null) {\n          return (\n            <TextboxElement\n              name={attribute}\n              label={fieldsObject[attribute]['name']}\n              onUserInput={this.setSpecimenProtocolFieldFormData}\n              ref={attribute}\n              required={fieldsObject[attribute]['required']}\n              value={this.state.formData.data[attribute]}\n              hasError={this.state.formErrors[attribute]}\n              errorMessage={\"This is a \" + datatype + \" field.\"}\n            />\n          );\n        }\n\n        if (fieldsObject[attribute]['refTableId'] !== null) {\n          return (\n            <SelectElement\n              name={attribute}\n              label={fieldsObject[attribute]['name']}\n              options=\"\"\n              onUserInput={this.setSpecimenProtocolFieldFormData}\n              ref={attribute}\n              required={fieldsObject[attribute]['required']}\n              value={this.state.formData.data[attribute]}\n            />\n          );\n        }\n      }\n\n      if (datatype === \"datetime\") {\n        return (\n          <DateElement\n            name={attribute}\n            label={fieldsObject[attribute]['name']}\n            onUserInput={this.setSpecimenProtocolFieldFormData}\n            ref={attribute}\n            required={fieldsObject[attribute]['required']}\n            value={this.state.formData.data[attribute]}\n          />\n        );\n      }\n\n      if (datatype === \"boolean\") {\n      \n      }\n    })\n\n    return specimenProtocolFields;\n  }\n\n  handleSave(e) {\n    //more things will go here later\n    if (!this.props.preparation) {\n      this.savePreparation(this.props.insertAction)\n    }\n    if (this.props.preparation) {\n      this.savePreparation(this.props.updateAction);\n    }\n  }\n\n  savePreparation(action) {\n    let formData = this.state.formData;\n    formData['data'] = JSON.stringify(formData['data']);\n\n    let formObj = new FormData();\n    for (let key in formData) {\n      if (formData[key] !== \"\") {\n        formObj.append(key, formData[key]);\n      }\n    }\n\n    $.ajax({\n      type: 'POST',\n      url: action,\n      data: formObj,\n      cache: false,\n      contentType: false,\n      processData: false,\n      xhr: function() {\n        let xhr = new window.XMLHttpRequest();\n        return xhr;\n      }.bind(this),\n      success: function() {\n        //Update Parent Specimen Page Here\n        formData.data = JSON.parse(formData.data);\n        this.props.refreshParent();\n        //swal(\"Specimen Preparation Update Successful!\", \"\", \"success\");\n        this.props.onSuccess();\n      }.bind(this),\n      error: function(err) {\n        console.error(err);\n        let msg = err.responseJSON ? err.responseJSON.message : \"Specimen error!\";\n\n        this.setState({\n          errorMessage: msg,\n        });\n        swal(msg, \"\", \"error\");\n      }.bind(this)\n    });\n  }\n}\n\nSpecimenPreparationForm.propTypes = {\n  containerTypesPrimary: React.PropTypes.object.isRequired,\n  specimenTypeAttributes: React.PropTypes.object.isRequired,\n  attributeDatatypes: React.PropTypes.object.isRequired,\n  capacities: React.PropTypes.object.isRequired,\n  units: React.PropTypes.object.isRequired,\n}\n\nexport default SpecimenPreparationForm;\n\n\n\n\n// WEBPACK FOOTER //\n// ./modules/biobank/jsx/preparationForm.js"],"sourceRoot":""}