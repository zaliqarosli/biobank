{"version":3,"sources":["webpack:///modules/biobank/js/biobankIndex.js","webpack:///webpack/bootstrap 06bca935612d95d005f6?cbe6*******","webpack:///./modules/biobank/jsx/biobankIndex.js","webpack:///./jsx/FilterForm.js","webpack:///./jsx/Panel.js","webpack:///./modules/biobank/jsx/specimenForm.js","webpack:///./modules/biobank/jsx/barcodeForm.js","webpack:///./modules/biobank/jsx/collectionForm.js","webpack:///./modules/biobank/jsx/containerParentForm.js","webpack:///./modules/biobank/jsx/containerDisplay.js","webpack:///./modules/biobank/jsx/containerForm.js","webpack:///./modules/biobank/jsx/containerBarcodeForm.js","webpack:///./jsx/Tabs.js","webpack:///./jsx/FormModal.js","webpack:///./jsx/Modal.js","webpack:///./jsx/Loader.js","webpack:///./modules/biobank/jsx/columnFormatterSpecimen.js","webpack:///./modules/biobank/jsx/columnFormatterContainer.js"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","id","loaded","call","m","c","p","_interopRequireDefault","obj","__esModule","default","_classCallCheck","instance","Constructor","TypeError","_possibleConstructorReturn","self","ReferenceError","_inherits","subClass","superClass","prototype","Object","create","constructor","value","enumerable","writable","configurable","setPrototypeOf","__proto__","_createClass","defineProperties","target","props","i","length","descriptor","defineProperty","key","protoProps","staticProps","_FilterForm","_FilterForm2","_specimenForm","_specimenForm2","_containerForm","_containerForm2","_Tabs","_FormModal","_FormModal2","_Loader","_Loader2","_columnFormatterSpecimen","_columnFormatterSpecimen2","_columnFormatterContainer","_columnFormatterContainer2","BiobankIndex","_React$Component","this","_this","getPrototypeOf","state","isLoaded","specimenFilter","containerFilter","isOpen","formOptions","loadPage","bind","fetchSpecimenData","fetchFormOptions","fetchContainerData","updateSpecimenFilter","updateContainerFilter","resetFilters","mapFormOptions","$","ajax","specimenDataURL","method","dataType","success","data","setState","specimenData","error","console","containerDataURL","containerData","formDataURL","refs","biobankFilter","clearFilter","rawObject","targetAttribute","React","createElement","addSpecimenButton","addContainerButton","loris","userHasPermission","specimenTypes","containerTypesPrimary","specimenButtonContent","className","style","marginRight","title","buttonClass","buttonStyle","marginLeft","border","buttonContent","throwWarning","containersNonPrimary","specimenTypeAttributes","attributeDatatypes","capacities","containerDimensions","containerCoordinates","specimenTypeUnits","pSCIDs","visits","sessionData","action","BaseURL","refreshParent","containerTypesNonPrimary","containerButtonContent","sites","tabList","label","Tabs","tabs","defaultTab","updateURL","TabPane","TabId","Module","name","ref","columns","formElements","form","onUpdate","filter","StaticElement","text","ButtonElement","type","onUserInput","StaticDataTable","Data","Headers","Filter","getFormattedCell","Component","biobankIndex","ReactDOM","render","document","getElementById","_Panel","_Panel2","FilterForm","getFormChildren","setFilter","onElementUpdate","queryString","QueryString","get","keys","forEach","filterKey","exactMatch","clear","formChildren","Children","children","child","isValidElement","callbackFunc","callbackName","elementName","displayName","queryFieldName","filterValue","push","cloneElement","JSON","parse","stringify","fieldName","fieldValue","set","height","FormElement","defaultProps","warn","propTypes","PropTypes","string","isRequired","object","func","Panel","collapsed","initCollapsed","panelClass","toggleCollapsed","glyphClass","pencilGlyph","edit","cursor","onClick","plusGlyph","add","removeGlyph","cancel","panelHeading","data-toggle","data-target","role","_barcodeForm","_barcodeForm2","BiobankSpecimenForm","formData","errorMessage","formErrors","barcodeFormList","1","countBarcodeForms","handleSubmit","validateForm","setFormData","specimenSubmit","addBarcodeForm","setBarcodeFormData","specimenId","candidateId","sessionId","unitId","_this2","barcodeListArray","barcodeForms","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_loop","barcodeKey","removeBarcodeForm","duplicateBarcodeForm","setParentFormData","onChange","units","_iterator","Symbol","iterator","next","done","err","return","globalFields","remainingQuantityFields","barcode","pscid","visit","TextboxElement","required","quantity","SelectElement","options","specimenUnits","emptyOption","visitLabel","disabled","onSubmit","formElement","_this3","test","isNaN","currentContainerType","specimenTypeFieldsObject","currentSpecimenType","map","attribute","datatype","e","preventDefault","formRefs","isValidForm","formObj","FormData","append","url","cache","contentType","processData","xhr","window","XMLHttpRequest","swal","onSuccess","msg","responseJSON","message","requiredFields","field","hasError","forceUpdate","Function","barcodeFormData","count","nextKey","DataURL","refreshTable","_collectionForm","_collectionForm2","SpecimenBarcodeForm","setCollectionFormData","toggleCollapse","addBarcodeFormButton","duplicateBarcodeFormButton","removeBarcodeFormButton","glyphStyle","color","fontSize","paddingLeft","marginTop","position","right","stati","collectionFormData","_defineProperty","_containerParentForm","_containerParentForm2","SpecimenCollectionForm","specimenType","containerType","setSpecimenTypeFieldFormData","setContainerParentFormData","getSpecimenTypeFields","handleUpdate","updateSpecimen","containerId","collection","date","time","comments","containerParentForm","updateButton","unit","specimenTypeFields","specimenFields","DateElement","minYear","maxYear","TimeElement","TextareaElement","showCancelButton","confirmButtonText","cancelButtonText","isConfirm","toggleEdit","containerParentFormData","fieldsObject","attribte","_$$ajax","_containerDisplay","_containerDisplay2","ContainerParentForm","container","parentContainerId","parentContainerField","coordinateField","containerDisplay","containerBarcodesNonPrimary","dimensionId","dimensions","coordinatesTotal","dimension","coordinates","containerTypes","containerStati","select","selectedCoordinate","coordinate","updateParent","ContainerDisplay","redirectURL","drag","drop","tooltip","types","typeId","primary","location","href","dataTransfer","setData","getData","newCoordinate","parseInt","column","row","display","y","x","nodeWidth","nodeStyle","width","nodeClass","tooltipTitle","dataHtml","dataToggle","dataPlacement","draggable","onDragStart","onDragOver","allowDrop","onDrop","statusId","status","coordinateDisplay","data-html","data-placement","data-original-title","rowHeight","rowStyle","_containerBarcodeForm","_containerBarcodeForm2","BiobankContainerForm","containerSubmit","site","index","ContainerBarcodeForm","hash","activeTab","substr","handleClick","getTabs","getTabPanes","tabId","onTabChange","scrollDistance","scrollTop","tab","tabClass","tabID","tabPanes","tabStyle","marginBottom","array","bool","VerticalTabs","_React$Component2","_React$Component3","apply","arguments","classList","Title","_extends","assign","source","hasOwnProperty","_Modal","_Modal2","FormModal","show","openModal","closeModal","confirmClose","setWarning","renderChildren","Modal","modal","backdropStyle","zIndex","top","bottom","left","backgroundColor","padding","modalStyle","maxWidth","maxHeight","margin","borderRadius","overflowY","titleStyle","flexDirection","alignItems","background","borderTopRightRadius","bodyStyle","button","stopPropagation","boolean","Loader","formatColumn","cell","rowData","rowHeaders","header","classes","join","specimenURL","containerURL"],"mappings":"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","file":"./modules/biobank/js/biobankIndex.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _FilterForm = __webpack_require__(1);\n\t\n\tvar _FilterForm2 = _interopRequireDefault(_FilterForm);\n\t\n\tvar _specimenForm = __webpack_require__(3);\n\t\n\tvar _specimenForm2 = _interopRequireDefault(_specimenForm);\n\t\n\tvar _containerForm = __webpack_require__(8);\n\t\n\tvar _containerForm2 = _interopRequireDefault(_containerForm);\n\t\n\tvar _Tabs = __webpack_require__(10);\n\t\n\tvar _FormModal = __webpack_require__(11);\n\t\n\tvar _FormModal2 = _interopRequireDefault(_FormModal);\n\t\n\tvar _Loader = __webpack_require__(13);\n\t\n\tvar _Loader2 = _interopRequireDefault(_Loader);\n\t\n\tvar _columnFormatterSpecimen = __webpack_require__(14);\n\t\n\tvar _columnFormatterSpecimen2 = _interopRequireDefault(_columnFormatterSpecimen);\n\t\n\tvar _columnFormatterContainer = __webpack_require__(15);\n\t\n\tvar _columnFormatterContainer2 = _interopRequireDefault(_columnFormatterContainer);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\tvar BiobankIndex = function (_React$Component) {\n\t  _inherits(BiobankIndex, _React$Component);\n\t\n\t  function BiobankIndex(props) {\n\t    _classCallCheck(this, BiobankIndex);\n\t\n\t    var _this = _possibleConstructorReturn(this, (BiobankIndex.__proto__ || Object.getPrototypeOf(BiobankIndex)).call(this, props));\n\t\n\t    _this.state = {\n\t      isLoaded: false,\n\t      specimenFilter: {},\n\t      containerFilter: {},\n\t      isOpen: false,\n\t      formOptions: {}\n\t    };\n\t\n\t    // Bind component instance to custom methods\n\t    _this.loadPage = _this.loadPage.bind(_this);\n\t    _this.fetchSpecimenData = _this.fetchSpecimenData.bind(_this);\n\t    _this.fetchFormOptions = _this.fetchFormOptions.bind(_this);\n\t    _this.fetchContainerData = _this.fetchContainerData.bind(_this);\n\t    _this.updateSpecimenFilter = _this.updateSpecimenFilter.bind(_this);\n\t    _this.updateContainerFilter = _this.updateContainerFilter.bind(_this);\n\t    _this.resetFilters = _this.resetFilters.bind(_this);\n\t    _this.mapFormOptions = _this.mapFormOptions.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(BiobankIndex, [{\n\t    key: 'componentDidMount',\n\t    value: function componentDidMount() {\n\t      this.loadPage();\n\t    }\n\t  }, {\n\t    key: 'loadPage',\n\t    value: function loadPage() {\n\t      this.fetchSpecimenData();\n\t      this.fetchFormOptions();\n\t      this.fetchContainerData();\n\t    }\n\t    /**\n\t     * Retrieve data from the provided URL and save it in state\n\t     * Additionaly add hiddenHeaders to global loris variable\n\t     * for easy access by columnFormatter.\n\t     */\n\t\n\t  }, {\n\t    key: 'fetchSpecimenData',\n\t    value: function fetchSpecimenData() {\n\t      $.ajax(this.props.specimenDataURL, {\n\t        method: \"GET\",\n\t        dataType: 'json',\n\t        success: function (data) {\n\t          this.setState({\n\t            specimenData: data,\n\t            isLoaded: true\n\t          });\n\t        }.bind(this),\n\t        error: function error(_error) {\n\t          console.error(_error);\n\t        }\n\t      });\n\t    }\n\t  }, {\n\t    key: 'fetchContainerData',\n\t    value: function fetchContainerData() {\n\t      $.ajax(this.props.containerDataURL, {\n\t        method: \"GET\",\n\t        dataType: 'json',\n\t        success: function (data) {\n\t          this.setState({\n\t            containerData: data,\n\t            isLoaded: true\n\t          });\n\t        }.bind(this),\n\t        error: function error(_error2) {\n\t          console.error(_error2);\n\t        }\n\t      });\n\t    }\n\t  }, {\n\t    key: 'fetchFormOptions',\n\t    value: function fetchFormOptions() {\n\t      $.ajax(this.props.formDataURL, {\n\t        method: \"GET\",\n\t        dataType: 'json',\n\t        success: function (data) {\n\t          this.setState({\n\t            formOptions: data,\n\t            isLoaded: true\n\t          });\n\t        }.bind(this),\n\t        error: function error(_error3) {\n\t          console.error(_error3);\n\t        }\n\t      });\n\t    }\n\t  }, {\n\t    key: 'updateSpecimenFilter',\n\t    value: function updateSpecimenFilter(specimenFilter) {\n\t      this.setState({ specimenFilter: specimenFilter });\n\t    }\n\t\n\t    // This works,\n\t    // but there must be a way to do this with just one updateFilter function\n\t\n\t  }, {\n\t    key: 'updateContainerFilter',\n\t    value: function updateContainerFilter(containerFilter) {\n\t      this.setState({ containerFilter: containerFilter });\n\t    }\n\t  }, {\n\t    key: 'resetFilters',\n\t    value: function resetFilters() {\n\t      this.refs.biobankFilter.clearFilter();\n\t    }\n\t\n\t    //map options for forms\n\t\n\t  }, {\n\t    key: 'mapFormOptions',\n\t    value: function mapFormOptions(rawObject, targetAttribute) {\n\t      var data = {};\n\t      for (var id in rawObject) {\n\t        data[id] = rawObject[id][targetAttribute];\n\t      }\n\t\n\t      return data;\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t      // Waiting for async data to load\n\t      if (!this.state.isLoaded) {\n\t        return React.createElement(_Loader2.default, null);\n\t      }\n\t\n\t      var addSpecimenButton = void 0;\n\t      var addContainerButton = void 0;\n\t      if (loris.userHasPermission('biobank_write')) {\n\t\n\t        /**\n\t         * Map Options for Form Select Elements of Specimen Form\n\t         */\n\t        var specimenTypes = this.mapFormOptions(this.state.formOptions.specimenTypes, 'type');\n\t        var containerTypesPrimary = this.mapFormOptions(this.state.formOptions.containerTypesPrimary, 'label');\n\t\n\t        var specimenButtonContent = React.createElement(\n\t          'div',\n\t          null,\n\t          React.createElement('span', {\n\t            className: 'glyphicon glyphicon-plus',\n\t            style: { marginRight: '5px' }\n\t          }),\n\t          'Add Specimen'\n\t        );\n\t\n\t        addSpecimenButton = React.createElement(\n\t          _FormModal2.default,\n\t          {\n\t            title: 'Add New Specimen',\n\t            buttonClass: 'btn btn-success',\n\t            buttonStyle: { marginLeft: '10px', border: 'none' },\n\t            buttonContent: specimenButtonContent,\n\t            throwWarning: true\n\t          },\n\t          React.createElement(_specimenForm2.default, {\n\t            specimenTypes: specimenTypes,\n\t            containerTypesPrimary: containerTypesPrimary,\n\t            containersNonPrimary: this.state.formOptions.containersNonPrimary,\n\t            specimenTypeAttributes: this.state.formOptions.specimenTypeAttributes,\n\t            attributeDatatypes: this.state.formOptions.attributeDatatypes,\n\t            capacities: this.state.formOptions.capacities,\n\t            containerDimensions: this.state.formOptions.containerDimensions,\n\t            containerCoordinates: this.state.formOptions.containerCoordinates,\n\t            specimenTypeUnits: this.state.formOptions.specimenTypeUnits,\n\t            pSCIDs: this.state.formOptions.pSCIDs,\n\t            visits: this.state.formOptions.visits,\n\t            sessionData: this.state.formOptions.sessionData,\n\t            action: loris.BaseURL + '/biobank/ajax/SpecimenInfo.php?action=submitSpecimen',\n\t            refreshParent: this.loadPage\n\t          })\n\t        );\n\t\n\t        var containerTypesNonPrimary = this.mapFormOptions(this.state.formOptions.containerTypesNonPrimary, 'label');\n\t\n\t        var containerButtonContent = React.createElement(\n\t          'div',\n\t          null,\n\t          React.createElement('span', {\n\t            className: 'glyphicon glyphicon-plus',\n\t            style: { marginRight: '5px' }\n\t          }),\n\t          'Add Container'\n\t        );\n\t\n\t        addContainerButton = React.createElement(\n\t          _FormModal2.default,\n\t          {\n\t            title: 'Add New Container',\n\t            buttonClass: 'btn btn-success',\n\t            buttonStyle: { marginLeft: '10px', border: 'none' },\n\t            buttonContent: containerButtonContent\n\t          },\n\t          React.createElement(_containerForm2.default, {\n\t            containerTypesNonPrimary: containerTypesNonPrimary,\n\t            sites: this.state.formOptions.sites,\n\t            action: loris.BaseURL + '/biobank/ajax/ContainerInfo.php?action=submitContainer',\n\t            refreshParent: this.loadPage\n\t          })\n\t        );\n\t      }\n\t\n\t      //Look at CCNA code from Zaliqa to modify this to be more streamline\n\t      var tabList = [{ id: \"specimens\", label: \"Specimens\" }, { id: \"containers\", label: \"Containers\" }];\n\t\n\t      return React.createElement(\n\t        'div',\n\t        { id: 'biobank-page' },\n\t        React.createElement(\n\t          _Tabs.Tabs,\n\t          { tabs: tabList, defaultTab: 'specimens', updateURL: true },\n\t          React.createElement(\n\t            _Tabs.TabPane,\n\t            { TabId: tabList[0].id },\n\t            React.createElement(\n\t              _FilterForm2.default,\n\t              {\n\t                Module: 'biobank',\n\t                name: 'specimen_filter',\n\t                id: 'specimen_filter',\n\t                ref: 'specimenFilter',\n\t                columns: 3,\n\t                formElements: this.state.specimenData.form,\n\t                onUpdate: this.updateSpecimenFilter,\n\t                filter: this.state.specimenFilter\n\t              },\n\t              React.createElement('br', null),\n\t              React.createElement(StaticElement, { text: addSpecimenButton }),\n\t              React.createElement(StaticElement, null),\n\t              React.createElement(ButtonElement, { label: 'Clear Filters', type: 'reset', onUserInput: this.resetFilters })\n\t            ),\n\t            React.createElement(StaticDataTable, {\n\t              Data: this.state.specimenData.Data,\n\t              Headers: this.state.specimenData.Headers,\n\t              Filter: this.state.specimenFilter,\n\t              getFormattedCell: _columnFormatterSpecimen2.default\n\t            })\n\t          ),\n\t          React.createElement(\n\t            _Tabs.TabPane,\n\t            { TabId: tabList[1].id },\n\t            React.createElement(\n\t              _FilterForm2.default,\n\t              {\n\t                Module: 'biobank',\n\t                name: 'container_filter',\n\t                id: 'container_filter',\n\t                ref: 'containerFilter',\n\t                columns: 3,\n\t                formElements: this.state.containerData.form,\n\t                onUpdate: this.updateContainerFilter,\n\t                filter: this.state.containerFilter\n\t              },\n\t              React.createElement('br', null),\n\t              React.createElement(StaticElement, { text: addContainerButton }),\n\t              React.createElement(StaticElement, null),\n\t              React.createElement(ButtonElement, { label: 'Clear Filters', type: 'reset', onUserInput: this.resetFilters })\n\t            ),\n\t            React.createElement(StaticDataTable, {\n\t              Data: this.state.containerData.Data,\n\t              Headers: this.state.containerData.Headers,\n\t              Filter: this.state.containerFilter,\n\t              getFormattedCell: _columnFormatterContainer2.default\n\t            })\n\t          )\n\t        )\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return BiobankIndex;\n\t}(React.Component);\n\t\n\t$(function () {\n\t  var biobankIndex = React.createElement(\n\t    'div',\n\t    { className: 'page-biobank' },\n\t    React.createElement(BiobankIndex, {\n\t      specimenDataURL: loris.BaseURL + '/biobank/?format=json',\n\t      containerDataURL: loris.BaseURL + '/biobank/ajax/ContainerInfo.php?action=getContainerFilterData',\n\t      formDataURL: loris.BaseURL + '/biobank/ajax/SpecimenInfo.php?action=getFormOptions'\n\t    })\n\t  );\n\t\n\t  ReactDOM.render(biobankIndex, document.getElementById(\"lorisworkspace\"));\n\t});\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _Panel = __webpack_require__(2);\n\t\n\tvar _Panel2 = _interopRequireDefault(_Panel);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * This file contains React component for FilterForm\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author Loris Team\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @version 1.1.0\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */\n\t\n\t/**\n\t * FilterForm component.\n\t * A wrapper for form elements inside a selection filter.\n\t *\n\t * Adds necessary filter callbacks to all children and passes them to FormElement\n\t * for proper rendering.\n\t *\n\t * Keeps track of filter object and sends it to parent on every update.\n\t *\n\t * //HACK/NOTE: Loris has special behaviour for `candID` attribute in the query string,\n\t * making it impossible to use it for selection filters. This components renames\n\t * all `candID` fields to `candidateID` automatically before appending them to URL.\n\t *\n\t */\n\tvar FilterForm = function (_React$Component) {\n\t  _inherits(FilterForm, _React$Component);\n\t\n\t  function FilterForm(props) {\n\t    _classCallCheck(this, FilterForm);\n\t\n\t    // Bind component instance to custom methods\n\t    var _this = _possibleConstructorReturn(this, (FilterForm.__proto__ || Object.getPrototypeOf(FilterForm)).call(this, props));\n\t\n\t    _this.clearFilter = _this.clearFilter.bind(_this);\n\t    _this.getFormChildren = _this.getFormChildren.bind(_this);\n\t    _this.setFilter = _this.setFilter.bind(_this);\n\t    _this.onElementUpdate = _this.onElementUpdate.bind(_this);\n\t\n\t    // Keeps track of querystring values\n\t    // Saved as class variable instead of keeping in state\n\t    _this.queryString = QueryString.get();\n\t    return _this;\n\t  }\n\t\n\t  _createClass(FilterForm, [{\n\t    key: 'componentDidMount',\n\t    value: function componentDidMount() {\n\t      var filter = {};\n\t      var queryString = this.queryString;\n\t\n\t      // Initiaze filter using querystring value\n\t      Object.keys(queryString).forEach(function (key) {\n\t        var filterKey = key === 'candidateID' ? 'candID' : key;\n\t        filter[filterKey] = {\n\t          value: queryString[key],\n\t          exactMatch: false\n\t        };\n\t      });\n\t\n\t      // Update parent component\n\t      this.props.onUpdate(filter);\n\t    }\n\t\n\t    /**\n\t     * Clear the filter object, querystring and input fields\n\t     */\n\t\n\t  }, {\n\t    key: 'clearFilter',\n\t    value: function clearFilter() {\n\t      this.queryString = QueryString.clear(this.props.Module);\n\t      this.props.onUpdate({});\n\t    }\n\t\n\t    /**\n\t     * Itterates through FilterForm children, sets necessary callback functions\n\t     * and initializes filterTable\n\t     *\n\t     * @return {Array} formChildren - array of children with necessary props\n\t     */\n\t\n\t  }, {\n\t    key: 'getFormChildren',\n\t    value: function getFormChildren() {\n\t      var formChildren = [];\n\t      React.Children.forEach(this.props.children, function (child, key) {\n\t        // If child is a React component (i.e not a simple DOM element)\n\t        if (React.isValidElement(child) && typeof child.type === \"function\" && child.props.onUserInput) {\n\t          var callbackFunc = child.props.onUserInput;\n\t          var callbackName = callbackFunc.name;\n\t          var elementName = child.type.displayName;\n\t          var queryFieldName = child.props.name === 'candID' ? 'candidateID' : child.props.name;\n\t          var filterValue = this.queryString[queryFieldName];\n\t          // If callback function was not set, set it to onElementUpdate() for form\n\t          // elements and to clearFilter() for <ButtonElement type='reset'/>.\n\t          if (callbackName === \"onUserInput\") {\n\t            if (elementName === \"ButtonElement\" && child.props.type === \"reset\") {\n\t              callbackFunc = this.clearFilter;\n\t            } else {\n\t              callbackFunc = this.onElementUpdate.bind(null, elementName);\n\t            }\n\t          }\n\t          // Pass onUserInput and value props to all children\n\t          formChildren.push(React.cloneElement(child, {\n\t            onUserInput: callbackFunc,\n\t            value: filterValue ? filterValue : '',\n\t            key: key\n\t          }));\n\t          // Initialize filter for StaticDataTable\n\t          this.setFilter(elementName, child.props.name, filterValue);\n\t        } else {\n\t          formChildren.push(React.cloneElement(child, { key: key }));\n\t        }\n\t      }.bind(this));\n\t\n\t      return formChildren;\n\t    }\n\t\n\t    /**\n\t     * Appends entry to filter object or deletes it if value is\n\t     * empty.\n\t     *\n\t     * Sets exactMatch to true for all SelectElements (i.e dropdowns)\n\t     * in order to force StaticDataTable to do exact comparaison\n\t     *\n\t     * @param {string} type - form element type (i.e component name)\n\t     * @param {string} key - the name of the form element\n\t     * @param {string} value - the value of the form element\n\t     *\n\t     * @return {{}} filter - filterData\n\t     */\n\t\n\t  }, {\n\t    key: 'setFilter',\n\t    value: function setFilter(type, key, value) {\n\t      var filter = {};\n\t      if (this.props.filter) {\n\t        filter = JSON.parse(JSON.stringify(this.props.filter));\n\t      }\n\t\n\t      if (key && value) {\n\t        filter[key] = {};\n\t        filter[key].value = value;\n\t        filter[key].exactMatch = type === \"SelectElement\";\n\t      } else if (filter && key && value === '') {\n\t        delete filter[key];\n\t      }\n\t\n\t      return filter;\n\t    }\n\t\n\t    /**\n\t     * Sets filter object and querystring to reflect values of input fields\n\t     *\n\t     * @param {string} type - form element type (i.e component name)\n\t     * @param {string} fieldName - the name of the form element\n\t     * @param {string} fieldValue - the value of the form element\n\t     */\n\t\n\t  }, {\n\t    key: 'onElementUpdate',\n\t    value: function onElementUpdate(type, fieldName, fieldValue) {\n\t      // Make sure both key/value are string before sending them to querystring\n\t      if (typeof fieldName !== \"string\" || typeof fieldValue !== \"string\") {\n\t        return;\n\t      }\n\t\n\t      // Update query string\n\t      var queryFieldName = fieldName === 'candID' ? 'candidateID' : fieldName;\n\t      this.queryString = QueryString.set(this.queryString, queryFieldName, fieldValue);\n\t\n\t      // Update filter and get new filter object\n\t      var filter = this.setFilter(type, fieldName, fieldValue);\n\t      this.props.onUpdate(filter);\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t      // Get formatted children\n\t      var formChildren = this.getFormChildren();\n\t      var formElements = this.props.formElements;\n\t\n\t      if (formElements) {\n\t        Object.keys(formElements).forEach(function (fieldName) {\n\t          var queryFieldName = fieldName === 'candID' ? 'candidateID' : fieldName;\n\t          formElements[fieldName].onUserInput = this.onElementUpdate.bind(null, fieldName);\n\t          formElements[fieldName].value = this.queryString[queryFieldName];\n\t        }.bind(this));\n\t      }\n\t\n\t      return React.createElement(\n\t        _Panel2.default,\n\t        {\n\t          id: this.props.id,\n\t          height: this.props.height,\n\t          title: this.props.title\n\t        },\n\t        React.createElement(\n\t          FormElement,\n\t          this.props,\n\t          formChildren\n\t        )\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return FilterForm;\n\t}(React.Component);\n\t\n\tFilterForm.defaultProps = {\n\t  id: 'selection-filter',\n\t  height: '100%',\n\t  title: 'Selection Filter',\n\t  onUpdate: function onUpdate() {\n\t    console.warn('onUpdate() callback is not set!');\n\t  }\n\t};\n\tFilterForm.propTypes = {\n\t  Module: React.PropTypes.string.isRequired,\n\t  filter: React.PropTypes.object.isRequired,\n\t  id: React.PropTypes.string,\n\t  height: React.PropTypes.string,\n\t  title: React.PropTypes.string,\n\t  onUpdate: React.PropTypes.func\n\t};\n\t\n\texports.default = FilterForm;\n\n/***/ },\n/* 2 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * This file contains React component for Panel\n\t *\n\t * @author Alex I.\n\t * @version 1.0.0\n\t *\n\t */\n\t\n\t/**\n\t * Panel component\n\t * Wraps children in a collapsible bootstrap panel\n\t */\n\tvar Panel = function (_React$Component) {\n\t  _inherits(Panel, _React$Component);\n\t\n\t  function Panel(props) {\n\t    _classCallCheck(this, Panel);\n\t\n\t    var _this = _possibleConstructorReturn(this, (Panel.__proto__ || Object.getPrototypeOf(Panel)).call(this, props));\n\t\n\t    _this.state = {\n\t      collapsed: _this.props.initCollapsed\n\t    };\n\t\n\t    // Initialize panel class based on collapsed status\n\t    _this.panelClass = _this.props.initCollapsed ? \"panel-collapse collapse\" : \"panel-collapse collapse in\";\n\t\n\t    _this.toggleCollapsed = _this.toggleCollapsed.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(Panel, [{\n\t    key: \"toggleCollapsed\",\n\t    value: function toggleCollapsed() {\n\t      this.setState({ collapsed: !this.state.collapsed });\n\t    }\n\t  }, {\n\t    key: \"render\",\n\t    value: function render() {\n\t      // Change arrow direction based on collapse status\n\t      var glyphClass = this.state.collapsed ? \"glyphicon pull-right glyphicon-chevron-down\" : \"glyphicon pull-right glyphicon-chevron-up\";\n\t\n\t      var pencilGlyph = void 0;\n\t      if (this.props.edit) {\n\t        pencilGlyph = React.createElement(\"span\", {\n\t          className: \"glyphicon pull-right glyphicon-pencil\",\n\t          style: { marginRight: '10px', cursor: 'pointer' },\n\t          onClick: this.props.edit\n\t        });\n\t      }\n\t\n\t      var plusGlyph = void 0;\n\t      if (this.props.add) {\n\t        plusGlyph = React.createElement(\"span\", {\n\t          className: \"glyphicon pull-right glyphicon-plus\",\n\t          style: { marginRight: '10px', cursor: 'pointer' },\n\t          onClick: this.props.add\n\t        });\n\t      }\n\t\n\t      var removeGlyph = void 0;\n\t      if (this.props.cancel) {\n\t        removeGlyph = React.createElement(\"span\", {\n\t          className: \"glyphicon pull-right glyphicon-remove\",\n\t          style: { marginRight: '10px', cursor: 'pointer' },\n\t          onClick: this.props.cancel\n\t        });\n\t      }\n\t\n\t      // Add panel header, if title is set\n\t      var panelHeading = this.props.title ? React.createElement(\n\t        \"div\",\n\t        {\n\t          className: \"panel-heading\"\n\t        },\n\t        React.createElement(\"span\", {\n\t          className: glyphClass,\n\t          onClick: this.toggleCollapsed,\n\t          \"data-toggle\": \"collapse\",\n\t          \"data-target\": '#' + this.props.id,\n\t          style: { cursor: 'pointer' }\n\t        }),\n\t        pencilGlyph,\n\t        plusGlyph,\n\t        removeGlyph,\n\t        this.props.title\n\t      ) : '';\n\t\n\t      return React.createElement(\n\t        \"div\",\n\t        { className: \"panel panel-primary\" },\n\t        panelHeading,\n\t        React.createElement(\n\t          \"div\",\n\t          { id: this.props.id, className: this.panelClass, role: \"tabpanel\" },\n\t          React.createElement(\n\t            \"div\",\n\t            { className: \"panel-body\", style: { height: this.props.height } },\n\t            this.props.children\n\t          )\n\t        )\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return Panel;\n\t}(React.Component);\n\t\n\tPanel.propTypes = {\n\t  id: React.PropTypes.string,\n\t  height: React.PropTypes.string,\n\t  title: React.PropTypes.string,\n\t  edit: React.PropTypes.func,\n\t  add: React.PropTypes.func\n\t};\n\tPanel.defaultProps = {\n\t  initCollapsed: false,\n\t  id: 'default-panel',\n\t  height: '100%'\n\t};\n\t\n\texports.default = Panel;\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _barcodeForm = __webpack_require__(4);\n\t\n\tvar _barcodeForm2 = _interopRequireDefault(_barcodeForm);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * Biobank Collection Form\n\t *\n\t * Fetches data from Loris backend and displays a form allowing\n\t * to specimen a biobank file attached to a specific instrument\n\t *\n\t * @author Henri Rabalais\n\t * @version 1.0.0\n\t *\n\t * */\n\tvar BiobankSpecimenForm = function (_React$Component) {\n\t  _inherits(BiobankSpecimenForm, _React$Component);\n\t\n\t  function BiobankSpecimenForm(props) {\n\t    _classCallCheck(this, BiobankSpecimenForm);\n\t\n\t    var _this = _possibleConstructorReturn(this, (BiobankSpecimenForm.__proto__ || Object.getPrototypeOf(BiobankSpecimenForm)).call(this, props));\n\t\n\t    _this.state = {\n\t      formData: {},\n\t      errorMessage: null,\n\t      formErrors: {},\n\t      barcodeFormList: { 1: {} },\n\t      countBarcodeForms: 1\n\t    };\n\t\n\t    _this.handleSubmit = _this.handleSubmit.bind(_this);\n\t    _this.validateForm = _this.validateForm.bind(_this);\n\t    _this.setFormData = _this.setFormData.bind(_this);\n\t    _this.specimenSubmit = _this.specimenSubmit.bind(_this);\n\t    _this.addBarcodeForm = _this.addBarcodeForm.bind(_this);\n\t    _this.setBarcodeFormData = _this.setBarcodeFormData.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(BiobankSpecimenForm, [{\n\t    key: 'componentDidMount',\n\t    value: function componentDidMount() {\n\t      //if this is a child specimen form then certain formData is set when component mounts\n\t      if (this.props.child) {\n\t        var formData = this.state.formData;\n\t        formData['parentSpecimen'] = this.props.specimenId;\n\t        formData['pscid'] = this.props.candidateId;\n\t        formData['visitLabel'] = this.props.sessionId;\n\t        formData['unitId'] = this.props.unitId;\n\t\n\t        this.setState({\n\t          formData: formData\n\t        });\n\t      }\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t      var _this2 = this;\n\t\n\t      //Generates new Barcode Form everytime the addBarcodeForm button is pressed\n\t      var barcodeListArray = Object.keys(this.state.barcodeFormList);\n\t      var barcodeForms = [];\n\t      var i = 1;\n\t      var _iteratorNormalCompletion = true;\n\t      var _didIteratorError = false;\n\t      var _iteratorError = undefined;\n\t\n\t      try {\n\t        var _loop = function _loop() {\n\t          var key = _step.value;\n\t\n\t          barcodeForms.push(React.createElement(_barcodeForm2.default, {\n\t            key: key,\n\t            barcodeKey: key,\n\t            id: i,\n\t            formData: _this2.state.barcodeFormList[key] ? _this2.state.barcodeFormList[key] : null,\n\t            removeBarcodeForm: barcodeListArray.length !== 1 ? function () {\n\t              return _this2.removeBarcodeForm(key);\n\t            } : null,\n\t            addBarcodeForm: i == barcodeListArray.length ? _this2.addBarcodeForm : null,\n\t            duplicateBarcodeForm: i == barcodeListArray.length && _this2.state.barcodeFormList[key] ? function () {\n\t              return _this2.duplicateBarcodeForm(key);\n\t            } : null,\n\t            setParentFormData: _this2.setBarcodeFormData,\n\t            onChange: _this2.props.onChange,\n\t            specimenTypes: _this2.props.specimenTypes,\n\t            containerTypesPrimary: _this2.props.containerTypesPrimary,\n\t            containersNonPrimary: _this2.props.containersNonPrimary,\n\t            specimenTypeAttributes: _this2.props.specimenTypeAttributes,\n\t            attributeDatatypes: _this2.props.attributeDatatypes,\n\t            capacities: _this2.props.capacities,\n\t            containerDimensions: _this2.props.containerDimensions,\n\t            containerCoordinates: _this2.props.containerCoordinates,\n\t            specimenTypeUnits: _this2.props.specimenTypeUnits,\n\t            units: _this2.props.units\n\t          }));\n\t\n\t          i++;\n\t        };\n\t\n\t        for (var _iterator = barcodeListArray[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n\t          _loop();\n\t        }\n\t      } catch (err) {\n\t        _didIteratorError = true;\n\t        _iteratorError = err;\n\t      } finally {\n\t        try {\n\t          if (!_iteratorNormalCompletion && _iterator.return) {\n\t            _iterator.return();\n\t          }\n\t        } finally {\n\t          if (_didIteratorError) {\n\t            throw _iteratorError;\n\t          }\n\t        }\n\t      }\n\t\n\t      var globalFields = void 0;\n\t      var remainingQuantityFields = void 0;\n\t      if (this.props.child) {\n\t        globalFields = React.createElement(\n\t          'div',\n\t          null,\n\t          React.createElement(StaticElement, {\n\t            label: 'Parent Specimen',\n\t            text: this.props.barcode\n\t          }),\n\t          React.createElement(StaticElement, {\n\t            label: 'PSCID',\n\t            text: this.props.pscid\n\t          }),\n\t          React.createElement(StaticElement, {\n\t            label: 'Visit Label',\n\t            text: this.props.visit\n\t          })\n\t        );\n\t\n\t        //It may be wise to make unit static and forced, or atleast prepopulated --\n\t        remainingQuantityFields = React.createElement(\n\t          'div',\n\t          null,\n\t          React.createElement(TextboxElement, {\n\t            name: 'quantity',\n\t            label: 'Remaining Quantity',\n\t            onUserInput: this.setFormData,\n\t            required: true,\n\t            value: this.state.formData.quantity\n\t          }),\n\t          React.createElement(SelectElement, {\n\t            name: 'unitId',\n\t            label: 'Unit',\n\t            options: this.props.specimenUnits,\n\t            onUserInput: this.setFormData,\n\t            emptyOption: false,\n\t            required: true,\n\t            value: this.state.formData.unitId\n\t          })\n\t        );\n\t      } else {\n\t        globalFields = React.createElement(\n\t          'div',\n\t          null,\n\t          React.createElement(SelectElement, {\n\t            name: 'pscid',\n\t            label: 'PSCID',\n\t            options: this.props.pSCIDs,\n\t            onUserInput: this.setFormData,\n\t            ref: 'pscid',\n\t            required: true,\n\t            value: this.state.formData.pscid\n\t          }),\n\t          React.createElement(SelectElement, {\n\t            name: 'visitLabel',\n\t            label: 'Visit Label',\n\t            options: this.state.visits,\n\t            onUserInput: this.setFormData,\n\t            ref: 'visitLabel',\n\t            required: true,\n\t            value: this.state.formData.visitLabel,\n\t            disabled: this.state.formData.pscid ? false : true\n\t          })\n\t        );\n\t      }\n\t\n\t      return React.createElement(\n\t        FormElement,\n\t        {\n\t          name: 'specimenForm',\n\t          id: 'specimenForm',\n\t          onSubmit: this.handleSubmit,\n\t          ref: 'form'\n\t        },\n\t        React.createElement('br', null),\n\t        React.createElement(\n\t          'div',\n\t          { className: 'row' },\n\t          React.createElement(\n\t            'div',\n\t            { className: 'col-xs-11' },\n\t            globalFields,\n\t            remainingQuantityFields\n\t          )\n\t        ),\n\t        barcodeForms,\n\t        React.createElement(\n\t          'div',\n\t          { className: 'col-xs-3 col-xs-offset-9' },\n\t          React.createElement(ButtonElement, { label: 'Submit' })\n\t        )\n\t      );\n\t    }\n\t\n\t    /** *******************************************************************************\n\t     *                      ******     Helper methods     *******\n\t     *********************************************************************************/\n\t\n\t    /**\n\t     * Returns a valid name for the file to be specimened\n\t     *\n\t     * @param {string} pscid - PSCID selected from the dropdown\n\t     * @param {string} visitLabel - Visit label selected from the dropdown\n\t     * @param {string} instrument - Instrument selected from the dropdown\n\t     * @return {string} - Generated valid filename for the current selection\n\t     */\n\t    //  getValidFileName(pscid, visitLabel, instrument) {\n\t    //    var fileName = pscid + \"_\" + visitLabel;\n\t    //    if (instrument) fileName += \"_\" + instrument;\n\t    //\n\t    //    return fileName;\n\t    //  }\n\t\n\t\n\t  }, {\n\t    key: 'validateForm',\n\t    value: function validateForm(formElement, value) {\n\t      var _this3 = this;\n\t\n\t      var formErrors = this.state.formErrors;\n\t\n\t      //validate barcode regex\n\t      if (formElement === \"barcode\" && value !== \"\") {\n\t        if (!/^hello/.test(this.state.formData.barcode)) {\n\t          formErrors.barcode = true;\n\t        } else {\n\t          formErrors.barcode = false;\n\t        }\n\t      }\n\t\n\t      //validate that quantity is a number and less than capacity\n\t      if (formElement === \"quantity\" && value !== \"\") {\n\t        if (isNaN(value) || value > this.props.capacities[this.state.currentContainerType]) {\n\t          formErrors.quantity = true;\n\t        } else {\n\t          formErrors.quantity = false;\n\t        }\n\t      }\n\t\n\t      //validate datatypes and regex of generated type attributes\n\t      var specimenTypeFieldsObject = this.props.specimenTypeAttributes[this.state.currentSpecimenType];\n\t      var specimenTypeFields = Object.keys(specimenTypeFieldsObject).map(function (attribute) {\n\t\n\t        var datatype = _this3.props.attributeDatatypes[specimenTypeFieldsObject[attribute]['datatypeId']].datatype;\n\t        if (datatype === \"number\") {\n\t          if (formElement === attribute) {\n\t            if (isNaN(value) && value !== \"\") {\n\t              formErrors[attribute] = true;\n\t            } else {\n\t              formErrors[attribute] = false;\n\t            }\n\t          }\n\t        }\n\t      });\n\t\n\t      this.setState({\n\t        formErrors: formErrors\n\t      });\n\t    }\n\t\n\t    /**\n\t     * Handle form submission\n\t     * @param {object} e - Form submission event\n\t     */\n\t\n\t  }, {\n\t    key: 'handleSubmit',\n\t    value: function handleSubmit(e) {\n\t      e.preventDefault();\n\t\n\t      var formData = this.state.formData;\n\t      var barcodeFormList = this.state.barcodeFormList;\n\t      var formRefs = this.refs;\n\t      //let biobankFiles = this.state.Data.biobankFiles ? this.state.Data.biobankFiles : [];\n\t\n\t      // Validate the form\n\t      if (!this.isValidForm(formRefs, formData)) {\n\t        return;\n\t      }\n\t\n\t      //    // Validate specimened file name\n\t      //    let instrument = formData.instrument ? formData.instrument : null;\n\t      //    let fileName = formData.file ? formData.file.name.replace(/\\s+/g, '_') : null;\n\t      //    let requiredFileName = this.getValidFileName(\n\t      //      formData.pscid, formData.visitLabel, instrument\n\t      //    );\n\t      //    if (!this.isValidFileName(requiredFileName, fileName)) {\n\t      //      swal(\n\t      //        \"Invalid Specimen name!\",\n\t      //        \"File name should begin with: \" + requiredFileName,\n\t      //        \"error\"\n\t      //      );\n\t      //      return;\n\t      //    }\n\t\n\t      // Check for duplicate file names\n\t      //    let isDuplicate = biobankFiles.indexOf(fileName);\n\t      //    if (isDuplicate >= 0) {\n\t      //      swal({\n\t      //        title: \"Are you sure?\",\n\t      //        text: \"A file with this name already exists!\\n Would you like to override existing file?\",\n\t      //        type: \"warning\",\n\t      //        showCancelButton: true,\n\t      //        confirmButtonText: 'Yes, I am sure!',\n\t      //        cancelButtonText: \"No, cancel it!\"\n\t      //      }, function(isConfirm) {\n\t      //        if (isConfirm) {\n\t      //          this.specimenFile();\n\t      //        } else {\n\t      //          swal(\"Cancelled\", \"Your imaginary file is safe :)\", \"error\");\n\t      //        }\n\t      //      }.bind(this));\n\t      //    } else {\n\t\n\t      this.specimenSubmit();\n\t      //    }\n\t    }\n\t\n\t    /*\n\t     * Uploads the file to the server\n\t     */\n\t\n\t  }, {\n\t    key: 'specimenSubmit',\n\t    value: function specimenSubmit() {\n\t      // Set form data and specimen the biobank file\n\t      var formData = this.state.formData;\n\t      var barcodeFormList = this.state.barcodeFormList;\n\t      formData['barcodeFormList'] = JSON.stringify(barcodeFormList);\n\t      var formObj = new FormData();\n\t      for (var _key in formData) {\n\t        if (formData[_key] !== \"\") {\n\t          formObj.append(_key, formData[_key]);\n\t        }\n\t      }\n\t\n\t      $.ajax({\n\t        type: 'POST',\n\t        url: this.props.action,\n\t        data: formObj,\n\t        cache: false,\n\t        contentType: false,\n\t        processData: false,\n\t        xhr: function () {\n\t          var xhr = new window.XMLHttpRequest();\n\t          return xhr;\n\t        }.bind(this),\n\t        success: function () {\n\t\n\t          this.props.refreshParent();\n\t          swal(\"Specimen Submission Successful!\", \"\", \"success\");\n\t          this.props.onSuccess();\n\t        }.bind(this),\n\t        error: function (err) {\n\t          console.error(err);\n\t          var msg = err.responseJSON ? err.responseJSON.message : \"Specimen error!\";\n\t          this.setState({\n\t            errorMessage: msg\n\t          });\n\t          swal(msg, \"\", \"error\");\n\t        }.bind(this)\n\t      });\n\t    }\n\t\n\t    /**\n\t     * Checks if the inputted file name is valid\n\t     *\n\t     * @param {string} requiredFileName - Required file name\n\t     * @param {string} fileName - Provided file name\n\t     * @return {boolean} - true if fileName starts with requiredFileName, false\n\t     *   otherwise\n\t     */\n\t    //  isValidFileName(requiredFileName, fileName) {\n\t    //    if (fileName === null || requiredFileName === null) {\n\t    //      return false;\n\t    //    }\n\t    //\n\t    //    return (fileName.indexOf(requiredFileName) === 0);\n\t    //  }\n\t\n\t    /**\n\t     * Validate the form\n\t     *\n\t     * @param {object} formRefs - Object containing references to React form elements\n\t     * @param {object} formData - Object containing form data inputed by user\n\t     * @return {boolean} - true if all required fields are filled, false otherwise\n\t     */\n\t\n\t  }, {\n\t    key: 'isValidForm',\n\t    value: function isValidForm(formRefs, formData) {\n\t      var isValidForm = true;\n\t\n\t      var requiredFields = {\n\t        pscid: null,\n\t        visitLabel: null\n\t      };\n\t\n\t      Object.keys(requiredFields).map(function (field) {\n\t        if (formData[field]) {\n\t          requiredFields[field] = formData[field];\n\t        } else if (formRefs[field]) {\n\t          formRefs[field].props.hasError = true;\n\t          isValidForm = false;\n\t        }\n\t      });\n\t      this.forceUpdate();\n\t\n\t      return isValidForm;\n\t    }\n\t\n\t    /**\n\t     * Set the form data based on state values of child elements/componenets\n\t     *\n\t     * @param {string} formElement - name of the selected element\n\t     * @param {string} value - selected value for corresponding form element\n\t     */\n\t\n\t  }, {\n\t    key: 'setFormData',\n\t    value: function setFormData(formElement, value) {\n\t      // This lets the modal window know that there is formData\n\t      // and will cause a warning to be thrown of the modal window\n\t      // is exited/\n\t      this.props.onChange instanceof Function && this.props.onChange();\n\t\n\t      if (formElement === \"pscid\" && value !== \"\") {\n\t        this.state.visits = this.props.sessionData[this.props.pSCIDs[value]].visits;\n\t      }\n\t\n\t      var formData = this.state.formData;\n\t      formData[formElement] = value;\n\t\n\t      this.setState({\n\t        formData: formData\n\t      });\n\t    }\n\t  }, {\n\t    key: 'setBarcodeFormData',\n\t    value: function setBarcodeFormData(barcodeFormData, barcodeKey) {\n\t      var formData = this.state.formData;\n\t      var barcodeFormList = this.state.barcodeFormList;\n\t      barcodeFormList[barcodeKey] = barcodeFormData;\n\t      formData['barcodeFormList'] = barcodeFormList;\n\t\n\t      this.setState({\n\t        formData: formData\n\t      });\n\t    }\n\t  }, {\n\t    key: 'addBarcodeForm',\n\t    value: function addBarcodeForm() {\n\t      var barcodeFormList = this.state.barcodeFormList;\n\t      var count = this.state.countBarcodeForms;\n\t\n\t      barcodeFormList[count + 1] = {};\n\t\n\t      this.setState({\n\t        barcodeFormList: barcodeFormList,\n\t        countBarcodeForms: count + 1\n\t      });\n\t    }\n\t  }, {\n\t    key: 'duplicateBarcodeForm',\n\t    value: function duplicateBarcodeForm(key) {\n\t      var count = this.state.countBarcodeForms;\n\t      var nextKey = count + 1;\n\t      var barcodeFormList = this.state.barcodeFormList;\n\t\n\t      barcodeFormList[nextKey] = JSON.parse(JSON.stringify(barcodeFormList[key]));\n\t      delete barcodeFormList[nextKey].barcode;\n\t\n\t      this.setState({\n\t        barcodeFormList: barcodeFormList,\n\t        countBarcodeForms: nextKey\n\t      });\n\t    }\n\t  }, {\n\t    key: 'removeBarcodeForm',\n\t    value: function removeBarcodeForm(key) {\n\t      var barcodeFormList = this.state.barcodeFormList;\n\t      delete barcodeFormList[key];\n\t\n\t      this.setState({\n\t        barcodeFormList: barcodeFormList\n\t      });\n\t    }\n\t  }]);\n\t\n\t  return BiobankSpecimenForm;\n\t}(React.Component);\n\t\n\tBiobankSpecimenForm.propTypes = {\n\t  DataURL: React.PropTypes.string.isRequired,\n\t  action: React.PropTypes.string.isRequired,\n\t  barcode: React.PropTypes.string,\n\t  refreshTable: React.PropTypes.func\n\t};\n\t\n\texports.default = BiobankSpecimenForm;\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _collectionForm = __webpack_require__(5);\n\t\n\tvar _collectionForm2 = _interopRequireDefault(_collectionForm);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * Biobank Barcode Form\n\t *\n\t * Acts a subform for BiobankSpecimenForm\n\t *\n\t * @author Henri Rabalais\n\t * @version 1.0.0\n\t *\n\t **/\n\t\n\tvar SpecimenBarcodeForm = function (_React$Component) {\n\t  _inherits(SpecimenBarcodeForm, _React$Component);\n\t\n\t  function SpecimenBarcodeForm(props) {\n\t    _classCallCheck(this, SpecimenBarcodeForm);\n\t\n\t    var _this = _possibleConstructorReturn(this, (SpecimenBarcodeForm.__proto__ || Object.getPrototypeOf(SpecimenBarcodeForm)).call(this, props));\n\t\n\t    _this.state = {\n\t      formData: {},\n\t      formErrors: {},\n\t      collapsed: true\n\t    };\n\t\n\t    _this.setFormData = _this.setFormData.bind(_this);\n\t    _this.setCollectionFormData = _this.setCollectionFormData.bind(_this);\n\t    _this.setParentFormData = _this.setParentFormData.bind(_this);\n\t    _this.toggleCollapse = _this.toggleCollapse.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(SpecimenBarcodeForm, [{\n\t    key: 'componentDidMount',\n\t    value: function componentDidMount() {\n\t\n\t      if (this.props.formData) {\n\t        var formData = this.props.formData;\n\t\n\t        this.setState({\n\t          formData: formData\n\t        });\n\t      }\n\t    }\n\t  }, {\n\t    key: 'toggleCollapse',\n\t    value: function toggleCollapse() {\n\t      this.setState({ collapsed: !this.state.collapsed });\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t\n\t      //HR TODO: This CSS should evenutally be moved\n\t      var addBarcodeFormButton = void 0;\n\t      var duplicateBarcodeFormButton = void 0;\n\t      if (this.props.addBarcodeForm) {\n\t        addBarcodeFormButton = React.createElement(\n\t          'button',\n\t          {\n\t            type: 'button',\n\t            className: 'btn btn-success btn-sm',\n\t            onClick: this.props.addBarcodeForm\n\t          },\n\t          React.createElement('span', { className: 'glyphicon glyphicon-plus', style: { marginRight: 5 } }),\n\t          'New'\n\t        );\n\t      }\n\t\n\t      if (this.props.duplicateBarcodeForm) {\n\t        duplicateBarcodeFormButton = React.createElement(\n\t          'button',\n\t          {\n\t            type: 'button',\n\t            className: 'btn btn-success btn-sm',\n\t            onClick: this.props.duplicateBarcodeForm\n\t          },\n\t          React.createElement('span', { className: 'glyphicon glyphicon-duplicate', style: { marginRight: 5 } }),\n\t          'Previous'\n\t        );\n\t      }\n\t\n\t      var removeBarcodeFormButton = void 0;\n\t      if (this.props.removeBarcodeForm) {\n\t        var glyphStyle = {\n\t          color: '#DDDDDD',\n\t          marginLeft: 10,\n\t          cursor: 'pointer',\n\t          fontSize: 15\n\t        };\n\t\n\t        var buttonStyle = {\n\t          appearance: 'non',\n\t          outline: 'non',\n\t          boxShadow: 'none',\n\t          borderColor: 'transparent',\n\t          backgroundColor: 'transparent'\n\t        };\n\t\n\t        removeBarcodeFormButton = React.createElement('span', {\n\t          className: 'glyphicon glyphicon-remove',\n\t          onClick: this.props.removeBarcodeForm,\n\t          style: glyphStyle\n\t        });\n\t      }\n\t\n\t      return React.createElement(\n\t        FormElement,\n\t        {\n\t          name: 'biobankBarcode'\n\t        },\n\t        React.createElement(\n\t          'div',\n\t          { className: 'row' },\n\t          React.createElement(\n\t            'div',\n\t            { className: 'col-xs-11' },\n\t            React.createElement(\n\t              'div',\n\t              null,\n\t              React.createElement(TextboxElement, {\n\t                name: \"barcode\",\n\t                label: \"Barcode \" + this.props.id,\n\t                onUserInput: this.setFormData,\n\t                ref: \"barcode\",\n\t                required: true,\n\t                value: this.state.formData[\"barcode\"]\n\t              })\n\t            )\n\t          ),\n\t          React.createElement(\n\t            'div',\n\t            { className: 'col-xs-1', style: { paddingLeft: 0, marginTop: 10 } },\n\t            React.createElement('span', {\n\t              className: this.state.collapsed ? 'glyphicon glyphicon-chevron-down' : 'glyphicon glyphicon-chevron-up',\n\t              style: { cursor: 'pointer', fontSize: 15, position: 'relative', right: 40 },\n\t              'data-toggle': 'collapse',\n\t              'data-target': \"#\" + this.props.id,\n\t              onClick: this.toggleCollapse\n\t            }),\n\t            removeBarcodeFormButton\n\t          )\n\t        ),\n\t        React.createElement(\n\t          'div',\n\t          { className: 'row' },\n\t          React.createElement('div', { className: 'col-xs-2' }),\n\t          React.createElement(\n\t            'div',\n\t            { className: 'col-xs-9' },\n\t            React.createElement(\n\t              'div',\n\t              { id: this.props.id, className: 'collapse' },\n\t              React.createElement(_collectionForm2.default, {\n\t                formData: this.props.formData,\n\t                setParentFormData: this.setCollectionFormData,\n\t                onChange: this.props.onChange,\n\t                specimenTypes: this.props.specimenTypes,\n\t                specimenTypeAttributes: this.props.specimenTypeAttributes,\n\t                attributeDatatypes: this.props.attributeDatatypes,\n\t                containerTypesPrimary: this.props.containerTypesPrimary,\n\t                containersNonPrimary: this.props.containersNonPrimary,\n\t                containerDimensions: this.props.containerDimensions,\n\t                containerCoordinates: this.props.containerCoordinates,\n\t                specimenTypeUnits: this.props.specimenTypeUnits,\n\t                stati: this.props.stati\n\t              })\n\t            )\n\t          )\n\t        ),\n\t        React.createElement(\n\t          'div',\n\t          { className: 'row' },\n\t          React.createElement(\n\t            'div',\n\t            { className: 'col-xs-11' },\n\t            React.createElement('div', { className: 'col-xs-3' }),\n\t            React.createElement(\n\t              'div',\n\t              { className: 'col-xs-1' },\n\t              addBarcodeFormButton\n\t            ),\n\t            React.createElement(\n\t              'div',\n\t              { className: 'col-xs-1' },\n\t              duplicateBarcodeFormButton\n\t            )\n\t          )\n\t        )\n\t      );\n\t    }\n\t\n\t    /**\n\t     * Set the form data based on state values of child elements/componenets\n\t     *\n\t     * @param {string} formElement - name of the selected element\n\t     * @param {string} value - selected value for corresponding form element\n\t     */\n\t\n\t  }, {\n\t    key: 'setFormData',\n\t    value: function setFormData(formElement, value) {\n\t      this.props.onChange instanceof Function && this.props.onChange();\n\t\n\t      var formData = this.state.formData;\n\t      formData[formElement] = value;\n\t\n\t      this.setState({\n\t        formData: formData\n\t      }, this.setParentFormData);\n\t    }\n\t  }, {\n\t    key: 'setCollectionFormData',\n\t    value: function setCollectionFormData(collectionFormData) {\n\t      var formData = this.state.formData;\n\t\n\t      for (var field in collectionFormData) {\n\t        formData[field] = collectionFormData[field];\n\t      }\n\t\n\t      this.setState({\n\t        formData: formData\n\t      }, this.setParentFormData);\n\t    }\n\t  }, {\n\t    key: 'setParentFormData',\n\t    value: function setParentFormData() {\n\t      this.props.setParentFormData(this.state.formData, this.props.barcodeKey);\n\t    }\n\t  }]);\n\t\n\t  return SpecimenBarcodeForm;\n\t}(React.Component);\n\t\n\tSpecimenBarcodeForm.propTypes = {\n\t\n\t  id: React.PropTypes.string,\n\t  specimenTypes: React.PropTypes.object.isRequired,\n\t  containerTypesPrimary: React.PropTypes.object.isRequired,\n\t  specimenTypeAttributes: React.PropTypes.object.isRequired,\n\t  attributeDatatypes: React.PropTypes.object.isRequired,\n\t  capacities: React.PropTypes.object.isRequired\n\t};\n\t\n\texports.default = SpecimenBarcodeForm;\n\n/***/ },\n/* 5 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _containerParentForm = __webpack_require__(6);\n\t\n\tvar _containerParentForm2 = _interopRequireDefault(_containerParentForm);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * Biobank Specimen Form\n\t *\n\t * Acts a subform for BiobankCollectionForm\n\t *\n\t * @author Henri Rabalais\n\t * @version 1.0.0\n\t *\n\t **/\n\t\n\tvar SpecimenCollectionForm = function (_React$Component) {\n\t  _inherits(SpecimenCollectionForm, _React$Component);\n\t\n\t  function SpecimenCollectionForm(props) {\n\t    _classCallCheck(this, SpecimenCollectionForm);\n\t\n\t    var _this = _possibleConstructorReturn(this, (SpecimenCollectionForm.__proto__ || Object.getPrototypeOf(SpecimenCollectionForm)).call(this, props));\n\t\n\t    _this.state = {\n\t      formData: { data: {} },\n\t      currentSpecimenType: _this.props.edit ? _this.props.specimenType : null,\n\t      currentContainerType: _this.props.edit ? _this.props.containerType : null\n\t    };\n\t\n\t    _this.setFormData = _this.setFormData.bind(_this);\n\t    _this.setSpecimenTypeFieldFormData = _this.setSpecimenTypeFieldFormData.bind(_this);\n\t    _this.setParentFormData = _this.setParentFormData.bind(_this);\n\t    _this.setContainerParentFormData = _this.setContainerParentFormData.bind(_this);\n\t    _this.getSpecimenTypeFields = _this.getSpecimenTypeFields.bind(_this);\n\t    _this.handleUpdate = _this.handleUpdate.bind(_this);\n\t    _this.updateSpecimen = _this.updateSpecimen.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(SpecimenCollectionForm, [{\n\t    key: 'componentDidMount',\n\t    value: function componentDidMount() {\n\t      var _this2 = this;\n\t\n\t      var formData = this.state.formData;\n\t\n\t      if (this.props.formData) {\n\t        formData = this.props.formData;\n\t        var currentSpecimenType = this.state.currentSpecimenType;\n\t\n\t        this.setState({\n\t          currentSpecimenType: formData.specimenType\n\t        });\n\t      }\n\t\n\t      if (this.props.edit) {\n\t        formData['specimenId'] = this.props.specimenId;\n\t        formData['containerId'] = this.props.containerId;\n\t        formData['specimenType'] = this.props.specimenType;\n\t        formData['containerType'] = this.props.containerType;\n\t        formData['quantity'] = this.props.collection.quantity;\n\t        formData['unitId'] = this.props.collection.unitId;\n\t        formData['date'] = this.props.collection.date;\n\t        formData['time'] = this.props.collection.time;\n\t        formData['comments'] = this.props.collection.comments;\n\t\n\t        var specimenTypeFieldsObject = this.props.specimenTypeAttributes[this.state.currentSpecimenType];\n\t        if (specimenTypeFieldsObject) {\n\t          var specimenTypeFields = Object.keys(specimenTypeFieldsObject).map(function (attribute) {\n\t            formData.data[attribute] = _this2.props.collection.data[attribute];\n\t          });\n\t        }\n\t      }\n\t\n\t      this.setState({\n\t        formData: formData\n\t      });\n\t    }\n\t  }, {\n\t    key: 'mapFormOptions',\n\t    value: function mapFormOptions(rawObject, targetAttribute) {\n\t      var data = {};\n\t      for (var id in rawObject) {\n\t        data[id] = rawObject[id][targetAttribute];\n\t      }\n\t\n\t      return data;\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t\n\t      // This entire parentContainerField and parentContainerCoordinateField section should go into its own\n\t      // re-usable component\n\t      var containerParentForm;\n\t      if (!this.props.edit) {\n\t        containerParentForm = React.createElement(_containerParentForm2.default, {\n\t          setParentFormData: this.setContainerParentFormData,\n\t          containersNonPrimary: this.props.containersNonPrimary,\n\t          containerDimensions: this.props.containerDimensions,\n\t          containerCoordinates: this.props.containerCoordinates\n\t        });\n\t      }\n\t\n\t      var updateButton;\n\t      if (this.props.edit) {\n\t        updateButton = React.createElement(ButtonElement, { label: 'Update' });\n\t      }\n\t\n\t      //This block of code should potentially be moved to setFormData();\n\t      //Consider Refactoring...\n\t      var specimenTypeUnits = {};\n\t      if (this.state.currentSpecimenType) {\n\t\n\t        //This modifies the selections for unit drop down based on the chosend specimen type \n\t        for (var id in this.props.specimenTypeUnits[this.state.currentSpecimenType]) {\n\t          specimenTypeUnits[id] = this.props.specimenTypeUnits[this.state.currentSpecimenType][id].unit;\n\t        }\n\t\n\t        var specimenTypeFieldsObject = this.props.specimenTypeAttributes[this.state.currentSpecimenType];\n\t        if (specimenTypeFieldsObject) {\n\t          var specimenTypeFields = this.getSpecimenTypeFields(specimenTypeFieldsObject);\n\t        }\n\t      }\n\t\n\t      var specimenFields;\n\t      if (this.state.currentSpecimenType) {\n\t        specimenFields = React.createElement(\n\t          'div',\n\t          null,\n\t          React.createElement(SelectElement, {\n\t            name: 'containerType',\n\t            label: 'Container Type',\n\t            options: this.props.containerTypesPrimary,\n\t            onUserInput: this.setFormData,\n\t            ref: 'containerType',\n\t            required: true,\n\t            value: this.state.formData.containerType\n\t          }),\n\t          containerParentForm,\n\t          React.createElement(TextboxElement, {\n\t            name: 'quantity',\n\t            label: 'Quantity',\n\t            onUserInput: this.setFormData,\n\t            ref: 'quantity',\n\t            required: true,\n\t            value: this.state.formData.quantity\n\t          }),\n\t          React.createElement(SelectElement, {\n\t            name: 'unitId',\n\t            label: 'Unit',\n\t            options: specimenTypeUnits,\n\t            onUserInput: this.setFormData,\n\t            required: true,\n\t            value: this.state.formData.unitId\n\t          }),\n\t          specimenTypeFields,\n\t          React.createElement(DateElement, {\n\t            name: 'date',\n\t            label: 'Date',\n\t            minYear: '2000',\n\t            maxYear: '2018',\n\t            onUserInput: this.setFormData,\n\t            required: true,\n\t            value: this.state.formData.date\n\t          }),\n\t          React.createElement(TimeElement, {\n\t            name: 'time',\n\t            label: 'Time',\n\t            onUserInput: this.setFormData,\n\t            required: true,\n\t            value: this.state.formData.time\n\t          }),\n\t          React.createElement(TextareaElement, {\n\t            name: 'comments',\n\t            label: 'Comments',\n\t            onUserInput: this.setFormData,\n\t            ref: 'comments',\n\t            value: this.state.formData.comments\n\t          })\n\t        );\n\t      }\n\t\n\t      return React.createElement(\n\t        FormElement,\n\t        {\n\t          name: 'biobankSpecimen',\n\t          onSubmit: this.handleUpdate,\n\t          ref: 'form'\n\t        },\n\t        React.createElement(SelectElement, {\n\t          name: 'specimenType',\n\t          label: 'Specimen Type',\n\t          options: this.props.specimenTypes,\n\t          onUserInput: this.setFormData,\n\t          ref: 'specimenType',\n\t          required: true,\n\t          value: this.state.formData.specimenType\n\t        }),\n\t        specimenFields,\n\t        updateButton\n\t      );\n\t    }\n\t\n\t    /**\n\t     * Set the form data based on state values of child elements/componenets\n\t     *\n\t     * @param {string} formElement - name of the selected element\n\t     * @param {string} value - selected value for corresponding form element\n\t     */\n\t\n\t  }, {\n\t    key: 'setFormData',\n\t    value: function setFormData(formElement, value) {\n\t\n\t      this.props.onChange instanceof Function && this.props.onChange();\n\t\n\t      var formData = this.state.formData;\n\t      formData[formElement] = value;\n\t\n\t      if (formElement === \"specimenType\" && value !== \"\") {\n\t        //This throws a warning if the specimen type is changed because of the cascading effects this \n\t        //would cause.\n\t        if (this.props.edit) {\n\t          swal({\n\t            title: \"Warning\",\n\t            text: \"Changing the specimen type will result in the loss of any preparation or anaylsis \" + \"data for this specimen. You will also need to manually change the specimen type of any \" + \"aliquots derived from this specimen. Proceed with caution.\",\n\t            type: \"warning\",\n\t            showCancelButton: true,\n\t            confirmButtonText: 'Cancel Change',\n\t            cancelButtonText: 'Proceed'\n\t          }, function (isConfirm) {\n\t            if (isConfirm) {\n\t              this.props.toggleEdit();\n\t            } else {}\n\t          }.bind(this));\n\t        }\n\t\n\t        //This is to eliminate the values for the specimen type fields\n\t        //This could potentially be improved later to retain the values\n\t        //for the fields that are common across specimen types\n\t        formData.data = {};\n\t        this.setState({\n\t          currentSpecimenType: value\n\t        });\n\t      }\n\t\n\t      if (formElement === \"containerType\" && value !== \"\") {\n\t        this.setState({\n\t          currentContainerType: value\n\t        });\n\t      }\n\t\n\t      this.setState({\n\t        formData: formData\n\t      }, this.setParentFormData);\n\t    }\n\t  }, {\n\t    key: 'setSpecimenTypeFieldFormData',\n\t    value: function setSpecimenTypeFieldFormData(formElement, value) {\n\t      var formData = this.state.formData;\n\t      formData.data[formElement] = value;\n\t\n\t      this.setState({\n\t        formData: formData\n\t      }, this.setParentFormData);\n\t    }\n\t  }, {\n\t    key: 'setContainerParentFormData',\n\t    value: function setContainerParentFormData(containerParentFormData) {\n\t      var formData = this.state.formData;\n\t\n\t      for (var field in containerParentFormData) {\n\t        formData[field] = containerParentFormData[field];\n\t      }\n\t\n\t      this.setState({\n\t        formData: formData\n\t      }, this.setParentFormData);\n\t    }\n\t  }, {\n\t    key: 'setParentFormData',\n\t    value: function setParentFormData() {\n\t      if (!this.props.edit) {\n\t        var formData = this.state.formData;\n\t        this.props.setParentFormData(formData);\n\t      }\n\t    }\n\t\n\t    // This generates all the form fields for a given specimen type\n\t\n\t  }, {\n\t    key: 'getSpecimenTypeFields',\n\t    value: function getSpecimenTypeFields(fieldsObject) {\n\t      var _this3 = this;\n\t\n\t      var specimenTypeFields = Object.keys(fieldsObject).map(function (attribute) {\n\t        var datatype = _this3.props.attributeDatatypes[fieldsObject[attribute]['datatypeId']].datatype;\n\t        if (datatype === \"text\" || datatype === \"number\") {\n\t          if (fieldsObject[attribute]['refTableId'] == null) {\n\t            return React.createElement(TextboxElement, {\n\t              name: attribute,\n\t              label: fieldsObject[attribute]['name'],\n\t              onUserInput: _this3.setSpecimenTypeFieldFormData,\n\t              ref: attribute,\n\t              required: fieldsObject[attribute]['required'],\n\t              value: _this3.state.formData.data[attribute]\n\t            });\n\t          }\n\t\n\t          // OPTIONS FOR SELECT ELEMENT WILL MOST LIKELY BE PASSED VIA AJAX CALL\n\t          // BUT IT CAN ALSO BE PRELOADED --\n\t          // ASK RIDA HOW THIS SHOULD BE DONE\n\t          if (fieldsObject[attribute]['refTableId'] !== null) {\n\t            return React.createElement(SelectElement, {\n\t              name: attribute,\n\t              label: fieldsObject[attribute]['name'],\n\t              options: '',\n\t              onUserInput: _this3.setSpecimenTypeFieldFormData,\n\t              ref: attribute,\n\t              required: fieldsObject[attribte]['required'],\n\t              value: _this3.state.formData.data[attribute]\n\t            });\n\t          }\n\t        }\n\t\n\t        if (datatype === \"datetime\") {\n\t          return React.createElement(DateElement, {\n\t            name: attribute,\n\t            label: fieldsObject[attribute]['name'],\n\t            onUserInput: _this3.setSpecimenTypeFieldFormData,\n\t            ref: attribute,\n\t            required: fieldsObject[attribute]['required'],\n\t            value: _this3.state.formData.data[attribute]\n\t          });\n\t        }\n\t\n\t        if (datatype === \"boolean\") {}\n\t      });\n\t\n\t      return specimenTypeFields;\n\t    }\n\t  }, {\n\t    key: 'handleUpdate',\n\t    value: function handleUpdate(e) {\n\t      //more things will go here later\n\t      this.updateSpecimen();\n\t    }\n\t  }, {\n\t    key: 'updateSpecimen',\n\t    value: function updateSpecimen() {\n\t      var _$$ajax;\n\t\n\t      var formData = this.state.formData;\n\t      formData['data'] = JSON.stringify(formData['data']);\n\t\n\t      var formObj = new FormData();\n\t      for (var key in formData) {\n\t        if (formData[key] !== \"\") {\n\t          formObj.append(key, formData[key]);\n\t        }\n\t      }\n\t\n\t      $.ajax((_$$ajax = {\n\t        type: 'POST',\n\t        url: this.props.action,\n\t        data: formObj,\n\t        cache: false,\n\t        contentType: false,\n\t        processData: false\n\t      }, _defineProperty(_$$ajax, 'processData', false), _defineProperty(_$$ajax, 'xhr', function () {\n\t        var xhr = new window.XMLHttpRequest();\n\t        return xhr;\n\t      }.bind(this)), _defineProperty(_$$ajax, 'success', function () {\n\t        //Update Parent Specimen Page Here\n\t        formData.data = JSON.parse(formData.data);\n\t        this.props.refreshParent();\n\t      }.bind(this)), _defineProperty(_$$ajax, 'error', function (err) {\n\t        console.error(err);\n\t        var msg = err.responseJSON ? err.responseJSON.message : \"Specimen error!\";\n\t        this.setState({\n\t          errorMessage: msg\n\t        });\n\t        swal(msg, \"\", \"error\");\n\t      }.bind(this)), _$$ajax));\n\t    }\n\t  }]);\n\t\n\t  return SpecimenCollectionForm;\n\t}(React.Component);\n\t\n\tSpecimenCollectionForm.propTypes = {\n\t  setParentFormData: React.PropTypes.func,\n\t  specimenTypes: React.PropTypes.object.isRequired,\n\t  containerTypesPrimary: React.PropTypes.object.isRequired,\n\t  specimenTypeAttributes: React.PropTypes.object.isRequired,\n\t  attributeDatatypes: React.PropTypes.object.isRequired,\n\t  capacities: React.PropTypes.object.isRequired\n\t};\n\t\n\texports.default = SpecimenCollectionForm;\n\n/***/ },\n/* 6 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _containerDisplay = __webpack_require__(7);\n\t\n\tvar _containerDisplay2 = _interopRequireDefault(_containerDisplay);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Biobank Container Parent Form\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Fetches data from Loris backend and displays a form allowing\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * to specimen a biobank file attached to a specific instrument\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author Henri Rabalais\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @version 1.0.0\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\n\tn\t\n\tvar ContainerParentForm = function (_React$Component) {\n\t  _inherits(ContainerParentForm, _React$Component);\n\t\n\t  function ContainerParentForm(props) {\n\t    _classCallCheck(this, ContainerParentForm);\n\t\n\t    var _this = _possibleConstructorReturn(this, (ContainerParentForm.__proto__ || Object.getPrototypeOf(ContainerParentForm)).call(this, props));\n\t\n\t    _this.state = {\n\t      formData: {},\n\t      formErrors: {},\n\t      errorMessage: null\n\t    };\n\t\n\t    _this.mapFormOptions = _this.mapFormOptions.bind(_this);\n\t    _this.handleSubmit = _this.handleSubmit.bind(_this);\n\t    _this.setFormData = _this.setFormData.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(ContainerParentForm, [{\n\t    key: 'componentDidMount',\n\t    value: function componentDidMount() {\n\t      // This is where we will pass a parentContainerId if it already exists\n\t      // These are simply to provide 'Defaults' to the page. I am not sure that in\n\t      // if they are entirely necessary.\n\t      if (this.props.container) {\n\t        var formData = this.state.formData;\n\t        formData['container'] = JSON.stringify(this.props.container);\n\t        formData['parentContainerId'] = this.props.container.parentContainerId;\n\t\n\t        this.setState({\n\t          formData: formData\n\t        });\n\t      }\n\t    }\n\t\n\t    //map options for forms\n\t\n\t  }, {\n\t    key: 'mapFormOptions',\n\t    value: function mapFormOptions(rawObject, targetAttribute) {\n\t      var data = {};\n\t      for (var id in rawObject) {\n\t        data[id] = rawObject[id][targetAttribute];\n\t      }\n\t\n\t      return data;\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t\n\t      var parentContainerField;\n\t      var coordinateField;\n\t      var containerDisplay;\n\t      var containerBarcodesNonPrimary = this.mapFormOptions(this.props.containersNonPrimary, 'barcode');\n\t\n\t      parentContainerField = React.createElement(SelectElement, {\n\t        name: 'parentContainerId',\n\t        label: 'Parent Container Barcode',\n\t        options: containerBarcodesNonPrimary,\n\t        onUserInput: this.setFormData,\n\t        ref: 'parentContainerId',\n\t        required: false,\n\t        value: this.state.formData.parentContainerId\n\t      });\n\t\n\t      // THIS IS VERY POORLY DONE AND NEEDS REFACTORING\n\t      // this should be a 'currentParentContainerId' state\n\t      if (this.state.formData.parentContainerId) {\n\t\n\t        var dimensionId = this.props.containersNonPrimary[this.state.formData.parentContainerId].dimensionId;\n\t\n\t        if (dimensionId) {\n\t          //This will eventually become unecessary\n\t          ///////////////////////////////////////////////////\n\t          var dimensions = this.props.containerDimensions[dimensionId];\n\t\n\t          // Total coordinates is determined by the product of the dimensions\n\t          var coordinatesTotal = 1;\n\t          for (var dimension in dimensions) {\n\t            coordinatesTotal = coordinatesTotal * dimensions[dimension];\n\t          }\n\t\n\t          // Mapping of options for the SelectElement\n\t          var coordinates = {};\n\t          for (var i = 1; i <= coordinatesTotal; i++) {\n\t\n\t            // If the coordinate is already taken, skip it.\n\t            // this doubling of if statements seems unnecessary\n\t            if (this.props.containerCoordinates[this.state.formData.parentContainerId]) {\n\t              if (this.props.containerCoordinates[this.state.formData.parentContainerId][i]) {\n\t                continue;\n\t              }\n\t            }\n\t\n\t            coordinates[i] = i;\n\t          }\n\t\n\t          // coordinateField = ( \n\t          //   <SelectElement\n\t          //     name=\"coordinate\"\n\t          //     label=\"Coordinate\"\n\t          //     options={coordinates}\n\t          //     onUserInput={this.setFormData}\n\t          //     ref=\"coordinate\"\n\t          //     required={false}\n\t          //     value={this.state.formData.coordinate}\n\t          //   />  \n\t          // );  \n\t          ///////////////////////////////////////////////////\n\t\n\t          containerDisplay = React.createElement(_containerDisplay2.default, {\n\t            dimensions: this.props.containerDimensions[this.props.containersNonPrimary[this.state.formData.parentContainerId].dimensionId],\n\t            coordinates: this.props.containerCoordinates[this.state.formData.parentContainerId],\n\t            containerTypes: this.props.containerTypes,\n\t            containerStati: this.props.containerStati,\n\t            select: true,\n\t            selectedCoordinate: this.state.formData.coordinate,\n\t            updateParent: this.setFormData\n\t          });\n\t        }\n\t      }\n\t\n\t      var updateButton;\n\t      if (this.props.container) {\n\t        updateButton = React.createElement(ButtonElement, { label: 'Update' });\n\t      }\n\t\n\t      return React.createElement(\n\t        FormElement,\n\t        {\n\t          onSubmit: this.handleSubmit\n\t        },\n\t        parentContainerField,\n\t        coordinateField,\n\t        containerDisplay,\n\t        React.createElement('br', null),\n\t        updateButton\n\t      );\n\t    }\n\t\n\t    /** *******************************************************************************\n\t     *                      ******     Helper methods     *******\n\t     *********************************************************************************/\n\t\n\t    // Validation functions will go here later...\n\t\n\t    /*\n\t     * Uploads the file to the server\n\t     */\n\t\n\t  }, {\n\t    key: 'handleSubmit',\n\t    value: function handleSubmit() {\n\t      // Set form data and specimen the biobank file\n\t      var formData = this.state.formData;\n\t      var formObj = new FormData();\n\t      for (var key in formData) {\n\t        if (formData[key] !== \"\") {\n\t          formObj.append(key, formData[key]);\n\t        }\n\t      }\n\t\n\t      $.ajax({\n\t        type: 'POST',\n\t        url: this.props.action,\n\t        data: formObj,\n\t        cache: false,\n\t        contentType: false,\n\t        processData: false,\n\t        xhr: function () {\n\t          var xhr = new window.XMLHttpRequest();\n\t          return xhr;\n\t        }.bind(this),\n\t        success: function () {\n\t\n\t          this.props.refreshParent();\n\t          swal(\"Parent Container Update Successful!\", \"\", \"success\");\n\t          this.props.onSuccess();\n\t        }.bind(this),\n\t        error: function (err) {\n\t          console.error(err);\n\t          var msg = err.responseJSON ? err.responseJSON.message : \"Specimen error!\";\n\t          this.setState({\n\t            errorMessage: msg\n\t          });\n\t          swal(msg, \"\", \"error\");\n\t        }.bind(this)\n\t      });\n\t    }\n\t\n\t    /**\n\t     * Set the form data based on state values of child elements/componenets\n\t     *\n\t     * @param {string} formElement - name of the selected element\n\t     * @param {string} value - selected value for corresponding form element\n\t     */\n\t\n\t  }, {\n\t    key: 'setFormData',\n\t    value: function setFormData(formElement, value) {\n\t\n\t      var formData = this.state.formData;\n\t      formData[formElement] = value;\n\t\n\t      if (formElement === 'parentContainerId') {\n\t        formData['coordinate'] = \"\";\n\t      }\n\t\n\t      this.setState({\n\t        formData: formData\n\t      }, this.setParentFormData);\n\t    }\n\t  }, {\n\t    key: 'setParentFormData',\n\t    value: function setParentFormData() {\n\t      if (!this.props.container) {\n\t        var formData = this.state.formData;\n\t        this.props.setParentFormData(formData);\n\t      }\n\t    }\n\t  }]);\n\t\n\t  return ContainerParentForm;\n\t}(React.Component);\n\t\n\tContainerParentForm.propTypes = {\n\t  DataURL: React.PropTypes.string,\n\t  action: React.PropTypes.string,\n\t  barcode: React.PropTypes.string,\n\t  refreshTable: React.PropTypes.func,\n\t  onSuccess: React.PropTypes.func\n\t};\n\t\n\texports.default = ContainerParentForm;\n\n/***/ },\n/* 7 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * ContainerDisplay\n\t *\n\t * @author Henri Rabalais\n\t * @version 1.0.0\n\t *\n\t **/\n\t\n\tvar ContainerDisplay = function (_React$Component) {\n\t  _inherits(ContainerDisplay, _React$Component);\n\t\n\t  function ContainerDisplay(props) {\n\t    _classCallCheck(this, ContainerDisplay);\n\t\n\t    var _this = _possibleConstructorReturn(this, (ContainerDisplay.__proto__ || Object.getPrototypeOf(ContainerDisplay)).call(this, props));\n\t\n\t    _this.state = {};\n\t\n\t    _this.redirectURL = _this.redirectURL.bind(_this);\n\t    _this.drag = _this.drag.bind(_this);\n\t    _this.drop = _this.drop.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(ContainerDisplay, [{\n\t    key: 'componentDidMount',\n\t    value: function componentDidMount() {\n\t      $('[data-toggle=\"tooltip\"]').tooltip();\n\t    }\n\t  }, {\n\t    key: 'componentDidUpdate',\n\t    value: function componentDidUpdate() {\n\t      $('[data-toggle=\"tooltip\"]').tooltip();\n\t    }\n\t  }, {\n\t    key: 'redirectURL',\n\t    value: function redirectURL(e) {\n\t      var coordinate = e.target.id;\n\t      if (this.props.coordinates[coordinate]) {\n\t        var url = void 0;\n\t        if (this.props.types[this.props.children[this.props.coordinates[coordinate]].typeId].primary) {\n\t          url = loris.BaseURL + \"/biobank/specimen/?barcode=\" + this.props.children[this.props.coordinates[coordinate]].barcode;\n\t        } else {\n\t          url = loris.BaseURL + \"/biobank/container/?barcode=\" + this.props.children[this.props.coordinates[coordinate]].barcode;\n\t        }\n\t\n\t        window.location.href = url;\n\t      }\n\t    }\n\t  }, {\n\t    key: 'allowDrop',\n\t    value: function allowDrop(e) {\n\t      e.preventDefault();\n\t    }\n\t  }, {\n\t    key: 'drag',\n\t    value: function drag(e) {\n\t      var container = JSON.stringify(this.props.children[this.props.coordinates[e.target.id]]);\n\t      e.dataTransfer.setData(\"text/plain\", container);\n\t    }\n\t  }, {\n\t    key: 'drop',\n\t    value: function drop(e) {\n\t      e.preventDefault();\n\t\n\t      var container = e.dataTransfer.getData(\"text/plain\");\n\t      var newCoordinate = parseInt(e.target.id);\n\t\n\t      this.props.updateParent(container, newCoordinate);\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t      var _this2 = this;\n\t\n\t      // This is eventually need to be reworked and cleaned up\n\t      var column = [];\n\t      var row = [];\n\t      var display = void 0;\n\t      var coordinate = 1;\n\t      if (this.props.dimensions) {\n\t        for (var y = 0; y < this.props.dimensions.y; y++) {\n\t          column = [];\n\t          for (var x = 1; x <= this.props.dimensions.x; x++) {\n\t\n\t            var nodeWidth = 500 / this.props.dimensions.x - 500 / this.props.dimensions.x * 0.08;\n\t            var nodeStyle = { width: nodeWidth };\n\t            var nodeClass = 'node';\n\t            var tooltipTitle = null;\n\t            var dataHtml = 'false';\n\t            var dataToggle = null;\n\t            var dataPlacement = null;\n\t            var draggable = 'false';\n\t            var onDragStart = null;\n\t            var onDragOver = this.allowDrop;\n\t            var onDrop = this.drop;\n\t            var onClick = null;\n\t\n\t            if (!this.props.select) {\n\t              // This double if statement doesn't sound great\n\t              if (this.props.coordinates) {\n\t                if (this.props.coordinates[coordinate]) {\n\t                  nodeClass = 'node occupied';\n\t                  dataHtml = 'true';\n\t                  dataToggle = 'tooltip';\n\t                  dataPlacement = 'top';\n\t                  tooltipTitle = '<h5>' + this.props.children[this.props.coordinates[coordinate]].barcode + '</h5>' + '<h5>' + this.props.containerTypes[this.props.children[this.props.coordinates[coordinate]].typeId].label + '</h5>' + '<h5>' + this.props.containerStati[this.props.children[this.props.coordinates[coordinate]].statusId].status + '</h5>';\n\t                  draggable = 'true';\n\t                  onDragStart = this.drag;\n\t                  onDragOver = null;\n\t                  onDrop = null;\n\t                  onClick = this.redirectURL;\n\t                }\n\t              }\n\t            }\n\t\n\t            if (this.props.select) {\n\t              if (coordinate == this.props.selectedCoordinate) {\n\t                nodeClass = 'node occupied';\n\t              } else if (!this.props.coordinates) {\n\t                nodeClass = 'node available';\n\t                onClick = function onClick(e) {\n\t                  return _this2.props.updateParent('coordinate', e.target.id);\n\t                };\n\t              } else if (this.props.coordinates) {\n\t                if (!this.props.coordinates[coordinate]) {\n\t                  nodeClass = 'node available';\n\t                  onClick = function onClick(e) {\n\t                    return _this2.props.updateParent('coordinate', e.target.id);\n\t                  };\n\t                } else if (this.props.coordinates[coordinate]) {\n\t                  // --- This is currently not working ---\n\t                  //  dataHtml = 'true';\n\t                  //  dataToggle = 'tooltip';\n\t                  //  dataPlacement = 'top';\n\t                  //  tooltipTitle = \n\t                  //'<h5>' + this.props.children[this.props.coordinates[coordinate]].barcode + '</h5>' + \n\t                  //'<h5>' + this.props.containerTypes[this.props.children[this.props.coordinates[coordinate]].typeId].label + '</h5>' + \n\t                  //'<h5>' + this.props.containerStati[this.props.children[this.props.coordinates[coordinate]].statusId].status + '</h5>';\n\t                }\n\t              }\n\t            }\n\t\n\t            var coordinateDisplay = void 0;\n\t            if (true) {\n\t              coordinateDisplay = x + this.props.dimensions.x * y;\n\t            } else if (false) {\n\t              coordinateDisplay = String.fromCharCode(65 + y) + '' + x;\n\t            }\n\t\n\t            column.push(React.createElement(\n\t              'div',\n\t              {\n\t                id: coordinate,\n\t                className: nodeClass,\n\t                'data-html': dataHtml,\n\t                'data-toggle': dataToggle,\n\t                'data-placement': dataPlacement,\n\t                'data-original-title': tooltipTitle,\n\t                style: nodeStyle,\n\t                onClick: onClick,\n\t                draggable: draggable,\n\t                onDragStart: onDragStart,\n\t                onDragOver: onDragOver,\n\t                onDrop: onDrop\n\t              },\n\t              coordinateDisplay\n\t            ));\n\t\n\t            coordinate++;\n\t          }\n\t\n\t          var rowHeight = 500 / this.props.dimensions.y - 500 / this.props.dimensions.y * 0.08;\n\t          var rowMargin = 500 / this.props.dimensions.y * 0.04;\n\t          var rowStyle = {\n\t            height: rowHeight\n\t          };\n\t\n\t          row.push(React.createElement(\n\t            'div',\n\t            {\n\t              className: 'row',\n\t              style: rowStyle\n\t            },\n\t            column\n\t          ));\n\t        }\n\t\n\t        display = row;\n\t      }\n\t\n\t      return React.createElement(\n\t        'div',\n\t        { className: 'display' },\n\t        display\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return ContainerDisplay;\n\t}(React.Component);\n\t\n\tContainerDisplay.propTypes = {};\n\t\n\texports.default = ContainerDisplay;\n\n/***/ },\n/* 8 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _containerBarcodeForm = __webpack_require__(9);\n\t\n\tvar _containerBarcodeForm2 = _interopRequireDefault(_containerBarcodeForm);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * Biobank Collection Form\n\t *\n\t * Fetches data from Loris backend and displays a form allowing\n\t * to specimen a biobank file attached to a specific instrument\n\t *\n\t * @author Henri Rabalais\n\t * @version 1.0.0\n\t *\n\t * */\n\tvar BiobankContainerForm = function (_React$Component) {\n\t  _inherits(BiobankContainerForm, _React$Component);\n\t\n\t  function BiobankContainerForm(props) {\n\t    _classCallCheck(this, BiobankContainerForm);\n\t\n\t    var _this = _possibleConstructorReturn(this, (BiobankContainerForm.__proto__ || Object.getPrototypeOf(BiobankContainerForm)).call(this, props));\n\t\n\t    _this.state = {\n\t      formData: {},\n\t      formErrors: {},\n\t      errorMessage: null,\n\t      barcodeFormList: { 1: {} },\n\t      countBarcodeForms: 1\n\t    };\n\t\n\t    _this.handleSubmit = _this.handleSubmit.bind(_this);\n\t    _this.validateForm = _this.validateForm.bind(_this);\n\t    _this.setFormData = _this.setFormData.bind(_this);\n\t    _this.containerSubmit = _this.containerSubmit.bind(_this);\n\t    _this.addBarcodeForm = _this.addBarcodeForm.bind(_this);\n\t    _this.setBarcodeFormData = _this.setBarcodeFormData.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(BiobankContainerForm, [{\n\t    key: \"render\",\n\t    value: function render() {\n\t      var _this2 = this;\n\t\n\t      //Generates new Barcode Form everytime the addBarcodeForm button is pressed\n\t      var barcodeListArray = Object.keys(this.state.barcodeFormList);\n\t      var barcodeForms = [];\n\t      var i = 1;\n\t      var _iteratorNormalCompletion = true;\n\t      var _didIteratorError = false;\n\t      var _iteratorError = undefined;\n\t\n\t      try {\n\t        var _loop = function _loop() {\n\t          var key = _step.value;\n\t\n\t          barcodeForms.push(React.createElement(_containerBarcodeForm2.default, {\n\t            key: key,\n\t            barcodeKey: key,\n\t            id: i,\n\t            formData: _this2.state.barcodeFormList[key] ? _this2.state.barcodeFormList[key] : null,\n\t            removeBarcodeForm: barcodeListArray.length !== 1 ? function () {\n\t              return _this2.removeBarcodeForm(key);\n\t            } : null,\n\t            addBarcodeForm: i == barcodeListArray.length ? _this2.addBarcodeForm : null,\n\t            duplicateBarcodeForm: i == barcodeListArray.length && _this2.state.barcodeFormList[key] ? function () {\n\t              return _this2.duplicateBarcodeForm(key);\n\t            } : null,\n\t            onChange: _this2.props.onChange,\n\t            setParentFormData: _this2.setBarcodeFormData,\n\t            containerTypesNonPrimary: _this2.props.containerTypesNonPrimary,\n\t            containerBarcodesNonPrimary: _this2.props.containerBarcodesNonPrimary\n\t          }));\n\t\n\t          i++;\n\t        };\n\t\n\t        for (var _iterator = barcodeListArray[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n\t          _loop();\n\t        }\n\t\n\t        //ALLOW THEM TO CANCEL THE FORM AND DELETE BARCODE FORMS\n\t      } catch (err) {\n\t        _didIteratorError = true;\n\t        _iteratorError = err;\n\t      } finally {\n\t        try {\n\t          if (!_iteratorNormalCompletion && _iterator.return) {\n\t            _iterator.return();\n\t          }\n\t        } finally {\n\t          if (_didIteratorError) {\n\t            throw _iteratorError;\n\t          }\n\t        }\n\t      }\n\t\n\t      return React.createElement(\n\t        FormElement,\n\t        {\n\t          name: \"specimenForm\",\n\t          onSubmit: this.handleSubmit,\n\t          ref: \"form\"\n\t        },\n\t        React.createElement(\"br\", null),\n\t        React.createElement(\n\t          \"div\",\n\t          { className: \"row\" },\n\t          React.createElement(\n\t            \"div\",\n\t            { className: \"col-xs-11\" },\n\t            React.createElement(SelectElement, {\n\t              name: \"site\",\n\t              label: \"Site\",\n\t              options: this.props.sites,\n\t              onUserInput: this.setFormData,\n\t              ref: \"site\",\n\t              required: true,\n\t              value: this.state.formData.site\n\t            })\n\t          )\n\t        ),\n\t        barcodeForms,\n\t        React.createElement(\n\t          \"div\",\n\t          { className: \"col-xs-3 col-xs-offset-9\" },\n\t          React.createElement(ButtonElement, { label: \"Submit\" })\n\t        )\n\t      );\n\t    }\n\t\n\t    /** *******************************************************************************\n\t     *                      ******     Helper methods     *******\n\t     *********************************************************************************/\n\t\n\t    /**\n\t     * Returns a valid name for the file to be specimened\n\t     *\n\t     * @param {string} visitLabel - Visit label selected from the dropdown\n\t     * @param {string} instrument - Instrument selected from the dropdown\n\t     * @return {string} - Generated valid filename for the current selection\n\t     */\n\t\n\t  }, {\n\t    key: \"validateForm\",\n\t    value: function validateForm(formElement, value) {\n\t      var _this3 = this;\n\t\n\t      var formErrors = this.state.formErrors;\n\t\n\t      //validate barcode regex\n\t      if (formElement === \"barcode\" && value !== \"\") {\n\t        if (!/^hello/.test(this.state.formData.barcode)) {\n\t          formErrors.barcode = true;\n\t        } else {\n\t          formErrors.barcode = false;\n\t        }\n\t      }\n\t\n\t      //validate that quantity is a number and less than capacity\n\t      if (formElement === \"quantity\" && value !== \"\") {\n\t        if (isNaN(value) || value > this.props.capacities[this.state.currentContainerType]) {\n\t          formErrors.quantity = true;\n\t        } else {\n\t          formErrors.quantity = false;\n\t        }\n\t      }\n\t\n\t      //validate datatypes and regex of generated type attributes\n\t      var specimenTypeFieldsObject = this.props.specimenTypeAttributes[this.state.currentSpecimenType];\n\t      var specimenTypeFields = Object.keys(specimenTypeFieldsObject).map(function (attribute) {\n\t\n\t        var datatype = _this3.props.attributeDatatypes[specimenTypeFieldsObject[attribute]['datatypeId']].datatype;\n\t        if (datatype === \"number\") {\n\t          if (formElement === attribute) {\n\t            if (isNaN(value) && value !== \"\") {\n\t              formErrors[attribute] = true;\n\t            } else {\n\t              formErrors[attribute] = false;\n\t            }\n\t          }\n\t        }\n\t      });\n\t\n\t      this.setState({\n\t        formErrors: formErrors\n\t      });\n\t    }\n\t\n\t    /**\n\t     * Handle form submission\n\t     * @param {object} e - Form submission event\n\t     */\n\t\n\t  }, {\n\t    key: \"handleSubmit\",\n\t    value: function handleSubmit(e) {\n\t\n\t      this.containerSubmit();\n\t    }\n\t  }, {\n\t    key: \"containerSubmit\",\n\t    value: function containerSubmit() {\n\t      // Set form data\n\t      var formData = this.state.formData;\n\t      var barcodeFormList = this.state.barcodeFormList;\n\t      formData['barcodeFormList'] = JSON.stringify(barcodeFormList);\n\t      var formObj = new FormData();\n\t      for (var _key in formData) {\n\t        if (formData[_key] !== \"\") {\n\t          formObj.append(_key, formData[_key]);\n\t        }\n\t      }\n\t\n\t      $.ajax({\n\t        type: 'POST',\n\t        url: this.props.action,\n\t        data: formObj,\n\t        cache: false,\n\t        contentType: false,\n\t        processData: false,\n\t        xhr: function () {\n\t          var xhr = new window.XMLHttpRequest();\n\t          return xhr;\n\t        }.bind(this),\n\t        success: function () {\n\t\n\t          //refreshes table \n\t          this.props.refreshParent();\n\t\n\t          //provide success message\n\t          swal(\"Container Submission Successful!\", \"\", \"success\");\n\t\n\t          //close modal window\n\t          this.props.onSuccess();\n\t        }.bind(this),\n\t        error: function (err) {\n\t          console.error(err);\n\t          var msg = err.responseJSON ? err.responseJSON.message : \"Specimen error!\";\n\t          this.setState({\n\t            errorMessage: msg\n\t          });\n\t          swal(msg, \"\", \"error\");\n\t        }.bind(this)\n\t      });\n\t    }\n\t\n\t    /**\n\t     * Set the form data based on state values of child elements/componenets\n\t     *\n\t     * @param {string} formElement - name of the selected element\n\t     * @param {string} value - selected value for corresponding form element\n\t     */\n\t\n\t  }, {\n\t    key: \"setFormData\",\n\t    value: function setFormData(formElement, value) {\n\t      this.props.onChange instanceof Function && this.props.onChange();\n\t\n\t      //LOOK AT THIS LATER - THE SWITCH TO PROPS MESSED THIS ALL UP \n\t      var formData = this.state.formData;\n\t      formData[formElement] = value;\n\t\n\t      this.setState({\n\t        formData: formData\n\t      });\n\t    }\n\t  }, {\n\t    key: \"setBarcodeFormData\",\n\t    value: function setBarcodeFormData(barcodeFormData, barcodeKey) {\n\t      var formData = this.state.formData;\n\t      var barcodeFormList = this.state.barcodeFormList;\n\t      barcodeFormList[barcodeKey] = barcodeFormData;\n\t      formData['barcodeFormList'] = barcodeFormList;\n\t\n\t      this.setState({\n\t        formData: formData\n\t      });\n\t    }\n\t  }, {\n\t    key: \"addBarcodeForm\",\n\t    value: function addBarcodeForm() {\n\t      var barcodeFormList = this.state.barcodeFormList;\n\t      var count = this.state.countBarcodeForms;\n\t\n\t      barcodeFormList[count + 1] = {};\n\t\n\t      this.setState({\n\t        barcodeFormList: barcodeFormList,\n\t        countBarcodeForms: count + 1\n\t      });\n\t    }\n\t  }, {\n\t    key: \"duplicateBarcodeForm\",\n\t    value: function duplicateBarcodeForm(key) {\n\t      var count = this.state.countBarcodeForms;\n\t      var nextKey = count + 1;\n\t      var barcodeFormList = this.state.barcodeFormList;\n\t\n\t      barcodeFormList[nextKey] = JSON.parse(JSON.stringify(barcodeFormList[key]));\n\t      delete barcodeFormList[nextKey].barcode;\n\t\n\t      this.setState({\n\t        barcodeFormList: barcodeFormList,\n\t        countBarcodeForms: nextKey\n\t      });\n\t    }\n\t  }, {\n\t    key: \"removeBarcodeForm\",\n\t    value: function removeBarcodeForm(index) {\n\t      var barcodeFormList = this.state.barcodeFormList;\n\t      delete barcodeFormList[key];\n\t\n\t      this.setState({\n\t        barcodeFormList: barcodeFormList\n\t      });\n\t    }\n\t  }]);\n\t\n\t  return BiobankContainerForm;\n\t}(React.Component);\n\t\n\tBiobankContainerForm.propTypes = {\n\t  DataURL: React.PropTypes.string.isRequired,\n\t  action: React.PropTypes.string.isRequired,\n\t  barcode: React.PropTypes.string,\n\t  refreshTable: React.PropTypes.func\n\t};\n\t\n\texports.default = BiobankContainerForm;\n\n/***/ },\n/* 9 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * Container Barcode Form\n\t *\n\t * Acts a subform for ContainerForm\n\t *\n\t * @author Henri Rabalais\n\t * @version 1.0.0\n\t *\n\t **/\n\t\n\tvar ContainerBarcodeForm = function (_React$Component) {\n\t  _inherits(ContainerBarcodeForm, _React$Component);\n\t\n\t  function ContainerBarcodeForm(props) {\n\t    _classCallCheck(this, ContainerBarcodeForm);\n\t\n\t    var _this = _possibleConstructorReturn(this, (ContainerBarcodeForm.__proto__ || Object.getPrototypeOf(ContainerBarcodeForm)).call(this, props));\n\t\n\t    _this.state = {\n\t      formData: {},\n\t      formErrors: {}\n\t    };\n\t\n\t    _this.setFormData = _this.setFormData.bind(_this);\n\t    _this.setParentFormData = _this.setParentFormData.bind(_this);\n\t    _this.toggleCollapse = _this.toggleCollapse.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(ContainerBarcodeForm, [{\n\t    key: 'componentDidMount',\n\t    value: function componentDidMount() {\n\t\n\t      if (this.props.formData) {\n\t        var formData = this.props.formData;\n\t\n\t        this.setState({\n\t          formData: formData\n\t        });\n\t      }\n\t    }\n\t  }, {\n\t    key: 'toggleCollapse',\n\t    value: function toggleCollapse() {\n\t      this.setState({ collapsed: !this.state.collapsed });\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t\n\t      // HR TODO: All this CSS should eventually be moved\n\t      var addBarcodeFormButton = void 0;\n\t      var duplicateBarcodeFormButton = void 0;\n\t      if (this.props.addBarcodeForm) {\n\t        addBarcodeFormButton = React.createElement(\n\t          'button',\n\t          {\n\t            type: 'button',\n\t            className: 'btn btn-success btn-sm',\n\t            onClick: this.props.addBarcodeForm\n\t          },\n\t          React.createElement('span', { className: 'glyphicon glyphicon-plus', style: { marginRight: 5 } }),\n\t          'New'\n\t        );\n\t      }\n\t\n\t      if (this.props.duplicateBarcodeForm) {\n\t        duplicateBarcodeFormButton = React.createElement(\n\t          'button',\n\t          {\n\t            type: 'button',\n\t            className: 'btn btn-success btn-sm',\n\t            onClick: this.props.duplicateBarcodeForm\n\t          },\n\t          React.createElement('span', { className: 'glyphicon glyphicon-duplicate', style: { marginRight: 5 } }),\n\t          'Previous'\n\t        );\n\t      }\n\t\n\t      var removeBarcodeFormButton = void 0;\n\t      if (this.props.removeBarcodeForm) {\n\t        var glyphStyle = {\n\t          color: '#DDDDDD',\n\t          marginLeft: 10,\n\t          cursor: 'pointer',\n\t          fontSize: 15\n\t        };\n\t\n\t        var buttonStyle = {\n\t          appearance: 'non',\n\t          outline: 'non',\n\t          boxShadow: 'none',\n\t          borderColor: 'transparent',\n\t          backgroundColor: 'transparent'\n\t        };\n\t\n\t        removeBarcodeFormButton = React.createElement('span', {\n\t          className: 'glyphicon glyphicon-remove',\n\t          onClick: this.props.removeBarcodeForm,\n\t          style: glyphStyle\n\t        });\n\t      }\n\t\n\t      return React.createElement(\n\t        FormElement,\n\t        {\n\t          name: 'biobankBarcode'\n\t        },\n\t        React.createElement(\n\t          'div',\n\t          { className: 'row' },\n\t          React.createElement(\n\t            'div',\n\t            { className: 'col-xs-11' },\n\t            React.createElement(\n\t              'div',\n\t              null,\n\t              React.createElement(TextboxElement, {\n\t                name: \"barcode\",\n\t                label: \"Barcode \" + this.props.id,\n\t                onUserInput: this.setFormData,\n\t                ref: \"barcode\",\n\t                required: true,\n\t                value: this.state.formData[\"barcode\"]\n\t              })\n\t            )\n\t          ),\n\t          React.createElement(\n\t            'div',\n\t            { className: 'col-xs-1', style: { paddingLeft: 0, marginTop: 10 } },\n\t            React.createElement('span', {\n\t              className: this.state.collapsed ? 'glyphicon glyphicon-chevron-down' : 'glyphicon glyphicon-chevron-up',\n\t              style: { cursor: 'pointer', fontSize: 15, position: 'relative', right: 40 },\n\t              'data-toggle': 'collapse',\n\t              'data-target': \"#\" + this.props.id,\n\t              onClick: this.toggleCollapsed\n\t            }),\n\t            removeBarcodeFormButton\n\t          )\n\t        ),\n\t        React.createElement(\n\t          'div',\n\t          { className: 'row' },\n\t          React.createElement('div', { className: 'col-xs-2' }),\n\t          React.createElement(\n\t            'div',\n\t            { className: 'col-xs-9' },\n\t            React.createElement(\n\t              'div',\n\t              { id: this.props.id, className: 'collapse' },\n\t              React.createElement(SelectElement, {\n\t                name: 'containerType',\n\t                label: 'Container Type',\n\t                options: this.props.containerTypesNonPrimary,\n\t                onUserInput: this.setFormData,\n\t                required: true,\n\t                value: this.state.formData.containerType\n\t              })\n\t            )\n\t          )\n\t        ),\n\t        React.createElement(\n\t          'div',\n\t          { className: 'row' },\n\t          React.createElement(\n\t            'div',\n\t            { className: 'col-xs-11' },\n\t            React.createElement('div', { className: 'col-xs-3' }),\n\t            React.createElement(\n\t              'div',\n\t              { className: 'col-xs-1' },\n\t              addBarcodeFormButton\n\t            ),\n\t            React.createElement(\n\t              'div',\n\t              { className: 'col-xs-1' },\n\t              duplicateBarcodeFormButton\n\t            )\n\t          )\n\t        )\n\t      );\n\t    }\n\t\n\t    /**\n\t     * Set the form data based on state values of child elements/componenets\n\t     *\n\t     * @param {string} formElement - name of the selected element\n\t     * @param {string} value - selected value for corresponding form element\n\t     */\n\t\n\t  }, {\n\t    key: 'setFormData',\n\t    value: function setFormData(formElement, value) {\n\t      this.props.onChange instanceof Function && this.props.onChange();\n\t\n\t      var formData = this.state.formData;\n\t      formData[formElement] = value;\n\t\n\t      this.setState({\n\t        formData: formData\n\t      }, this.setParentFormData);\n\t    }\n\t  }, {\n\t    key: 'setParentFormData',\n\t    value: function setParentFormData() {\n\t      this.props.setParentFormData(this.state.formData, this.props.id);\n\t    }\n\t  }]);\n\t\n\t  return ContainerBarcodeForm;\n\t}(React.Component);\n\t\n\tContainerBarcodeForm.propTypes = {\n\t  id: React.PropTypes.string,\n\t  specimenTypes: React.PropTypes.object.isRequired,\n\t  containerTypesPrimary: React.PropTypes.object.isRequired,\n\t  specimenTypeAttributes: React.PropTypes.object.isRequired,\n\t  attributeDatatypes: React.PropTypes.object.isRequired,\n\t  capacities: React.PropTypes.object.isRequired\n\t};\n\t\n\texports.default = ContainerBarcodeForm;\n\n/***/ },\n/* 10 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * This file contains React components for Tabs component.\n\t *\n\t * @author Loris Team\n\t * @version 1.1.0\n\t *\n\t */\n\t\n\t/**\n\t * Tabs Component.\n\t * React wrapper for Bootstrap tabs. Allows to dynamically render tabs\n\t * and corresponding tab panes.\n\t *\n\t * ================================================\n\t * Usage:\n\t *\n\t * 1. Define an array of tabs with IDs and labels\n\t *\n\t * `let tabList = [{id: \"tab1\", label: \"This is tab title\"}];`\n\t *\n\t * 2. Pass tabList as <Tab> property and <TabPane> as child\n\t *  ```\n\t * <Tabs tabs={tabList} defaultTab=\"tab1\">\n\t *   <TabPane TabId={tabList[0].id}>\n\t *     // Tab content goes here\n\t *   </TabPane>\n\t * </Tabs>\n\t * ```\n\t * =================================================\n\t *\n\t */\n\tvar Tabs = function (_React$Component) {\n\t  _inherits(Tabs, _React$Component);\n\t\n\t  function Tabs(props) {\n\t    _classCallCheck(this, Tabs);\n\t\n\t    var _this = _possibleConstructorReturn(this, (Tabs.__proto__ || Object.getPrototypeOf(Tabs)).call(this, props));\n\t\n\t    var hash = window.location.hash;\n\t    var activeTab = \"\";\n\t\n\t    /**\n\t     * Determine the initial active tab in this order\n\t     * 1. Try to infer from the URL, otherwise\n\t     * 2. Try to infer from the defaultTab prop, otherwise\n\t     * 3. Set to be the first tab of the list\n\t     */\n\t    if (_this.props.updateURL && hash) {\n\t      activeTab = hash.substr(1);\n\t    } else if (_this.props.defaultTab) {\n\t      activeTab = _this.props.defaultTab;\n\t    } else if (_this.props.tabs.length > 0) {\n\t      activeTab = _this.props.tabs[0].id;\n\t    }\n\t\n\t    _this.state = {\n\t      activeTab: activeTab\n\t    };\n\t\n\t    _this.handleClick = _this.handleClick.bind(_this);\n\t    _this.getTabs = _this.getTabs.bind(_this);\n\t    _this.getTabPanes = _this.getTabPanes.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(Tabs, [{\n\t    key: 'handleClick',\n\t    value: function handleClick(tabId, e) {\n\t      this.setState({ activeTab: tabId });\n\t      this.props.onTabChange(tabId);\n\t\n\t      // Add tab href to URL querystring and scroll the page to top\n\t      if (this.props.updateURL) {\n\t        var scrollDistance = $('body').scrollTop() || $('html').scrollTop();\n\t        window.location.hash = e.target.hash;\n\t        $('html,body').scrollTop(scrollDistance);\n\t      }\n\t    }\n\t  }, {\n\t    key: 'getTabs',\n\t    value: function getTabs() {\n\t      var tabs = this.props.tabs.map(function (tab) {\n\t        var tabClass = this.state.activeTab === tab.id ? 'active' : null;\n\t        var href = \"#\" + tab.id;\n\t        var tabID = \"tab-\" + tab.id;\n\t        return React.createElement(\n\t          'li',\n\t          {\n\t            role: 'presentation',\n\t            className: tabClass,\n\t            key: tab.id\n\t          },\n\t          React.createElement(\n\t            'a',\n\t            { id: tabID,\n\t              href: href,\n\t              role: 'tab',\n\t              'data-toggle': 'tab',\n\t              onClick: this.handleClick.bind(null, tab.id)\n\t            },\n\t            tab.label\n\t          )\n\t        );\n\t      }.bind(this));\n\t\n\t      return tabs;\n\t    }\n\t  }, {\n\t    key: 'getTabPanes',\n\t    value: function getTabPanes() {\n\t      var tabPanes = React.Children.map(this.props.children, function (child, key) {\n\t        if (child) {\n\t          return React.cloneElement(child, {\n\t            activeTab: this.state.activeTab,\n\t            key: key\n\t          });\n\t        }\n\t      }.bind(this));\n\t\n\t      return tabPanes;\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t      var tabs = this.getTabs();\n\t      var tabPanes = this.getTabPanes();\n\t      var tabStyle = {\n\t        marginLeft: 0,\n\t        marginBottom: '5px'\n\t      };\n\t\n\t      return React.createElement(\n\t        'div',\n\t        null,\n\t        React.createElement(\n\t          'ul',\n\t          { className: 'nav nav-tabs', role: 'tablist', style: tabStyle },\n\t          tabs\n\t        ),\n\t        React.createElement(\n\t          'div',\n\t          { className: 'tab-content' },\n\t          tabPanes\n\t        )\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return Tabs;\n\t}(React.Component);\n\t\n\tTabs.propTypes = {\n\t  tabs: React.PropTypes.array.isRequired,\n\t  defaultTab: React.PropTypes.string,\n\t  updateURL: React.PropTypes.bool\n\t};\n\tTabs.defaultProps = {\n\t  onTabChange: function onTabChange() {},\n\t  // Set updateURL to default to true but allow for change\n\t  // Nested tabs should set this variable to false\n\t  updateURL: true\n\t};\n\t\n\t/**\n\t * Allows to dynamically render vertical tabs corresponding to tab panes.\n\t */\n\t\n\tvar VerticalTabs = function (_React$Component2) {\n\t  _inherits(VerticalTabs, _React$Component2);\n\t\n\t  function VerticalTabs(props) {\n\t    _classCallCheck(this, VerticalTabs);\n\t\n\t    var _this2 = _possibleConstructorReturn(this, (VerticalTabs.__proto__ || Object.getPrototypeOf(VerticalTabs)).call(this, props));\n\t\n\t    var hash = window.location.hash;\n\t    var activeTab = \"\";\n\t\n\t    /**\n\t     * Determine the initial active tab in this order\n\t     * 1. Try to infer from the URL, otherwise\n\t     * 2. Try to infer from the defaultTab prop, otherwise\n\t     * 3. Set to be the first tab of the list\n\t     */\n\t    if (_this2.props.updateURL && hash) {\n\t      activeTab = hash.substr(1);\n\t    } else if (_this2.props.defaultTab) {\n\t      activeTab = _this2.props.defaultTab;\n\t    } else if (_this2.props.tabs.length > 0) {\n\t      activeTab = _this2.props.tabs[0].id;\n\t    }\n\t\n\t    _this2.state = {\n\t      activeTab: activeTab\n\t    };\n\t\n\t    _this2.handleClick = _this2.handleClick.bind(_this2);\n\t    _this2.getTabs = _this2.getTabs.bind(_this2);\n\t    _this2.getTabPanes = _this2.getTabPanes.bind(_this2);\n\t    return _this2;\n\t  }\n\t\n\t  _createClass(VerticalTabs, [{\n\t    key: 'handleClick',\n\t    value: function handleClick(tabId, e) {\n\t      this.setState({ activeTab: tabId });\n\t      this.props.onTabChange(tabId);\n\t\n\t      // Add tab href to URL querystring and scroll the page to top\n\t      if (this.props.updateURL) {\n\t        var scrollDistance = $('body').scrollTop() || $('html').scrollTop();\n\t        window.location.hash = e.target.hash;\n\t        $('html,body').scrollTop(scrollDistance);\n\t      }\n\t    }\n\t  }, {\n\t    key: 'getTabs',\n\t    value: function getTabs() {\n\t      var tabs = this.props.tabs.map(function (tab) {\n\t        var tabClass = this.state.activeTab === tab.id ? 'active' : null;\n\t        var href = \"#\" + tab.id;\n\t        var tabID = \"tab-\" + tab.id;\n\t        return React.createElement(\n\t          'li',\n\t          {\n\t            role: 'presentation',\n\t            className: tabClass,\n\t            key: tab.id\n\t          },\n\t          React.createElement(\n\t            'a',\n\t            { id: tabID,\n\t              href: href,\n\t              role: 'tab',\n\t              'data-toggle': 'tab',\n\t              onClick: this.handleClick.bind(null, tab.id)\n\t            },\n\t            tab.label\n\t          )\n\t        );\n\t      }.bind(this));\n\t\n\t      return tabs;\n\t    }\n\t  }, {\n\t    key: 'getTabPanes',\n\t    value: function getTabPanes() {\n\t      var tabPanes = React.Children.map(this.props.children, function (child, key) {\n\t        if (child) {\n\t          return React.cloneElement(child, {\n\t            activeTab: this.state.activeTab,\n\t            key: key\n\t          });\n\t        }\n\t      }.bind(this));\n\t\n\t      return tabPanes;\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t      var tabs = this.getTabs();\n\t      var tabPanes = this.getTabPanes();\n\t      var tabStyle = {\n\t        marginLeft: 0,\n\t        marginBottom: '5px'\n\t      };\n\t\n\t      return React.createElement(\n\t        'div',\n\t        null,\n\t        React.createElement(\n\t          'div',\n\t          { className: 'tabbable col-md-3 col-sm-3' },\n\t          React.createElement(\n\t            'ul',\n\t            { className: 'nav nav-pills nav-stacked', role: 'tablist', style: tabStyle },\n\t            tabs\n\t          )\n\t        ),\n\t        React.createElement(\n\t          'div',\n\t          { className: 'tab-content col-md-9 col-sm-9' },\n\t          tabPanes\n\t        )\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return VerticalTabs;\n\t}(React.Component);\n\t\n\tVerticalTabs.propTypes = {\n\t  tabs: React.PropTypes.array.isRequired,\n\t  defaultTab: React.PropTypes.string,\n\t  updateURL: React.PropTypes.bool\n\t};\n\tVerticalTabs.defaultProps = {\n\t  onTabChange: function onTabChange() {},\n\t  // Set updateURL to default to true but allow for change\n\t  // Nested tabs should set this variable to false\n\t  updateURL: true\n\t};\n\t\n\t/*\n\t * TabPane component.\n\t * Used to wrap content for every tab.\n\t */\n\t\n\tvar TabPane = function (_React$Component3) {\n\t  _inherits(TabPane, _React$Component3);\n\t\n\t  function TabPane() {\n\t    _classCallCheck(this, TabPane);\n\t\n\t    return _possibleConstructorReturn(this, (TabPane.__proto__ || Object.getPrototypeOf(TabPane)).apply(this, arguments));\n\t  }\n\t\n\t  _createClass(TabPane, [{\n\t    key: 'render',\n\t    value: function render() {\n\t      var classList = \"tab-pane\";\n\t      var title = void 0;\n\t\n\t      if (this.props.TabId === this.props.activeTab) {\n\t        classList += \" active\";\n\t      }\n\t      if (this.props.Title) {\n\t        title = React.createElement(\n\t          'h1',\n\t          null,\n\t          this.props.Title\n\t        );\n\t      }\n\t\n\t      return React.createElement(\n\t        'div',\n\t        { role: 'tabpanel', className: classList, id: this.props.TabId },\n\t        title,\n\t        this.props.children\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return TabPane;\n\t}(React.Component);\n\t\n\tTabPane.propTypes = {\n\t  TabId: React.PropTypes.string.isRequired,\n\t  Title: React.PropTypes.string,\n\t  activeTab: React.PropTypes.string\n\t};\n\t\n\texports.Tabs = Tabs;\n\texports.VerticalTabs = VerticalTabs;\n\texports.TabPane = TabPane;\n\n/***/ },\n/* 11 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _Modal = __webpack_require__(12);\n\t\n\tvar _Modal2 = _interopRequireDefault(_Modal);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * This file contains React components for Modal component.\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author Henri Rabalais\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @version 1.1.0\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */\n\t\n\t/**\n\t * Modal Component.\n\t * React wrapper for a Modal Window. Allows to dynamically toggle a Modal window.\n\t *\n\t * ================================================\n\t * Usage:\n\t *\n\t * =================================================\n\t *\n\t */\n\t\n\tvar FormModal = function (_React$Component) {\n\t  _inherits(FormModal, _React$Component);\n\t\n\t  function FormModal(props) {\n\t    _classCallCheck(this, FormModal);\n\t\n\t    var _this = _possibleConstructorReturn(this, (FormModal.__proto__ || Object.getPrototypeOf(FormModal)).call(this, props));\n\t\n\t    _this.state = { show: false, throwWarning: false };\n\t\n\t    _this.openModal = _this.openModal.bind(_this);\n\t    _this.closeModal = _this.closeModal.bind(_this);\n\t    _this.confirmClose = _this.confirmClose.bind(_this);\n\t    _this.setWarning = _this.setWarning.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(FormModal, [{\n\t    key: \"renderChildren\",\n\t    value: function renderChildren() {\n\t      var _this2 = this;\n\t\n\t      return React.Children.map(this.props.children, function (child) {\n\t        return React.cloneElement(child, { onSuccess: _this2.closeModal, onChange: _this2.setWarning });\n\t      });\n\t    }\n\t  }, {\n\t    key: \"openModal\",\n\t    value: function openModal() {\n\t      this.setState({\n\t        show: true\n\t      });\n\t    }\n\t  }, {\n\t    key: \"setWarning\",\n\t    value: function setWarning() {\n\t      this.setState({\n\t        throwWarning: true\n\t      });\n\t    }\n\t  }, {\n\t    key: \"confirmClose\",\n\t    value: function confirmClose() {\n\t      if (this.state.throwWarning) {\n\t        swal({\n\t          title: \"Are You Sure?\",\n\t          text: \"Leaving the form will result in the loss of any information entered.\",\n\t          type: \"warning\",\n\t          showCancelButton: true,\n\t          confirmButtonText: 'Proceed',\n\t          cancelButtonText: 'Cancel'\n\t        }, function () {\n\t          this.closeModal();\n\t        }.bind(this));\n\t      } else {\n\t        this.closeModal();\n\t      }\n\t    }\n\t  }, {\n\t    key: \"closeModal\",\n\t    value: function closeModal() {\n\t      this.setState({\n\t        show: false,\n\t        throwWarning: false\n\t      });\n\t    }\n\t  }, {\n\t    key: \"render\",\n\t    value: function render() {\n\t      return React.createElement(\n\t        _Modal2.default,\n\t        _extends({\n\t          closeModal: this.confirmClose,\n\t          openModal: this.openModal,\n\t          show: this.state.show\n\t        }, this.props),\n\t        this.renderChildren()\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return FormModal;\n\t}(React.Component);\n\t\n\tFormModal.propTypes = {\n\t  title: React.PropTypes.string,\n\t  buttonClass: React.PropTypes.string,\n\t  buttonStyle: React.PropTypes.object,\n\t  buttonContent: React.PropTypes.object\n\t};\n\tFormModal.defaultProps = {\n\t  buttonClass: 'btn btn-primary'\n\t};\n\t\n\texports.default = FormModal;\n\n/***/ },\n/* 12 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * This file contains React components for Modal component.\n\t *\n\t * @author Henri Rabalais\n\t * @version 1.1.0\n\t *\n\t */\n\t\n\t/**\n\t * Modal Component.\n\t * React wrapper for a Modal Window. Allows to dynamically toggle a Modal window.\n\t *\n\t * ================================================\n\t * Usage:\n\t *\n\t * =================================================\n\t *\n\t */\n\tvar Modal = function (_React$Component) {\n\t  _inherits(Modal, _React$Component);\n\t\n\t  function Modal(props) {\n\t    _classCallCheck(this, Modal);\n\t\n\t    return _possibleConstructorReturn(this, (Modal.__proto__ || Object.getPrototypeOf(Modal)).call(this, props));\n\t  }\n\t\n\t  _createClass(Modal, [{\n\t    key: 'render',\n\t    value: function render() {\n\t      // Black Background with Alpha Channel\n\t      var backdropStyle = {\n\t        position: 'fixed',\n\t        zIndex: 9998,\n\t        top: 0,\n\t        bottom: 0,\n\t        left: 0,\n\t        right: 0,\n\t        backgroundColor: 'rgba(0,0,0,0.3)',\n\t        padding: 50\n\t      };\n\t\n\t      // White Modal Window\n\t      var modalStyle = {\n\t        position: 'relative',\n\t        maxWidth: 1000,\n\t        maxHeight: '100%',\n\t        margin: '0 auto',\n\t        backgroundColor: '#fff',\n\t        borderRadius: 10,\n\t        overflowY: 'auto',\n\t        zIndex: 9999\n\t      };\n\t\n\t      var titleStyle = {\n\t        display: 'flex',\n\t        flexDirection: 'row',\n\t        alignItems: 'center',\n\t        background: '#093782',\n\t        height: '70px',\n\t        borderTopRightRadius: '10',\n\t        color: '#FFFFFF',\n\t        fontSize: 24,\n\t        padding: 20\n\t      };\n\t\n\t      var glyphStyle = {\n\t        marginLeft: 'auto',\n\t        cursor: 'pointer'\n\t      };\n\t\n\t      var bodyStyle = {\n\t        padding: 15\n\t      };\n\t\n\t      var button = React.createElement(\n\t        'button',\n\t        {\n\t          type: 'button',\n\t          className: this.props.buttonClass,\n\t          onClick: this.props.openModal,\n\t          style: this.props.buttonStyle\n\t        },\n\t        this.props.buttonContent\n\t      );\n\t\n\t      var modal;\n\t      if (this.props.show) {\n\t        modal = React.createElement(\n\t          'div',\n\t          { style: backdropStyle, onClick: this.props.closeModal },\n\t          React.createElement(\n\t            'div',\n\t            {\n\t              style: modalStyle,\n\t              onClick: function onClick(e) {\n\t                e.stopPropagation();\n\t              }\n\t            },\n\t            React.createElement(\n\t              'div',\n\t              {\n\t                style: titleStyle\n\t              },\n\t              this.props.title,\n\t              React.createElement('span', {\n\t                className: 'glyphicon glyphicon-remove',\n\t                style: glyphStyle,\n\t                onClick: this.props.closeModal\n\t              })\n\t            ),\n\t            React.createElement(\n\t              'div',\n\t              {\n\t                style: bodyStyle\n\t              },\n\t              this.props.children\n\t            )\n\t          )\n\t        );\n\t      }\n\t\n\t      return React.createElement(\n\t        'div',\n\t        null,\n\t        button,\n\t        modal\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return Modal;\n\t}(React.Component);\n\t\n\tModal.propTypes = {\n\t  title: React.PropTypes.string,\n\t  buttonClass: React.PropTypes.string,\n\t  buttonStyle: React.PropTypes.object,\n\t  buttonContent: React.PropTypes.object,\n\t  show: React.PropTypes.boolean,\n\t  closeModal: React.PropTypes.func,\n\t  openModal: React.PropTypes.func\n\t};\n\tModal.defaultProps = {\n\t  buttonClass: 'btn btn-primary'\n\t};\n\t\n\texports.default = Modal;\n\n/***/ },\n/* 13 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * This file contains React component for Loader\n\t *\n\t * @author Henri Rabalais\n\t * @version 1.0.0\n\t *\n\t */\n\t\n\t/**\n\t * Loader component\n\t */\n\tvar Loader = function (_React$Component) {\n\t  _inherits(Loader, _React$Component);\n\t\n\t  function Loader(props) {\n\t    _classCallCheck(this, Loader);\n\t\n\t    return _possibleConstructorReturn(this, (Loader.__proto__ || Object.getPrototypeOf(Loader)).call(this, props));\n\t  }\n\t\n\t  _createClass(Loader, [{\n\t    key: \"render\",\n\t    value: function render() {\n\t\n\t      return React.createElement(\n\t        \"div\",\n\t        { className: \"loader-container\" },\n\t        React.createElement(\"div\", { className: \"loader\" })\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return Loader;\n\t}(React.Component);\n\t\n\texports.default = Loader;\n\n/***/ },\n/* 14 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t/**\n\t * Modify behaviour of specified column cells in the Data Table component\n\t * @param {string} column - column name\n\t * @param {string} cell - cell content\n\t * @param {arrray} rowData - array of cell contents for a specific row\n\t * @param {arrray} rowHeaders - array of table headers (column names)\n\t * @return {*} a formated table cell for a given column\n\t */\n\tfunction formatColumn(column, cell, rowData, rowHeaders) {\n\t  // If a column if set as hidden, don't display it\n\t  //if (loris.hiddenHeaders.indexOf(column) > -1) {\n\t  //  return null;\n\t  //}\n\t\n\t  // Create the mapping between rowHeaders and rowData in a row object.\n\t  var row = {};\n\t  rowHeaders.forEach(function (header, index) {\n\t    row[header] = rowData[index];\n\t  }, this);\n\t\n\t  // create array of classes to be added to td tag\n\t  var classes = [];\n\t\n\t  // convert array to string, with blank space separator\n\t  classes = classes.join(\" \");\n\t\n\t  //const hasWritePermission = loris.userHasPermission('media_read');\n\t  if (column === 'Barcode') {\n\t    var specimenURL = loris.BaseURL + \"/biobank/specimen/?barcode=\" + row['Barcode'];\n\t    return React.createElement(\n\t      \"td\",\n\t      { className: classes },\n\t      React.createElement(\n\t        \"a\",\n\t        { href: specimenURL },\n\t        cell\n\t      )\n\t    );\n\t  }\n\t\n\t  if (column === 'Parent Barcode') {\n\t    var specimenURL = loris.BaseURL + \"/biobank/specimen/?barcode=\" + row['Parent Barcode'];\n\t    return React.createElement(\n\t      \"td\",\n\t      { className: classes },\n\t      React.createElement(\n\t        \"a\",\n\t        { href: specimenURL },\n\t        cell\n\t      )\n\t    );\n\t  }\n\t\n\t  if (column === 'Container Barcode') {\n\t    var containerURL = loris.BaseURL + \"/biobank/container/?barcode=\" + row['Container Barcode'];\n\t    return React.createElement(\n\t      \"td\",\n\t      { className: classes },\n\t      React.createElement(\n\t        \"a\",\n\t        { href: containerURL },\n\t        cell\n\t      )\n\t    );\n\t  }\n\t\n\t  // if (column === 'Visit Label') {\n\t  //   if (row[\"Cand ID\"] !== null && row[\"Session ID\"]) {\n\t  //     var sessionURL = loris.BaseURL + \"/instrument_list/?candID=\" +\n\t  //       row[\"Cand ID\"] + \"&sessionID=\" + row[\"Session ID\"];\n\t  //     return <td className={classes}><a href={sessionURL}>{cell}</a></td>;\n\t  //   }\n\t  // }\n\t\n\t  // if (column === 'Edit Metadata') {\n\t  //   var editURL = loris.BaseURL + \"/biobank/edit/?id=\" + row['Edit Metadata'];\n\t  //   return <td className={classes}><a href={editURL}>Edit</a></td>;\n\t  // }\n\t\n\t  return React.createElement(\n\t    \"td\",\n\t    { className: classes },\n\t    cell\n\t  );\n\t}\n\t\n\texports.default = formatColumn;\n\n/***/ },\n/* 15 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t/**\n\t * Modify behaviour of specified column cells in the Data Table component\n\t * @param {string} column - column name\n\t * @param {string} cell - cell content\n\t * @param {arrray} rowData - array of cell contents for a specific row\n\t * @param {arrray} rowHeaders - array of table headers (column names)\n\t * @return {*} a formated table cell for a given column\n\t */\n\tfunction formatColumn(column, cell, rowData, rowHeaders) {\n\t  // If a column if set as hidden, don't display it\n\t  //if (loris.hiddenHeaders.indexOf(column) > -1) {\n\t  //  return null;\n\t  //}\n\t\n\t  // Create the mapping between rowHeaders and rowData in a row object.\n\t  var row = {};\n\t  rowHeaders.forEach(function (header, index) {\n\t    row[header] = rowData[index];\n\t  }, this);\n\t\n\t  // create array of classes to be added to td tag\n\t  var classes = [];\n\t\n\t  // convert array to string, with blank space separator\n\t  classes = classes.join(\" \");\n\t\n\t  //const hasWritePermission = loris.userHasPermission('media_read');\n\t  if (column === 'Barcode') {\n\t    var containerURL = loris.BaseURL + \"/biobank/container/?barcode=\" + row['Barcode'];\n\t    return React.createElement(\n\t      \"td\",\n\t      { className: classes },\n\t      React.createElement(\n\t        \"a\",\n\t        { href: containerURL },\n\t        cell\n\t      )\n\t    );\n\t  }\n\t\n\t  if (column === 'Parent Barcode') {\n\t    var specimenURL = loris.BaseURL + \"/biobank/container/?barcode=\" + row['Parent Barcode'];\n\t    return React.createElement(\n\t      \"td\",\n\t      { className: classes },\n\t      React.createElement(\n\t        \"a\",\n\t        { href: containerURL },\n\t        cell\n\t      )\n\t    );\n\t  }\n\t\n\t  // if (column === 'Visit Label') {\n\t  //   if (row[\"Cand ID\"] !== null && row[\"Session ID\"]) {\n\t  //     var sessionURL = loris.BaseURL + \"/instrument_list/?candID=\" +\n\t  //       row[\"Cand ID\"] + \"&sessionID=\" + row[\"Session ID\"];\n\t  //     return <td className={classes}><a href={sessionURL}>{cell}</a></td>;\n\t  //   }\n\t  // }\n\t\n\t  // if (column === 'Edit Metadata') {\n\t  //   var editURL = loris.BaseURL + \"/biobank/edit/?id=\" + row['Edit Metadata'];\n\t  //   return <td className={classes}><a href={editURL}>Edit</a></td>;\n\t  // }\n\t\n\t  return React.createElement(\n\t    \"td\",\n\t    { className: classes },\n\t    cell\n\t  );\n\t}\n\t\n\texports.default = formatColumn;\n\n/***/ }\n/******/ ]);\n\n\n// WEBPACK FOOTER //\n// modules/biobank/js/biobankIndex.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 06bca935612d95d005f6","import FilterForm from 'FilterForm';\nimport BiobankSpecimenForm from './specimenForm';\nimport BiobankContainerForm from './containerForm';\nimport {Tabs, TabPane} from 'Tabs';\nimport FormModal from 'FormModal';\nimport Loader from 'Loader';\nimport formatColumnSpecimen from './columnFormatterSpecimen';\nimport formatColumnContainer from './columnFormatterContainer';\n\nclass BiobankIndex extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isLoaded: false,\n      specimenFilter: {},\n      containerFilter: {},\n      isOpen: false,\n      formOptions: {},\n    };\n\n    // Bind component instance to custom methods\n    this.loadPage = this.loadPage.bind(this);\n    this.fetchSpecimenData = this.fetchSpecimenData.bind(this);\n    this.fetchFormOptions = this.fetchFormOptions.bind(this);\n    this.fetchContainerData = this.fetchContainerData.bind(this);\n    this.updateSpecimenFilter = this.updateSpecimenFilter.bind(this);\n    this.updateContainerFilter = this.updateContainerFilter.bind(this);\n    this.resetFilters = this.resetFilters.bind(this);\n    this.mapFormOptions = this.mapFormOptions.bind(this);\n  }\n\n  componentDidMount() {\n    this.loadPage();\n  }\n\n  loadPage() {\n    this.fetchSpecimenData();\n    this.fetchFormOptions();\n    this.fetchContainerData();\n  }\n  /**\n   * Retrieve data from the provided URL and save it in state\n   * Additionaly add hiddenHeaders to global loris variable\n   * for easy access by columnFormatter.\n   */\n  fetchSpecimenData() {\n    $.ajax(this.props.specimenDataURL, {\n      method: \"GET\",\n      dataType: 'json',\n      success: function(data) {\n        this.setState({\n          specimenData: data,\n          isLoaded: true\n        });\n      }.bind(this),\n      error: function(error) {\n        console.error(error);\n      }\n    });\n  }\n\n  fetchContainerData() {\n    $.ajax(this.props.containerDataURL, {\n      method: \"GET\",\n      dataType: 'json',\n      success: function(data) {\n        this.setState({\n          containerData: data,\n          isLoaded: true\n        });\n      }.bind(this),\n      error: function(error) {\n        console.error(error);\n      }\n    });\n  }\n\n  fetchFormOptions() {\n    $.ajax(this.props.formDataURL, {\n      method: \"GET\",\n      dataType: 'json',\n      success: function(data) {\n        this.setState({\n          formOptions: data,\n          isLoaded: true\n        });\n      }.bind(this),\n      error: function(error) {\n        console.error(error);\n      }\n    });\n  }\n\n  updateSpecimenFilter(specimenFilter) {\n    this.setState({specimenFilter});\n  }\n\n  // This works,\n  // but there must be a way to do this with just one updateFilter function\n  updateContainerFilter(containerFilter) {\n    this.setState({containerFilter});\n  }\n\n  resetFilters() {\n    this.refs.biobankFilter.clearFilter();\n  }\n\n //map options for forms\n  mapFormOptions(rawObject, targetAttribute) {\n    var data = {}; \n    for (var id in rawObject) {\n      data[id] = rawObject[id][targetAttribute];\n    }   \n\n    return data;\n  }\n\n  render() {\n    // Waiting for async data to load\n    if (!this.state.isLoaded) {\n      return (\n        <Loader/>\n      );\n    }\n\n    let addSpecimenButton;\n    let addContainerButton;\n    if (loris.userHasPermission('biobank_write')) {\n\n       /**\n        * Map Options for Form Select Elements of Specimen Form\n        */\n       let specimenTypes = this.mapFormOptions(this.state.formOptions.specimenTypes, 'type');\n       let containerTypesPrimary = this.mapFormOptions(this.state.formOptions.containerTypesPrimary, 'label');\n        \n       let specimenButtonContent = (\n         <div>\n           <span\n             className='glyphicon glyphicon-plus'\n             style={{marginRight: '5px'}}\n           />\n           Add Specimen\n         </div>\n       );\n\n       addSpecimenButton = (\n         <FormModal\n           title='Add New Specimen'\n           buttonClass='btn btn-success'\n           buttonStyle={{marginLeft: '10px', border: 'none'}}\n           buttonContent={specimenButtonContent}\n           throwWarning={true}\n         >\n           <BiobankSpecimenForm\n             specimenTypes={specimenTypes}\n             containerTypesPrimary={containerTypesPrimary}\n             containersNonPrimary={this.state.formOptions.containersNonPrimary}\n             specimenTypeAttributes={this.state.formOptions.specimenTypeAttributes}\n             attributeDatatypes={this.state.formOptions.attributeDatatypes}\n             capacities={this.state.formOptions.capacities}\n             containerDimensions={this.state.formOptions.containerDimensions}\n             containerCoordinates={this.state.formOptions.containerCoordinates}\n             specimenTypeUnits={this.state.formOptions.specimenTypeUnits}\n             pSCIDs={this.state.formOptions.pSCIDs}\n             visits={this.state.formOptions.visits}\n             sessionData={this.state.formOptions.sessionData}\n             action={`${loris.BaseURL}/biobank/ajax/SpecimenInfo.php?action=submitSpecimen`}\n             refreshParent={this.loadPage}\n           />\n         </FormModal>\n       );\n\n       let containerTypesNonPrimary = this.mapFormOptions(this.state.formOptions.containerTypesNonPrimary, 'label');\n\n       let containerButtonContent = (\n         <div>\n           <span\n             className='glyphicon glyphicon-plus'\n             style={{marginRight: '5px'}}\n           />\n           Add Container\n         </div>\n       );\n\n       addContainerButton = (\n         <FormModal\n           title='Add New Container'\n           buttonClass='btn btn-success'\n           buttonStyle={{marginLeft: '10px', border: 'none'}}\n           buttonContent={containerButtonContent}\n         >\n           <BiobankContainerForm\n             containerTypesNonPrimary={containerTypesNonPrimary}\n             sites={this.state.formOptions.sites}\n             action={`${loris.BaseURL}/biobank/ajax/ContainerInfo.php?action=submitContainer`}\n             refreshParent={this.loadPage}\n           />\n         </FormModal>\n       ); \n    }\n\n    //Look at CCNA code from Zaliqa to modify this to be more streamline\n    var tabList = [\n      {id: \"specimens\", label: \"Specimens\"},\n      {id: \"containers\", label: \"Containers\"}\n    ];\n\n    return (\n    <div id='biobank-page'>\n      <Tabs tabs={tabList} defaultTab=\"specimens\" updateURL={true}>\n        <TabPane TabId={tabList[0].id}>\n          <FilterForm\n            Module=\"biobank\"\n            name=\"specimen_filter\"\n            id=\"specimen_filter\"\n            ref=\"specimenFilter\"\n            columns={3}\n            formElements={this.state.specimenData.form}\n            onUpdate={this.updateSpecimenFilter}\n            filter={this.state.specimenFilter}\n          >\n            <br/>\n            <StaticElement text={addSpecimenButton}/>\n            <StaticElement/>\n            <ButtonElement label=\"Clear Filters\" type=\"reset\" onUserInput={this.resetFilters}/>\n          </FilterForm>\n          <StaticDataTable\n            Data={this.state.specimenData.Data}\n            Headers={this.state.specimenData.Headers}\n            Filter={this.state.specimenFilter}\n            getFormattedCell={formatColumnSpecimen}\n          />\n        </TabPane>\n        <TabPane TabId={tabList[1].id}>\n          <FilterForm\n            Module=\"biobank\"\n            name=\"container_filter\"\n            id=\"container_filter\"\n            ref=\"containerFilter\"\n            columns={3}\n            formElements={this.state.containerData.form}\n            onUpdate={this.updateContainerFilter}\n            filter={this.state.containerFilter}\n\t\t  >\n            <br/>\n            <StaticElement text={addContainerButton}/>\n            <StaticElement/>\n            <ButtonElement label=\"Clear Filters\" type=\"reset\" onUserInput={this.resetFilters}/>\n          </FilterForm>\t\t\t\n          <StaticDataTable\n            Data={this.state.containerData.Data}\n            Headers={this.state.containerData.Headers}\n            Filter={this.state.containerFilter}\n            getFormattedCell={formatColumnContainer}\n          />\n        </TabPane>\n      </Tabs>\n      </div>\n    );\n  }\n}\n\n$(function() {\n  const biobankIndex = (\n    <div className=\"page-biobank\">\n      <BiobankIndex \n        specimenDataURL={`${loris.BaseURL}/biobank/?format=json`} \n        containerDataURL={`${loris.BaseURL}/biobank/ajax/ContainerInfo.php?action=getContainerFilterData`} \n        formDataURL={`${loris.BaseURL}/biobank/ajax/SpecimenInfo.php?action=getFormOptions`}\n      />\n    </div>\n  );\n\n  ReactDOM.render(biobankIndex, document.getElementById(\"lorisworkspace\"));\n});\n\n\n\n// WEBPACK FOOTER //\n// ./modules/biobank/jsx/biobankIndex.js","/**\n * This file contains React component for FilterForm\n *\n * @author Loris Team\n * @version 1.1.0\n *\n */\n\nimport Panel from 'Panel';\n\n/**\n * FilterForm component.\n * A wrapper for form elements inside a selection filter.\n *\n * Adds necessary filter callbacks to all children and passes them to FormElement\n * for proper rendering.\n *\n * Keeps track of filter object and sends it to parent on every update.\n *\n * //HACK/NOTE: Loris has special behaviour for `candID` attribute in the query string,\n * making it impossible to use it for selection filters. This components renames\n * all `candID` fields to `candidateID` automatically before appending them to URL.\n *\n */\nclass FilterForm extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    // Bind component instance to custom methods\n    this.clearFilter = this.clearFilter.bind(this);\n    this.getFormChildren = this.getFormChildren.bind(this);\n    this.setFilter = this.setFilter.bind(this);\n    this.onElementUpdate = this.onElementUpdate.bind(this);\n\n    // Keeps track of querystring values\n    // Saved as class variable instead of keeping in state\n    this.queryString = QueryString.get();\n  }\n\n  componentDidMount() {\n    let filter = {};\n    let queryString = this.queryString;\n\n    // Initiaze filter using querystring value\n    Object.keys(queryString).forEach(function(key) {\n      let filterKey = (key === 'candidateID') ? 'candID' : key;\n      filter[filterKey] = {\n        value: queryString[key],\n        exactMatch: false\n      };\n    });\n\n    // Update parent component\n    this.props.onUpdate(filter);\n  }\n\n  /**\n   * Clear the filter object, querystring and input fields\n   */\n  clearFilter() {\n    this.queryString = QueryString.clear(this.props.Module);\n    this.props.onUpdate({});\n  }\n\n  /**\n   * Itterates through FilterForm children, sets necessary callback functions\n   * and initializes filterTable\n   *\n   * @return {Array} formChildren - array of children with necessary props\n   */\n  getFormChildren() {\n    let formChildren = [];\n    React.Children.forEach(this.props.children, function(child, key) {\n      // If child is a React component (i.e not a simple DOM element)\n      if (React.isValidElement(child) &&\n        typeof child.type === \"function\" &&\n        child.props.onUserInput\n      ) {\n        let callbackFunc = child.props.onUserInput;\n        let callbackName = callbackFunc.name;\n        let elementName = child.type.displayName;\n        let queryFieldName = (child.props.name === 'candID') ? 'candidateID' : child.props.name;\n        let filterValue = this.queryString[queryFieldName];\n        // If callback function was not set, set it to onElementUpdate() for form\n        // elements and to clearFilter() for <ButtonElement type='reset'/>.\n        if (callbackName === \"onUserInput\") {\n          if (elementName === \"ButtonElement\" && child.props.type === \"reset\") {\n            callbackFunc = this.clearFilter;\n          } else {\n            callbackFunc = this.onElementUpdate.bind(null, elementName);\n          }\n        }\n        // Pass onUserInput and value props to all children\n        formChildren.push(React.cloneElement(child, {\n          onUserInput: callbackFunc,\n          value: filterValue ? filterValue : '',\n          key: key\n        }));\n        // Initialize filter for StaticDataTable\n        this.setFilter(elementName, child.props.name, filterValue);\n      } else {\n        formChildren.push(React.cloneElement(child, {key: key}));\n      }\n    }.bind(this));\n\n    return formChildren;\n  }\n\n  /**\n   * Appends entry to filter object or deletes it if value is\n   * empty.\n   *\n   * Sets exactMatch to true for all SelectElements (i.e dropdowns)\n   * in order to force StaticDataTable to do exact comparaison\n   *\n   * @param {string} type - form element type (i.e component name)\n   * @param {string} key - the name of the form element\n   * @param {string} value - the value of the form element\n   *\n   * @return {{}} filter - filterData\n   */\n  setFilter(type, key, value) {\n    let filter = {};\n    if (this.props.filter) {\n      filter = JSON.parse(JSON.stringify(this.props.filter));\n    }\n\n    if (key && value) {\n      filter[key] = {};\n      filter[key].value = value;\n      filter[key].exactMatch = (type === \"SelectElement\");\n    } else if (filter && key && value === '') {\n      delete filter[key];\n    }\n\n    return filter;\n  }\n\n  /**\n   * Sets filter object and querystring to reflect values of input fields\n   *\n   * @param {string} type - form element type (i.e component name)\n   * @param {string} fieldName - the name of the form element\n   * @param {string} fieldValue - the value of the form element\n   */\n  onElementUpdate(type, fieldName, fieldValue) {\n    // Make sure both key/value are string before sending them to querystring\n    if (typeof fieldName !== \"string\" || typeof fieldValue !== \"string\") {\n      return;\n    }\n\n    // Update query string\n    let queryFieldName = (fieldName === 'candID') ? 'candidateID' : fieldName;\n    this.queryString = QueryString.set(this.queryString, queryFieldName, fieldValue);\n\n    // Update filter and get new filter object\n    let filter = this.setFilter(type, fieldName, fieldValue);\n    this.props.onUpdate(filter);\n  }\n\n  render() {\n    // Get formatted children\n    let formChildren = this.getFormChildren();\n    let formElements = this.props.formElements;\n\n    if (formElements) {\n      Object.keys(formElements).forEach(function(fieldName) {\n        let queryFieldName = (fieldName === 'candID') ? 'candidateID' : fieldName;\n        formElements[fieldName].onUserInput = this.onElementUpdate.bind(null, fieldName);\n        formElements[fieldName].value = this.queryString[queryFieldName];\n      }.bind(this));\n    }\n\n    return (\n      <Panel\n        id={this.props.id}\n        height={this.props.height}\n        title={this.props.title}\n      >\n        <FormElement {...this.props}>\n          {formChildren}\n        </FormElement>\n      </Panel>\n    );\n  }\n}\n\nFilterForm.defaultProps = {\n  id: 'selection-filter',\n  height: '100%',\n  title: 'Selection Filter',\n  onUpdate: function() {\n    console.warn('onUpdate() callback is not set!');\n  }\n};\nFilterForm.propTypes = {\n  Module: React.PropTypes.string.isRequired,\n  filter: React.PropTypes.object.isRequired,\n  id: React.PropTypes.string,\n  height: React.PropTypes.string,\n  title: React.PropTypes.string,\n  onUpdate: React.PropTypes.func\n};\n\nexport default FilterForm;\n\n\n\n// WEBPACK FOOTER //\n// ./jsx/FilterForm.js","/**\n * This file contains React component for Panel\n *\n * @author Alex I.\n * @version 1.0.0\n *\n */\n\n/**\n * Panel component\n * Wraps children in a collapsible bootstrap panel\n */\nclass Panel extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      collapsed: this.props.initCollapsed\n    };\n\n    // Initialize panel class based on collapsed status\n    this.panelClass = (\n      this.props.initCollapsed ?\n        \"panel-collapse collapse\" :\n        \"panel-collapse collapse in\"\n    );\n\n    this.toggleCollapsed = this.toggleCollapsed.bind(this);\n  }\n\n  toggleCollapsed() {\n    this.setState({collapsed: !this.state.collapsed});\n  }\n\n  render() {\n    // Change arrow direction based on collapse status\n    let glyphClass = (\n      this.state.collapsed ?\n        \"glyphicon pull-right glyphicon-chevron-down\" :\n        \"glyphicon pull-right glyphicon-chevron-up\"\n    );\n\n    let pencilGlyph;\n    if (this.props.edit) {\n      pencilGlyph = (\n        <span\n          className=\"glyphicon pull-right glyphicon-pencil\"\n          style={{marginRight:'10px', cursor: 'pointer'}}\n          onClick={this.props.edit}\n        /> \n      );\n    } \n\n    let plusGlyph;\n    if (this.props.add) {\n      plusGlyph = (\n        <span\n          className=\"glyphicon pull-right glyphicon-plus\"\n          style={{marginRight:'10px', cursor: 'pointer'}}\n          onClick={this.props.add}\n        />\n      );\n    }\n\n    let removeGlyph;\n    if (this.props.cancel) {\n      removeGlyph = (\n        <span\n          className=\"glyphicon pull-right glyphicon-remove\"\n          style={{marginRight:'10px', cursor: 'pointer'}}\n          onClick={this.props.cancel}\n        />\n      );\n    }\n\n    // Add panel header, if title is set\n    const panelHeading = this.props.title ? (\n      <div\n        className=\"panel-heading\"\n      >\n        <span \n          className={glyphClass}\n          onClick={this.toggleCollapsed}\n          data-toggle=\"collapse\"\n          data-target={'#' + this.props.id}\n          style={{cursor: 'pointer'}}\n        />\n        {pencilGlyph}\n        {plusGlyph}\n        {removeGlyph}\n        {this.props.title}\n      </div>\n    ) : '';\n\n    return (\n      <div className=\"panel panel-primary\">\n        {panelHeading}\n        <div id={this.props.id} className={this.panelClass} role=\"tabpanel\">\n          <div className=\"panel-body\" style={{height: this.props.height}}>\n            {this.props.children}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nPanel.propTypes = {\n  id: React.PropTypes.string,\n  height: React.PropTypes.string,\n  title: React.PropTypes.string,\n  edit: React.PropTypes.func,\n  add: React.PropTypes.func\n};\nPanel.defaultProps = {\n  initCollapsed: false,\n  id: 'default-panel',\n  height: '100%'\n};\n\nexport default Panel;\n\n\n\n// WEBPACK FOOTER //\n// ./jsx/Panel.js","import SpecimenBarcodeForm from './barcodeForm.js';\n\n/**\n * Biobank Collection Form\n *\n * Fetches data from Loris backend and displays a form allowing\n * to specimen a biobank file attached to a specific instrument\n *\n * @author Henri Rabalais\n * @version 1.0.0\n *\n * */\nclass BiobankSpecimenForm extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      formData: {},\n      errorMessage: null,\n      formErrors: {},\n      barcodeFormList: {1: {}},\n      countBarcodeForms: 1\n    };\n\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.validateForm = this.validateForm.bind(this);\n    this.setFormData = this.setFormData.bind(this);\n    this.specimenSubmit = this.specimenSubmit.bind(this);\n    this.addBarcodeForm = this.addBarcodeForm.bind(this);\n    this.setBarcodeFormData = this.setBarcodeFormData.bind(this);\n  }\n\n  componentDidMount() {\n    //if this is a child specimen form then certain formData is set when component mounts\n    if (this.props.child) {\n      var formData = this.state.formData;\n      formData['parentSpecimen'] = this.props.specimenId;\n      formData['pscid'] = this.props.candidateId;\n      formData['visitLabel'] = this.props.sessionId;\n      formData['unitId'] = this.props.unitId;\n\n      this.setState({\n        formData: formData\n      });\n    }\n  }\n\n  render() {\n\n    //Generates new Barcode Form everytime the addBarcodeForm button is pressed\n    var barcodeListArray = Object.keys(this.state.barcodeFormList);\n    var barcodeForms = [];\n    let i = 1;\n    for (let key of barcodeListArray) {\n      barcodeForms.push(\n        <SpecimenBarcodeForm\n          key={key}\n          barcodeKey={key}\n          id={i} \n          formData={this.state.barcodeFormList[key] ? this.state.barcodeFormList[key] : null}\n          removeBarcodeForm={barcodeListArray.length !== 1 ? () => this.removeBarcodeForm(key) : null}\n          addBarcodeForm={i == barcodeListArray.length ? this.addBarcodeForm : null}\n          duplicateBarcodeForm={i == barcodeListArray.length && this.state.barcodeFormList[key] ? () => this.duplicateBarcodeForm(key) : null}\n          setParentFormData={this.setBarcodeFormData}\n          onChange={this.props.onChange}\n          specimenTypes={this.props.specimenTypes}\n          containerTypesPrimary={this.props.containerTypesPrimary}\n          containersNonPrimary={this.props.containersNonPrimary}\n          specimenTypeAttributes={this.props.specimenTypeAttributes}\n          attributeDatatypes={this.props.attributeDatatypes}\n          capacities={this.props.capacities}\n          containerDimensions={this.props.containerDimensions}\n          containerCoordinates={this.props.containerCoordinates}\n          specimenTypeUnits={this.props.specimenTypeUnits}\n          units={this.props.units}\n        />\n      )\n      \n      i++;\n    }\n\n    let globalFields;\n    let remainingQuantityFields;\n    if (this.props.child) {\n      globalFields = (   \n        <div>\n          <StaticElement\n            label=\"Parent Specimen\"\n            text={this.props.barcode}\n          />\n          <StaticElement\n            label=\"PSCID\"\n            text={this.props.pscid}\n          />\n          <StaticElement\n            label=\"Visit Label\"\n            text={this.props.visit}\n          />\n        </div>\n      );\n\n      //It may be wise to make unit static and forced, or atleast prepopulated --\n      remainingQuantityFields = (\n        <div>\n          <TextboxElement\n            name=\"quantity\"\n            label=\"Remaining Quantity\"\n            onUserInput={this.setFormData}\n            required={true}\n            value={this.state.formData.quantity}\n          />\n          <SelectElement\n            name=\"unitId\"\n            label=\"Unit\"\n            options={this.props.specimenUnits}\n            onUserInput={this.setFormData}\n            emptyOption={false}\n            required={true}\n            value={this.state.formData.unitId}\n          />\n        </div>\n      );\n\n    } else {\n      globalFields = (\n          <div>\n            <SelectElement\n              name=\"pscid\"\n              label=\"PSCID\"\n              options={this.props.pSCIDs}\n              onUserInput={this.setFormData}\n              ref=\"pscid\"\n              required={true}\n              value={this.state.formData.pscid}\n            />\n            <SelectElement\n              name=\"visitLabel\"\n              label=\"Visit Label\"\n              options={this.state.visits}\n              onUserInput={this.setFormData}\n              ref=\"visitLabel\"\n              required={true}\n              value={this.state.formData.visitLabel}\n              disabled={this.state.formData.pscid ? false : true}\n            />\n          </div>\n      );\n    }\n\n    return (\n      <FormElement\n        name=\"specimenForm\"\n        id='specimenForm'\n        onSubmit={this.handleSubmit}\n        ref=\"form\"\n      >\n        <br/>\n        <div className='row'>\n          <div className=\"col-xs-11\">\n            {globalFields}\n            {remainingQuantityFields}\n          </div>\n        </div>\n        {barcodeForms}\n        <div className=\"col-xs-3 col-xs-offset-9\">\n          <ButtonElement label=\"Submit\"/>\n        </div>\n      </FormElement>\n    );\n  }\n\n/** *******************************************************************************\n *                      ******     Helper methods     *******\n *********************************************************************************/\n\n  /**\n   * Returns a valid name for the file to be specimened\n   *\n   * @param {string} pscid - PSCID selected from the dropdown\n   * @param {string} visitLabel - Visit label selected from the dropdown\n   * @param {string} instrument - Instrument selected from the dropdown\n   * @return {string} - Generated valid filename for the current selection\n   */\n//  getValidFileName(pscid, visitLabel, instrument) {\n//    var fileName = pscid + \"_\" + visitLabel;\n//    if (instrument) fileName += \"_\" + instrument;\n//\n//    return fileName;\n//  }\n\n\n  validateForm(formElement, value) {\n    let formErrors = this.state.formErrors;\n\n    //validate barcode regex\n    if (formElement === \"barcode\" && value !== \"\") {\n      if (!(/^hello/.test(this.state.formData.barcode))) {\n        formErrors.barcode = true;\n      } else {\n        formErrors.barcode = false;\n      }\n    }\n\n    //validate that quantity is a number and less than capacity\n    if (formElement === \"quantity\" && value !== \"\") {\n      if (isNaN(value) || (value > this.props.capacities[this.state.currentContainerType])) {\n        formErrors.quantity = true;\n      } else {\n        formErrors.quantity = false;\n      }\n    }\n\n    //validate datatypes and regex of generated type attributes\n    var specimenTypeFieldsObject = this.props.specimenTypeAttributes[this.state.currentSpecimenType];\n    var specimenTypeFields = Object.keys(specimenTypeFieldsObject).map((attribute) => {\n\n      let datatype = this.props.attributeDatatypes[specimenTypeFieldsObject[attribute]['datatypeId']].datatype;\n      if (datatype === \"number\") {\n        if (formElement === attribute) {\n          if (isNaN(value) && value !== \"\") {\n            formErrors[attribute] = true;\n          } else {\n            formErrors[attribute] = false;\n          }\n        }\n      }\n    })\n\n    this.setState({\n      formErrors: formErrors\n    });\n\n  }\n\n\n  /**\n   * Handle form submission\n   * @param {object} e - Form submission event\n   */\n  handleSubmit(e) {\n    e.preventDefault();\n\n    let formData = this.state.formData;\n    let barcodeFormList = this.state.barcodeFormList;\n    let formRefs = this.refs;\n    //let biobankFiles = this.state.Data.biobankFiles ? this.state.Data.biobankFiles : [];\n\n    // Validate the form\n    if (!this.isValidForm(formRefs, formData)) {\n      return;\n    }\n\n\n//    // Validate specimened file name\n//    let instrument = formData.instrument ? formData.instrument : null;\n//    let fileName = formData.file ? formData.file.name.replace(/\\s+/g, '_') : null;\n//    let requiredFileName = this.getValidFileName(\n//      formData.pscid, formData.visitLabel, instrument\n//    );\n//    if (!this.isValidFileName(requiredFileName, fileName)) {\n//      swal(\n//        \"Invalid Specimen name!\",\n//        \"File name should begin with: \" + requiredFileName,\n//        \"error\"\n//      );\n//      return;\n//    }\n\n    // Check for duplicate file names\n//    let isDuplicate = biobankFiles.indexOf(fileName);\n//    if (isDuplicate >= 0) {\n//      swal({\n//        title: \"Are you sure?\",\n//        text: \"A file with this name already exists!\\n Would you like to override existing file?\",\n//        type: \"warning\",\n//        showCancelButton: true,\n//        confirmButtonText: 'Yes, I am sure!',\n//        cancelButtonText: \"No, cancel it!\"\n//      }, function(isConfirm) {\n//        if (isConfirm) {\n//          this.specimenFile();\n//        } else {\n//          swal(\"Cancelled\", \"Your imaginary file is safe :)\", \"error\");\n//        }\n//      }.bind(this));\n//    } else {\n\n    this.specimenSubmit();\n//    }\n  }\n\n  /*\n   * Uploads the file to the server\n   */\n  specimenSubmit() {\n    // Set form data and specimen the biobank file\n    let formData = this.state.formData;\n    let barcodeFormList = this.state.barcodeFormList;\n    formData['barcodeFormList'] = JSON.stringify(barcodeFormList);\n    let formObj = new FormData();\n    for (let key in formData) {\n      if (formData[key] !== \"\") {\n        formObj.append(key, formData[key]);\n      }\n    }\n\n    $.ajax({\n      type: 'POST',\n      url: this.props.action,\n      data: formObj,\n      cache: false,\n      contentType: false,\n      processData: false,\n      xhr: function() {\n        let xhr = new window.XMLHttpRequest();\n        return xhr;\n      }.bind(this),\n      success: function() {\n\n        this.props.refreshParent();\n        swal(\"Specimen Submission Successful!\", \"\", \"success\");\n        this.props.onSuccess();\n      }.bind(this),\n      error: function(err) {\n        console.error(err);\n        let msg = err.responseJSON ? err.responseJSON.message : \"Specimen error!\";\n        this.setState({\n          errorMessage: msg,\n        });\n        swal(msg, \"\", \"error\");\n      }.bind(this)\n    });\n  }\n\n  /**\n   * Checks if the inputted file name is valid\n   *\n   * @param {string} requiredFileName - Required file name\n   * @param {string} fileName - Provided file name\n   * @return {boolean} - true if fileName starts with requiredFileName, false\n   *   otherwise\n   */\n//  isValidFileName(requiredFileName, fileName) {\n//    if (fileName === null || requiredFileName === null) {\n//      return false;\n//    }\n//\n//    return (fileName.indexOf(requiredFileName) === 0);\n//  }\n\n  /**\n   * Validate the form\n   *\n   * @param {object} formRefs - Object containing references to React form elements\n   * @param {object} formData - Object containing form data inputed by user\n   * @return {boolean} - true if all required fields are filled, false otherwise\n   */\n  isValidForm(formRefs, formData) {\n    var isValidForm = true;\n\n    var requiredFields = {\n      pscid: null,\n      visitLabel: null,\n    };\n\n    Object.keys(requiredFields).map(function(field) {\n      if (formData[field]) {\n        requiredFields[field] = formData[field];\n      } else if (formRefs[field]) {\n        formRefs[field].props.hasError = true;\n        isValidForm = false;\n      }\n    });\n    this.forceUpdate();\n\n    return isValidForm;\n  }\n\n  /**\n   * Set the form data based on state values of child elements/componenets\n   *\n   * @param {string} formElement - name of the selected element\n   * @param {string} value - selected value for corresponding form element\n   */\n  setFormData(formElement, value) {\n    // This lets the modal window know that there is formData\n    // and will cause a warning to be thrown of the modal window\n    // is exited/\n    this.props.onChange instanceof Function && this.props.onChange();\n  \n    if (formElement === \"pscid\" && value !== \"\") {\n      this.state.visits = this.props.sessionData[this.props.pSCIDs[value]].visits;\n    }\n\n    var formData = this.state.formData;\n    formData[formElement] = value;\n\n    this.setState({\n      formData: formData\n    });\n  }\n\n  setBarcodeFormData(barcodeFormData, barcodeKey) {\n    var formData = this.state.formData;\n    var barcodeFormList = this.state.barcodeFormList;\n    barcodeFormList[barcodeKey] = barcodeFormData;\n    formData['barcodeFormList'] = barcodeFormList;\n\n    this.setState({\n      formData: formData\n    });\n  }\n\n  addBarcodeForm() {\n    let barcodeFormList = this.state.barcodeFormList;\n    let count = this.state.countBarcodeForms;\n    \n    barcodeFormList[count+1] = {}; \n\n    this.setState({\n      barcodeFormList: barcodeFormList,\n      countBarcodeForms: count + 1\n    });\n  }\n\n  duplicateBarcodeForm(key) {\n    let count = this.state.countBarcodeForms;\n    let nextKey = count+1;\n    let barcodeFormList = this.state.barcodeFormList;\n    \n    barcodeFormList[nextKey] = JSON.parse(JSON.stringify(barcodeFormList[key])); \n    delete barcodeFormList[nextKey].barcode;\n\n    this.setState({\n      barcodeFormList: barcodeFormList,\n      countBarcodeForms: nextKey\n    });\n  }\n\n  removeBarcodeForm(key) {\n    let barcodeFormList = this.state.barcodeFormList;\n    delete barcodeFormList[key];\n\n    this.setState({\n      barcodeFormList: barcodeFormList\n    });\n  }\n}\n\nBiobankSpecimenForm.propTypes = {\n  DataURL: React.PropTypes.string.isRequired,\n  action: React.PropTypes.string.isRequired,\n  barcode: React.PropTypes.string,\n  refreshTable: React.PropTypes.func\n};\n\nexport default BiobankSpecimenForm;\n\n\n\n// WEBPACK FOOTER //\n// ./modules/biobank/jsx/specimenForm.js","import SpecimenCollectionForm from './collectionForm'\n\n/**\n * Biobank Barcode Form\n *\n * Acts a subform for BiobankSpecimenForm\n *\n * @author Henri Rabalais\n * @version 1.0.0\n *\n **/\n\nclass SpecimenBarcodeForm extends React.Component {\n  constructor(props) {\n    super(props);\n \n    this.state = {\n      formData: {},\n      formErrors: {},\n      collapsed: true\n    };\n   \n    this.setFormData = this.setFormData.bind(this);\n    this.setCollectionFormData = this.setCollectionFormData.bind(this);\n    this.setParentFormData = this.setParentFormData.bind(this);\n    this.toggleCollapse = this.toggleCollapse.bind(this);\n  }\n\n  componentDidMount() {\n\n    if (this.props.formData) {\n      let formData = this.props.formData;\n    \n      this.setState({\n        formData: formData\n      }); \n    }   \n  }\n\n  toggleCollapse() {\n    this.setState({collapsed: !this.state.collapsed});\n  }\n\n  render() {\n\n    //HR TODO: This CSS should evenutally be moved\n    let addBarcodeFormButton;\n    let duplicateBarcodeFormButton;\n    if (this.props.addBarcodeForm) {\n      addBarcodeFormButton = (\n        <button\n          type='button'\n          className='btn btn-success btn-sm'\n          onClick={this.props.addBarcodeForm}\n        >\n          <span className='glyphicon glyphicon-plus' style={{marginRight: 5}}/>\n          New\n        </button>\n      );\n    }\n\t\n    if (this.props.duplicateBarcodeForm) {\n      duplicateBarcodeFormButton = (\n        <button\n          type='button'\n          className='btn btn-success btn-sm'\n          onClick={this.props.duplicateBarcodeForm}\n        >\n          <span className='glyphicon glyphicon-duplicate'style={{marginRight: 5}}/>\n          Previous\n        </button>\n      );\n    }\n\n\n    let removeBarcodeFormButton;\n    if (this.props.removeBarcodeForm) {\n      const glyphStyle = {\n        color: '#DDDDDD',\n        marginLeft: 10,\n        cursor: 'pointer',\n        fontSize: 15\n      }\n\n      const buttonStyle = {\n        appearance: 'non',\n        outline: 'non',\n        boxShadow: 'none',\n        borderColor: 'transparent',\n        backgroundColor: 'transparent'\n      }\n\n      removeBarcodeFormButton = (\n        <span \n          className='glyphicon glyphicon-remove' \n          onClick={this.props.removeBarcodeForm}\n          style={glyphStyle}\n        />\n      );\n    }\n\n    return (\n      <FormElement\n        name=\"biobankBarcode\"\n      >\n        <div className=\"row\">\n          <div className=\"col-xs-11\">\n            <div>   \n              <TextboxElement\n                name={\"barcode\"}\n                label={\"Barcode \" + this.props.id}\n                onUserInput={this.setFormData}\n                ref={\"barcode\"}\n                required={true}\n                value={this.state.formData[\"barcode\"]}\n              />\n            </div>\n          </div>\n          <div className='col-xs-1' style={{paddingLeft:0, marginTop:10}}>\n            <span \n              className= {this.state.collapsed ? 'glyphicon glyphicon-chevron-down' : 'glyphicon glyphicon-chevron-up'}\n              style={{cursor: 'pointer', fontSize:15, position:'relative', right:40}}\n              data-toggle=\"collapse\" \n              data-target={\"#\" + this.props.id}\n              onClick={this.toggleCollapse}\n            />\n            {removeBarcodeFormButton}\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"col-xs-2\"/>\n          <div className=\"col-xs-9\">\n            <div id={this.props.id} className=\"collapse\">\n              <SpecimenCollectionForm\n                formData={this.props.formData}\n                setParentFormData={this.setCollectionFormData}\n                onChange={this.props.onChange}\n                specimenTypes={this.props.specimenTypes}\n                specimenTypeAttributes={this.props.specimenTypeAttributes}\n                attributeDatatypes={this.props.attributeDatatypes}\n                containerTypesPrimary={this.props.containerTypesPrimary}\n                containersNonPrimary={this.props.containersNonPrimary}\n                containerDimensions={this.props.containerDimensions}\n                containerCoordinates={this.props.containerCoordinates}\n                specimenTypeUnits={this.props.specimenTypeUnits}\n                stati={this.props.stati}\n              />\n            </div>\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"col-xs-11\">\n            <div className=\"col-xs-3\"/>\n            <div className=\"col-xs-1\">\n              {addBarcodeFormButton}\n            </div>\n            <div className=\"col-xs-1\">\n              {duplicateBarcodeFormButton}\n            </div>\n          </div>\n        </div>\n      </FormElement>\n    );\n  }\n\n  /**\n   * Set the form data based on state values of child elements/componenets\n   *\n   * @param {string} formElement - name of the selected element\n   * @param {string} value - selected value for corresponding form element\n   */\n  setFormData(formElement, value) {\n    this.props.onChange instanceof Function && this.props.onChange();   \n\n    var formData = this.state.formData;\n    formData[formElement] = value;\n\n    this.setState(\n      {\n      formData: formData\n      },\n      this.setParentFormData\n    );\n  }\n\n  setCollectionFormData(collectionFormData) {\n    var formData = this.state.formData;\n    \n    for (let field in collectionFormData) {\n      formData[field] = collectionFormData[field]\n    }\n \n    this.setState(\n      {\n        formData: formData\n      },\n      this.setParentFormData\n    );\n  }\n\n  setParentFormData() {\n    this.props.setParentFormData(this.state.formData, this.props.barcodeKey);\n  }\n}\n\nSpecimenBarcodeForm.propTypes = {\n  \n  id: React.PropTypes.string,\n  specimenTypes: React.PropTypes.object.isRequired,\n  containerTypesPrimary: React.PropTypes.object.isRequired,\n  specimenTypeAttributes: React.PropTypes.object.isRequired,\n  attributeDatatypes: React.PropTypes.object.isRequired,\n  capacities: React.PropTypes.object.isRequired,\n}\n\nexport default SpecimenBarcodeForm;\n\n\n\n// WEBPACK FOOTER //\n// ./modules/biobank/jsx/barcodeForm.js","import ContainerParentForm from './containerParentForm'\n\n\n/**\n * Biobank Specimen Form\n *\n * Acts a subform for BiobankCollectionForm\n *\n * @author Henri Rabalais\n * @version 1.0.0\n *\n **/\n\nclass SpecimenCollectionForm extends React.Component {\n  constructor(props) {\n    super(props);\n    \n    this.state = {\n      formData: {data:{}},\n      currentSpecimenType: this.props.edit ? this.props.specimenType : null,\n      currentContainerType: this.props.edit ? this.props.containerType : null,\n    };\n\n    this.setFormData = this.setFormData.bind(this);\n    this.setSpecimenTypeFieldFormData = this.setSpecimenTypeFieldFormData.bind(this);\n    this.setParentFormData = this.setParentFormData.bind(this);\n    this.setContainerParentFormData = this.setContainerParentFormData.bind(this);\n    this.getSpecimenTypeFields = this.getSpecimenTypeFields.bind(this);\n    this.handleUpdate = this.handleUpdate.bind(this);\n    this.updateSpecimen = this.updateSpecimen.bind(this);\n  }\n\n  componentDidMount() {\n    let formData = this.state.formData;\n\n    if (this.props.formData) {\n      formData = this.props.formData;\n      let currentSpecimenType = this.state.currentSpecimenType;\n      \n      this.setState({\n        currentSpecimenType: formData.specimenType\n      });\n    }\n\n    if (this.props.edit) {\n      formData['specimenId']    = this.props.specimenId;\n      formData['containerId']   = this.props.containerId;\n      formData['specimenType']  = this.props.specimenType;\n      formData['containerType'] = this.props.containerType;\n      formData['quantity']      = this.props.collection.quantity;\n      formData['unitId']        = this.props.collection.unitId;\n      formData['date']          = this.props.collection.date;\n      formData['time']          = this.props.collection.time;\n      formData['comments']      = this.props.collection.comments;\n\n      var specimenTypeFieldsObject = this.props.specimenTypeAttributes[this.state.currentSpecimenType];\n      if (specimenTypeFieldsObject) {\n        var specimenTypeFields = Object.keys(specimenTypeFieldsObject).map((attribute) => {\n          formData.data[attribute] = this.props.collection.data[attribute];\n        });\n      }\n    }\n\n    this.setState({\n      formData: formData\n    });\n  }\n\n  mapFormOptions(rawObject, targetAttribute) {\n    let data = {};\n    for (let id in rawObject) {\n      data[id] = rawObject[id][targetAttribute];\n    }\n\n    return data;\n  }\n\n  render() {\n\n    // This entire parentContainerField and parentContainerCoordinateField section should go into its own\n    // re-usable component\n    var containerParentForm;\n    if (!this.props.edit) {\n      containerParentForm = (\n        <ContainerParentForm\n          setParentFormData={this.setContainerParentFormData}\n          containersNonPrimary={this.props.containersNonPrimary}\n          containerDimensions={this.props.containerDimensions}\n          containerCoordinates={this.props.containerCoordinates}\n        />\n      );\n    }\n\n    var updateButton;\n    if (this.props.edit) {\n      updateButton = (\n        <ButtonElement label=\"Update\"/>\n      );\n    }\n\n    //This block of code should potentially be moved to setFormData();\n    //Consider Refactoring...\n    var specimenTypeUnits = {};\n    if (this.state.currentSpecimenType) {\n     \n      //This modifies the selections for unit drop down based on the chosend specimen type \n      for (var id in this.props.specimenTypeUnits[this.state.currentSpecimenType]) {\n        specimenTypeUnits[id] = this.props.specimenTypeUnits[this.state.currentSpecimenType][id].unit;\n      }\n\n      var specimenTypeFieldsObject = this.props.specimenTypeAttributes[this.state.currentSpecimenType];\n      if (specimenTypeFieldsObject) {\n        var specimenTypeFields = this.getSpecimenTypeFields(specimenTypeFieldsObject);\n      }\n    }\n\n    var specimenFields;\n    if (this.state.currentSpecimenType) {\n      specimenFields = (\n        <div>\n          <SelectElement\n            name=\"containerType\"\n            label=\"Container Type\"\n            options={this.props.containerTypesPrimary}\n            onUserInput={this.setFormData}\n            ref=\"containerType\"\n            required={true}\n            value={this.state.formData.containerType}\n          />\n          {containerParentForm}\n          <TextboxElement\n            name=\"quantity\"\n            label=\"Quantity\"\n            onUserInput={this.setFormData}\n            ref=\"quantity\"\n            required={true}\n            value={this.state.formData.quantity}\n          />\n          <SelectElement\n            name=\"unitId\"\n            label=\"Unit\"\n            options={specimenTypeUnits}\n            onUserInput={this.setFormData}\n            required={true}\n            value={this.state.formData.unitId}\n          />\n          {specimenTypeFields}\n          <DateElement\n            name=\"date\"\n            label=\"Date\"\n            minYear=\"2000\"\n            maxYear=\"2018\"\n            onUserInput={this.setFormData}\n            required={true}\n            value={this.state.formData.date}\n          />\n          <TimeElement\n            name=\"time\"\n            label=\"Time\"\n            onUserInput={this.setFormData}\n            required={true}\n            value={this.state.formData.time}\n          />\n          <TextareaElement\n            name=\"comments\"\n            label=\"Comments\"\n            onUserInput={this.setFormData}\n            ref=\"comments\"\n            value={this.state.formData.comments}\n          />\n        </div>\n      );\n    }\n\n    return (\n      <FormElement\n        name=\"biobankSpecimen\"\n        onSubmit={this.handleUpdate}\n        ref=\"form\"\n      >\n        <SelectElement\n          name=\"specimenType\"\n          label=\"Specimen Type\"\n          options={this.props.specimenTypes}\n          onUserInput={this.setFormData}\n          ref=\"specimenType\"\n          required={true}\n          value={this.state.formData.specimenType}\n        />\n        {specimenFields}\n        {updateButton}\n      </FormElement>\n    );\n  }\n\n  /**\n   * Set the form data based on state values of child elements/componenets\n   *\n   * @param {string} formElement - name of the selected element\n   * @param {string} value - selected value for corresponding form element\n   */\n  setFormData(formElement, value) {\n\n    this.props.onChange instanceof Function && this.props.onChange();\n\n    let formData = this.state.formData;\n    formData[formElement] = value;\n\n    if (formElement === \"specimenType\" && value !== \"\") {\n      //This throws a warning if the specimen type is changed because of the cascading effects this \n      //would cause.\n      if (this.props.edit) {\n        swal({\n          title: \"Warning\",\n          text: \"Changing the specimen type will result in the loss of any preparation or anaylsis \"+\n            \"data for this specimen. You will also need to manually change the specimen type of any \"+\n            \"aliquots derived from this specimen. Proceed with caution.\",\n          type: \"warning\",\n          showCancelButton: true,\n          confirmButtonText: 'Cancel Change',\n          cancelButtonText: 'Proceed',\n        }, \n        function(isConfirm) {\n          if (isConfirm) {\n            this.props.toggleEdit();\n          } else {\n          }\n        }.bind(this));\n      }\n\n      //This is to eliminate the values for the specimen type fields\n      //This could potentially be improved later to retain the values\n      //for the fields that are common across specimen types\n      formData.data = {}; \n      this.setState({\n        currentSpecimenType: value\n      });\n    }\n\n    if (formElement === \"containerType\" && value !== \"\") {\n      this.setState({\n        currentContainerType: value\n      });\n    }\n\n    this.setState(\n      {\n        formData: formData\n      },\n      this.setParentFormData\n    );\n  }\n\n  setSpecimenTypeFieldFormData(formElement, value) {\n    let formData = this.state.formData;\n    formData.data[formElement] = value;\n\n    this.setState(\n      {\n        formData: formData\n      },\n      this.setParentFormData\n    );\n  \n  }\n\n  setContainerParentFormData(containerParentFormData) {\n    var formData = this.state.formData;\n\n    for (let field in containerParentFormData) {\n      formData[field] = containerParentFormData[field];\n    }\n\n    this.setState(\n      {\n        formData: formData\n      },\n      this.setParentFormData\n    );\n  }\n\n  setParentFormData() {\n    if (!this.props.edit) {\n      var formData = this.state.formData;\n      this.props.setParentFormData(formData);\n    }\n  }\n\n\n  // This generates all the form fields for a given specimen type\n  getSpecimenTypeFields(fieldsObject) {\n    var specimenTypeFields = Object.keys(fieldsObject).map((attribute) => {\n      let datatype = this.props.attributeDatatypes[fieldsObject[attribute]['datatypeId']].datatype;\n      if (datatype === \"text\" || datatype === \"number\") {\n        if (fieldsObject[attribute]['refTableId'] == null) {\n          return (\n            <TextboxElement\n              name={attribute}\n              label={fieldsObject[attribute]['name']}\n              onUserInput={this.setSpecimenTypeFieldFormData}\n              ref={attribute}\n              required={fieldsObject[attribute]['required']}\n              value={this.state.formData.data[attribute]}\n            />\n          );\n        }\n\n        // OPTIONS FOR SELECT ELEMENT WILL MOST LIKELY BE PASSED VIA AJAX CALL\n        // BUT IT CAN ALSO BE PRELOADED --\n        // ASK RIDA HOW THIS SHOULD BE DONE\n        if (fieldsObject[attribute]['refTableId'] !== null) {\n          return (\n            <SelectElement\n              name={attribute}\n              label={fieldsObject[attribute]['name']}\n              options=\"\"\n              onUserInput={this.setSpecimenTypeFieldFormData}\n              ref={attribute}\n              required={fieldsObject[attribte]['required']}\n              value={this.state.formData.data[attribute]}\n            />\n          );\n        }\n      }\n\n      if (datatype === \"datetime\") {\n        return (\n          <DateElement\n            name={attribute}\n            label={fieldsObject[attribute]['name']}\n            onUserInput={this.setSpecimenTypeFieldFormData}\n            ref={attribute}\n            required={fieldsObject[attribute]['required']}\n            value={this.state.formData.data[attribute]}\n          />\n        );\n      }\n\n      if (datatype === \"boolean\") {\n      \n      }\n    })\n\n    return specimenTypeFields;\n  }\n\n  handleUpdate(e) {\n    //more things will go here later\n    this.updateSpecimen();\n  }\n\n  updateSpecimen() {\n    let formData = this.state.formData;\n    formData['data'] = JSON.stringify(formData['data']);\n\n    let formObj = new FormData();\n    for (let key in formData) {\n      if (formData[key] !== \"\") {\n        formObj.append(key, formData[key]);\n      }\n    }\n\n    $.ajax({\n      type: 'POST',\n      url: this.props.action,\n      data: formObj,\n      cache: false,\n      contentType: false,\n      processData: false,\n      processData: false,\n      xhr: function() {\n        let xhr = new window.XMLHttpRequest();\n        return xhr;\n      }.bind(this),\n      success: function() {\n        //Update Parent Specimen Page Here\n        formData.data = JSON.parse(formData.data);\n        this.props.refreshParent();\n      }.bind(this),\n      error: function(err) {\n        console.error(err);\n        let msg = err.responseJSON ? err.responseJSON.message : \"Specimen error!\";\n        this.setState({\n          errorMessage: msg,\n        });\n        swal(msg, \"\", \"error\");\n      }.bind(this)\n    });\n  }\n}\n\nSpecimenCollectionForm.propTypes = {\n  setParentFormData: React.PropTypes.func,\n  specimenTypes: React.PropTypes.object.isRequired,\n  containerTypesPrimary: React.PropTypes.object.isRequired,\n  specimenTypeAttributes: React.PropTypes.object.isRequired,\n  attributeDatatypes: React.PropTypes.object.isRequired,\n  capacities: React.PropTypes.object.isRequired,\n}\n\nexport default SpecimenCollectionForm;\n\n\n\n\n// WEBPACK FOOTER //\n// ./modules/biobank/jsx/collectionForm.js","/**\n * Biobank Container Parent Form\n *\n * Fetches data from Loris backend and displays a form allowing\n * to specimen a biobank file attached to a specific instrument\n *\n * @author Henri Rabalais\n * @version 1.0.0\n *\n * */\n\nimport ContainerDisplay from './containerDisplay.js';\n\nclass ContainerParentForm extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      formData: {},\n      formErrors: {},\n      errorMessage: null\n    };\n\n    this.mapFormOptions = this.mapFormOptions.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.setFormData = this.setFormData.bind(this);\n  }\n\n  componentDidMount() {\n    // This is where we will pass a parentContainerId if it already exists\n    // These are simply to provide 'Defaults' to the page. I am not sure that in\n    // if they are entirely necessary.\n    if (this.props.container) {\n    let formData = this.state.formData;\n    formData['container'] = JSON.stringify(this.props.container);\n    formData['parentContainerId'] = this.props.container.parentContainerId;\n\n    this.setState({\n      formData: formData\n    });\n    }\n  }\n\n  //map options for forms\n  mapFormOptions(rawObject, targetAttribute) {\n    var data = {}; \n    for (var id in rawObject) {\n      data[id] = rawObject[id][targetAttribute];\n    }   \n\n    return data;\n  }\n\n  render() {\n\n    var parentContainerField;\n    var coordinateField;\n    var containerDisplay;\n    let containerBarcodesNonPrimary = this.mapFormOptions(this.props.containersNonPrimary, 'barcode');\n\n    parentContainerField = ( \n      <SelectElement\n        name=\"parentContainerId\"\n        label=\"Parent Container Barcode\"\n        options={containerBarcodesNonPrimary}\n        onUserInput={this.setFormData}\n        ref=\"parentContainerId\"\n        required={false}\n        value={this.state.formData.parentContainerId}\n      />  \n    );  \n\n    // THIS IS VERY POORLY DONE AND NEEDS REFACTORING\n    // this should be a 'currentParentContainerId' state\n    if (this.state.formData.parentContainerId) {\n\n      let dimensionId = this.props.containersNonPrimary[this.state.formData.parentContainerId].dimensionId;\n      \n\n      if (dimensionId) {\n        //This will eventually become unecessary\n        ///////////////////////////////////////////////////\n        let dimensions = this.props.containerDimensions[dimensionId];\n\n        // Total coordinates is determined by the product of the dimensions\n        let coordinatesTotal = 1;\n        for (let dimension in dimensions) {\n          coordinatesTotal = coordinatesTotal * dimensions[dimension];\n        }   \n\n        // Mapping of options for the SelectElement\n        let coordinates = {}; \n        for (let i = 1; i <= coordinatesTotal; i++) {\n\n          // If the coordinate is already taken, skip it.\n          // this doubling of if statements seems unnecessary\n          if (this.props.containerCoordinates[this.state.formData.parentContainerId]) {\n            if (this.props.containerCoordinates[this.state.formData.parentContainerId][i]) {\n              continue; \n            }\n          }\n\n          coordinates[i] = i;\n        }   \n\n       // coordinateField = ( \n       //   <SelectElement\n       //     name=\"coordinate\"\n       //     label=\"Coordinate\"\n       //     options={coordinates}\n       //     onUserInput={this.setFormData}\n       //     ref=\"coordinate\"\n       //     required={false}\n       //     value={this.state.formData.coordinate}\n       //   />  \n       // );  \n       ///////////////////////////////////////////////////\n\n        containerDisplay = (\n          <ContainerDisplay\n            dimensions = {this.props.containerDimensions[this.props.containersNonPrimary[this.state.formData.parentContainerId].dimensionId]}\n            coordinates = {this.props.containerCoordinates[this.state.formData.parentContainerId]}\n            containerTypes = {this.props.containerTypes}\n            containerStati = {this.props.containerStati} \n            select = {true}\n            selectedCoordinate = {this.state.formData.coordinate}\n            updateParent = {this.setFormData}\n          />\n        );\n      }\n    }   \n\n    var updateButton;\n    if (this.props.container) {\n      updateButton = (\n        <ButtonElement label=\"Update\"/>\n      );\n    }\n\n    return (\n      <FormElement\n        onSubmit={this.handleSubmit}\n      >\n        {parentContainerField}\n        {coordinateField}\n        {containerDisplay}\n        <br/>\n        {updateButton}\n      </FormElement>\n    );\n  }\n\n/** *******************************************************************************\n *                      ******     Helper methods     *******\n *********************************************************************************/\n\n  // Validation functions will go here later...\n\n  /*\n   * Uploads the file to the server\n   */\n  handleSubmit() {\n    // Set form data and specimen the biobank file\n    let formData = this.state.formData;\n    let formObj = new FormData();\n    for (let key in formData) {\n      if (formData[key] !== \"\") {\n        formObj.append(key, formData[key]);\n      }\n    }\n\n    $.ajax({\n      type: 'POST',\n      url: this.props.action,\n      data: formObj,\n      cache: false,\n      contentType: false,\n      processData: false,\n      xhr: function() {\n        let xhr = new window.XMLHttpRequest();\n        return xhr;\n      }.bind(this),\n      success: function() {\n      \n        this.props.refreshParent();\n        swal(\"Parent Container Update Successful!\", \"\", \"success\");\n        this.props.onSuccess();\n      }.bind(this),\n      error: function(err) {\n        console.error(err);\n        let msg = err.responseJSON ? err.responseJSON.message : \"Specimen error!\";\n        this.setState({\n          errorMessage: msg,\n        });\n        swal(msg, \"\", \"error\");\n      }.bind(this)\n    });\n  }\n\n  /**\n   * Set the form data based on state values of child elements/componenets\n   *\n   * @param {string} formElement - name of the selected element\n   * @param {string} value - selected value for corresponding form element\n   */\n  setFormData(formElement, value) {\n\n    var formData = this.state.formData;\n    formData[formElement] = value;\n\n    if (formElement === 'parentContainerId') {\n      formData['coordinate'] = \"\";\n    }\n\n    this.setState(\n      {\n        formData: formData\n      },\n      this.setParentFormData\n    );\n  }\n\n  setParentFormData() {\n    if (!this.props.container) {\n      var formData = this.state.formData;\n      this.props.setParentFormData(formData);\n    }\n  } \n}\n\nContainerParentForm.propTypes = {\n  DataURL: React.PropTypes.string,\n  action: React.PropTypes.string,\n  barcode: React.PropTypes.string,\n  refreshTable: React.PropTypes.func,\n  onSuccess: React.PropTypes.func\n};\n\nexport default ContainerParentForm;\n\n\n\n// WEBPACK FOOTER //\n// ./modules/biobank/jsx/containerParentForm.js","/**\n * ContainerDisplay\n *\n * @author Henri Rabalais\n * @version 1.0.0\n *\n **/\n\nclass ContainerDisplay extends React.Component {\n  constructor(props) {\n    super(props);\n \n    this.state = {\n    };\n   \n    this.redirectURL = this.redirectURL.bind(this);\n    this.drag = this.drag.bind(this);\n    this.drop = this.drop.bind(this);\n  }\n\n  componentDidMount() {\n    $('[data-toggle=\"tooltip\"]').tooltip();\n  }\n\n  componentDidUpdate() {\n    $('[data-toggle=\"tooltip\"]').tooltip();\n  }\n\n  redirectURL(e) {\n    let coordinate = e.target.id;\n    if (this.props.coordinates[coordinate]) {\n      let url;\n      if (this.props.types[this.props.children[this.props.coordinates[coordinate]].typeId].primary) {\n        url = loris.BaseURL+\"/biobank/specimen/?barcode=\"+this.props.children[this.props.coordinates[coordinate]].barcode;\n      } else {\n        url = loris.BaseURL+\"/biobank/container/?barcode=\"+this.props.children[this.props.coordinates[coordinate]].barcode;\n      }\n\n      window.location.href = url;\n    }\n  }\n\n  allowDrop(e) {\n      e.preventDefault();\n  }\n  \n  drag(e) {\n      let container = JSON.stringify(this.props.children[this.props.coordinates[e.target.id]]);\n      e.dataTransfer.setData(\"text/plain\", container);\n  }\n  \n  drop(e) {\n    e.preventDefault();\n\n    let container = e.dataTransfer.getData(\"text/plain\");\n    let newCoordinate = parseInt(e.target.id);\n    \n    this.props.updateParent(container, newCoordinate);\n  }\n\n  render() {\n  // This is eventually need to be reworked and cleaned up\n  let column = [];\n  let row = [];\n  let display;\n  var coordinate = 1;\n  if (this.props.dimensions) {\n    for (let y=0; y < this.props.dimensions.y; y++) {\n      column = [];\n      for (let x=1; x <= this.props.dimensions.x; x++) {\n        \n        let nodeWidth = (500/this.props.dimensions.x) - (500/this.props.dimensions.x * 0.08);\n        let nodeStyle = {width: nodeWidth}\n        let nodeClass = 'node';\n        let tooltipTitle = null;\n        let dataHtml = 'false';\n        let dataToggle = null;\n        let dataPlacement = null;\n        let draggable = 'false';\n        let onDragStart = null;\n        let onDragOver = this.allowDrop;\n        let onDrop = this.drop;\n        let onClick = null;\n\n        if (!this.props.select) {\n          // This double if statement doesn't sound great\n          if (this.props.coordinates) {\n            if (this.props.coordinates[coordinate]) {\n              nodeClass = 'node occupied';\n              dataHtml = 'true';\n              dataToggle = 'tooltip';\n              dataPlacement = 'top';\n              tooltipTitle = \n            '<h5>' + this.props.children[this.props.coordinates[coordinate]].barcode + '</h5>' + \n            '<h5>' + this.props.containerTypes[this.props.children[this.props.coordinates[coordinate]].typeId].label + '</h5>' + \n            '<h5>' + this.props.containerStati[this.props.children[this.props.coordinates[coordinate]].statusId].status + '</h5>';\n              draggable = 'true';\n              onDragStart = this.drag;\n              onDragOver = null;\n              onDrop = null;\n              onClick = this.redirectURL;\n            }\n          }\n        }\n      \n        if (this.props.select) {\n          if (coordinate == this.props.selectedCoordinate) {\n            nodeClass = 'node occupied';\n          }\n          else if (!this.props.coordinates) {\n            nodeClass = 'node available';\n            onClick = (e) => this.props.updateParent('coordinate', e.target.id);\n          } \n          else if (this.props.coordinates) {\n            if (!this.props.coordinates[coordinate]) {\n              nodeClass = 'node available';\n\t\t\t  onClick = (e) => this.props.updateParent('coordinate', e.target.id);\n            }\n            else if (this.props.coordinates[coordinate]){\n            // --- This is currently not working ---\n            //  dataHtml = 'true';\n            //  dataToggle = 'tooltip';\n            //  dataPlacement = 'top';\n            //  tooltipTitle = \n            //'<h5>' + this.props.children[this.props.coordinates[coordinate]].barcode + '</h5>' + \n            //'<h5>' + this.props.containerTypes[this.props.children[this.props.coordinates[coordinate]].typeId].label + '</h5>' + \n            //'<h5>' + this.props.containerStati[this.props.children[this.props.coordinates[coordinate]].statusId].status + '</h5>';\n            }\n          }\n        }\n\n        let coordinateDisplay;\n        if (true) {\n          coordinateDisplay = x + (this.props.dimensions.x * y);\n        } else if (false) {\n          coordinateDisplay = String.fromCharCode(65+y)+''+x;\n        }\n\n        column.push(\n          <div\n            id={coordinate}\n            className={nodeClass}\n            data-html={dataHtml}\n            data-toggle={dataToggle}\n            data-placement={dataPlacement}\n            data-original-title={tooltipTitle}\n            style={nodeStyle}\n            onClick={onClick}\n            draggable={draggable}\n            onDragStart={onDragStart}\n            onDragOver={onDragOver}\n            onDrop={onDrop}\n          >\n            {coordinateDisplay}\n          </div>\n        );\n\n        coordinate++;\n      }\n\n      let rowHeight = (500/this.props.dimensions.y) - (500/this.props.dimensions.y * 0.08);\n      let rowMargin = (500/this.props.dimensions.y * 0.04);\n      let rowStyle = {\n        height: rowHeight,\n      }\n      \n      row.push(\n        <div\n          className='row'\n          style={rowStyle} \n        >\n          {column}\n        </div>\n      )\n    }\n    \n    display = row;\n  }\n \n    return (\n      <div className='display'>\n        {display}\n      </div>\n    );\n  }\n}\n\nContainerDisplay.propTypes = {\n}\n\nexport default ContainerDisplay;\n\n\n\n// WEBPACK FOOTER //\n// ./modules/biobank/jsx/containerDisplay.js","import ContainerBarcodeForm from './containerBarcodeForm.js';\n\n/**\n * Biobank Collection Form\n *\n * Fetches data from Loris backend and displays a form allowing\n * to specimen a biobank file attached to a specific instrument\n *\n * @author Henri Rabalais\n * @version 1.0.0\n *\n * */\nclass BiobankContainerForm extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      formData: {},\n      formErrors: {},\n      errorMessage: null,\n      barcodeFormList: {1: {}},\n      countBarcodeForms: 1\n    };\n\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.validateForm = this.validateForm.bind(this);\n    this.setFormData = this.setFormData.bind(this);\n    this.containerSubmit = this.containerSubmit.bind(this);\n    this.addBarcodeForm = this.addBarcodeForm.bind(this);\n    this.setBarcodeFormData = this.setBarcodeFormData.bind(this);\n  }\n\n  render() {\n\n    //Generates new Barcode Form everytime the addBarcodeForm button is pressed\n    var barcodeListArray = Object.keys(this.state.barcodeFormList);\n    var barcodeForms = [];\n    let i = 1;\n    for (let key of barcodeListArray) {\n      barcodeForms.push(\n        <ContainerBarcodeForm\n          key={key}\n          barcodeKey={key}\n          id={i}\n          formData={this.state.barcodeFormList[key] ? this.state.barcodeFormList[key] : null}\n          removeBarcodeForm={barcodeListArray.length !== 1 ? () => this.removeBarcodeForm(key) : null}\n          addBarcodeForm={i == barcodeListArray.length ? this.addBarcodeForm : null}\n          duplicateBarcodeForm={i == barcodeListArray.length && this.state.barcodeFormList[key] ? \n            () => this.duplicateBarcodeForm(key) : null}\n          onChange={this.props.onChange}\n          setParentFormData={this.setBarcodeFormData}\n          containerTypesNonPrimary={this.props.containerTypesNonPrimary}\n          containerBarcodesNonPrimary={this.props.containerBarcodesNonPrimary}\n        />\n      );\n     \n      i++;\n    }\n\n    //ALLOW THEM TO CANCEL THE FORM AND DELETE BARCODE FORMS\n    return (\n      <FormElement\n        name=\"specimenForm\"\n        onSubmit={this.handleSubmit}\n        ref=\"form\"\n      >\n        <br/>\n        <div className=\"row\">\n          <div className=\"col-xs-11\">\n            <SelectElement\n              name=\"site\"\n              label=\"Site\"\n              options={this.props.sites}\n              onUserInput={this.setFormData}\n              ref=\"site\"\n              required={true}\n              value={this.state.formData.site}\n            />\n          </div>\n        </div>\n        {barcodeForms}\n          <div className=\"col-xs-3 col-xs-offset-9\">\n            <ButtonElement label=\"Submit\"/>\n          </div>\n      </FormElement>\n    );\n  }\n\n/** *******************************************************************************\n *                      ******     Helper methods     *******\n *********************************************************************************/\n\n  /**\n   * Returns a valid name for the file to be specimened\n   *\n   * @param {string} visitLabel - Visit label selected from the dropdown\n   * @param {string} instrument - Instrument selected from the dropdown\n   * @return {string} - Generated valid filename for the current selection\n   */\n\n\n  validateForm(formElement, value) {\n    let formErrors = this.state.formErrors;\n\n    //validate barcode regex\n    if (formElement === \"barcode\" && value !== \"\") {\n      if (!(/^hello/.test(this.state.formData.barcode))) {\n        formErrors.barcode = true;\n      } else {\n        formErrors.barcode = false;\n      }\n    }\n\n    //validate that quantity is a number and less than capacity\n    if (formElement === \"quantity\" && value !== \"\") {\n      if (isNaN(value) || (value > this.props.capacities[this.state.currentContainerType])) {\n        formErrors.quantity = true;\n      } else {\n        formErrors.quantity = false;\n      }\n    }\n\n    //validate datatypes and regex of generated type attributes\n    var specimenTypeFieldsObject = this.props.specimenTypeAttributes[this.state.currentSpecimenType];\n    var specimenTypeFields = Object.keys(specimenTypeFieldsObject).map((attribute) => {\n\n      let datatype = this.props.attributeDatatypes[specimenTypeFieldsObject[attribute]['datatypeId']].datatype;\n      if (datatype === \"number\") {\n        if (formElement === attribute) {\n          if (isNaN(value) && value !== \"\") {\n            formErrors[attribute] = true;\n          } else {\n            formErrors[attribute] = false;\n          }\n        }\n      }\n    })\n\n    this.setState({\n      formErrors: formErrors\n    });\n\n  }\n\n\n  /**\n   * Handle form submission\n   * @param {object} e - Form submission event\n   */\n  handleSubmit(e) {\n\n    this.containerSubmit();\n  }\n\n  containerSubmit() {\n    // Set form data\n    let formData = this.state.formData;\n    let barcodeFormList = this.state.barcodeFormList;\n    formData['barcodeFormList'] = JSON.stringify(barcodeFormList);\n    let formObj = new FormData();\n    for (let key in formData) {\n      if (formData[key] !== \"\") {\n        formObj.append(key, formData[key]);\n      }\n    }\n\n    $.ajax({\n      type: 'POST',\n      url: this.props.action,\n      data: formObj,\n      cache: false,\n      contentType: false,\n      processData: false,\n      xhr: function() {\n        let xhr = new window.XMLHttpRequest();\n        return xhr;\n      }.bind(this),\n      success: function() {\n \n        //refreshes table \n        this.props.refreshParent();\n\n        //provide success message\n        swal(\"Container Submission Successful!\", \"\", \"success\");\n\n        //close modal window\n        this.props.onSuccess();\n      }.bind(this),\n      error: function(err) {\n        console.error(err);\n        let msg = err.responseJSON ? err.responseJSON.message : \"Specimen error!\";\n        this.setState({\n          errorMessage: msg,\n        });\n        swal(msg, \"\", \"error\");\n      }.bind(this)\n    });\n  }\n\n  /**\n   * Set the form data based on state values of child elements/componenets\n   *\n   * @param {string} formElement - name of the selected element\n   * @param {string} value - selected value for corresponding form element\n   */\n  setFormData(formElement, value) {\n    this.props.onChange instanceof Function && this.props.onChange();\n  \n    //LOOK AT THIS LATER - THE SWITCH TO PROPS MESSED THIS ALL UP \n    var formData = this.state.formData;\n    formData[formElement] = value;\n\n    this.setState({\n      formData: formData\n    });\n  }\n\n  setBarcodeFormData(barcodeFormData, barcodeKey) {\n    var formData = this.state.formData;\n    var barcodeFormList = this.state.barcodeFormList;\n    barcodeFormList[barcodeKey] = barcodeFormData;\n    formData['barcodeFormList'] = barcodeFormList;\n\n    this.setState({\n      formData: formData\n    });\n  }\n\n  addBarcodeForm() {\n    let barcodeFormList = this.state.barcodeFormList;\n    let count = this.state.countBarcodeForms;\n\n    barcodeFormList[count+1] = {};\n\n    this.setState({\n      barcodeFormList: barcodeFormList,\n      countBarcodeForms: count + 1\n    });\n  }\n\n  duplicateBarcodeForm(key) {\n    let count = this.state.countBarcodeForms;\n    let nextKey = count+1;\n    let barcodeFormList = this.state.barcodeFormList;\n\n    barcodeFormList[nextKey] = JSON.parse(JSON.stringify(barcodeFormList[key]));\n    delete barcodeFormList[nextKey].barcode;\n    \n    this.setState({\n      barcodeFormList: barcodeFormList,\n      countBarcodeForms: nextKey\n    });\n  }\n\n\n  removeBarcodeForm(index) {\n    let barcodeFormList = this.state.barcodeFormList;\n    delete barcodeFormList[key];\n\n    this.setState({\n      barcodeFormList: barcodeFormList\n    });\n  }\n\n}\n\nBiobankContainerForm.propTypes = {\n  DataURL: React.PropTypes.string.isRequired,\n  action: React.PropTypes.string.isRequired,\n  barcode: React.PropTypes.string,\n  refreshTable: React.PropTypes.func\n};\n\nexport default BiobankContainerForm;\n\n\n\n// WEBPACK FOOTER //\n// ./modules/biobank/jsx/containerForm.js","/**\n * Container Barcode Form\n *\n * Acts a subform for ContainerForm\n *\n * @author Henri Rabalais\n * @version 1.0.0\n *\n **/\n\nclass ContainerBarcodeForm extends React.Component {\n  constructor(props) {\n    super(props);\n \n    this.state = {\n      formData: {},\n      formErrors: {},\n    };\n   \n    this.setFormData = this.setFormData.bind(this);\n    this.setParentFormData = this.setParentFormData.bind(this);\n    this.toggleCollapse = this.toggleCollapse.bind(this);\n  }\n\n  componentDidMount() {\n\n    if (this.props.formData) {\n      let formData = this.props.formData;\n      \n      this.setState({\n        formData: formData\n      });\n    }\n  }\n\n  toggleCollapse() {\n    this.setState({collapsed: !this.state.collapsed});\n  }\n\n  render() {\n\n    // HR TODO: All this CSS should eventually be moved\n    let addBarcodeFormButton;\n    let duplicateBarcodeFormButton;\n    if (this.props.addBarcodeForm) {\n      addBarcodeFormButton = (\n        <button\n          type='button'\n          className='btn btn-success btn-sm'\n          onClick={this.props.addBarcodeForm}\n        >\n          <span className='glyphicon glyphicon-plus' style={{marginRight: 5}}/>\n          New\n        </button>\n      );  \n    }   \n    \n    if (this.props.duplicateBarcodeForm) {\n      duplicateBarcodeFormButton = ( \n        <button\n          type='button'\n          className='btn btn-success btn-sm'\n          onClick={this.props.duplicateBarcodeForm}\n        >\n          <span className='glyphicon glyphicon-duplicate'style={{marginRight: 5}}/>\n          Previous\n        </button>\n      );  \n    }   \n\n\n    let removeBarcodeFormButton;\n    if (this.props.removeBarcodeForm) {\n      const glyphStyle = { \n        color: '#DDDDDD',\n        marginLeft: 10, \n        cursor: 'pointer',\n        fontSize: 15\n      }   \n\n      const buttonStyle = { \n        appearance: 'non',\n        outline: 'non',\n        boxShadow: 'none',\n        borderColor: 'transparent',\n        backgroundColor: 'transparent'\n      }   \n\n      removeBarcodeFormButton = ( \n        <span \n          className='glyphicon glyphicon-remove' \n          onClick={this.props.removeBarcodeForm}\n          style={glyphStyle}\n        />\n      );  \n    }\n\n\n    return (\n      <FormElement\n        name=\"biobankBarcode\"\n      >\n        <div className=\"row\">\n          <div className=\"col-xs-11\">\n            <div>\n            <TextboxElement\n              name={\"barcode\"}\n              label={\"Barcode \" + this.props.id}\n              onUserInput={this.setFormData}\n              ref={\"barcode\"}\n              required={true}\n              value={this.state.formData[\"barcode\"]}\n            />\n            </div>\n          </div>\n          <div className=\"col-xs-1\" style={{paddingLeft:0, marginTop:10}}>\n            <span\n              className= {this.state.collapsed ? 'glyphicon glyphicon-chevron-down' : 'glyphicon glyphicon-chevron-up'}\n              style={{cursor: 'pointer', fontSize:15, position:'relative', right:40}}\n              data-toggle=\"collapse\"\n              data-target={\"#\" + this.props.id}\n              onClick={this.toggleCollapsed}\n            />\n            {removeBarcodeFormButton}\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"col-xs-2\"/>\n          <div className=\"col-xs-9\">\n            <div id={this.props.id} className=\"collapse\">\n              <SelectElement\n                name=\"containerType\"\n                label=\"Container Type\"\n                options={this.props.containerTypesNonPrimary}\n                onUserInput={this.setFormData}\n                required={true}\n                value={this.state.formData.containerType}\n              />\n            </div>\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"col-xs-11\">\n            <div className=\"col-xs-3\"/>\n            <div className=\"col-xs-1\">\n              {addBarcodeFormButton}\n            </div>\n            <div className=\"col-xs-1\">\n              {duplicateBarcodeFormButton}\n            </div>\n          </div>\n        </div>\n      </FormElement>\n    );\n  }\n\n  /**\n   * Set the form data based on state values of child elements/componenets\n   *\n   * @param {string} formElement - name of the selected element\n   * @param {string} value - selected value for corresponding form element\n   */\n  setFormData(formElement, value) {\n    this.props.onChange instanceof Function && this.props.onChange();\n\n    var formData = this.state.formData;\n    formData[formElement] = value;\n\n    this.setState(\n      {\n      formData: formData\n      },\n      this.setParentFormData\n    );\n  }\n\n  setParentFormData() {\n    this.props.setParentFormData(this.state.formData, this.props.id);\n  }\n}\n\nContainerBarcodeForm.propTypes = {\n  id: React.PropTypes.string,\n  specimenTypes: React.PropTypes.object.isRequired,\n  containerTypesPrimary: React.PropTypes.object.isRequired,\n  specimenTypeAttributes: React.PropTypes.object.isRequired,\n  attributeDatatypes: React.PropTypes.object.isRequired,\n  capacities: React.PropTypes.object.isRequired,\n}\n\nexport default ContainerBarcodeForm;\n\n\n\n// WEBPACK FOOTER //\n// ./modules/biobank/jsx/containerBarcodeForm.js","/**\n * This file contains React components for Tabs component.\n *\n * @author Loris Team\n * @version 1.1.0\n *\n */\n\n/**\n * Tabs Component.\n * React wrapper for Bootstrap tabs. Allows to dynamically render tabs\n * and corresponding tab panes.\n *\n * ================================================\n * Usage:\n *\n * 1. Define an array of tabs with IDs and labels\n *\n * `let tabList = [{id: \"tab1\", label: \"This is tab title\"}];`\n *\n * 2. Pass tabList as <Tab> property and <TabPane> as child\n *  ```\n * <Tabs tabs={tabList} defaultTab=\"tab1\">\n *   <TabPane TabId={tabList[0].id}>\n *     // Tab content goes here\n *   </TabPane>\n * </Tabs>\n * ```\n * =================================================\n *\n */\nclass Tabs extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    const hash = window.location.hash;\n    let activeTab = \"\";\n\n    /**\n     * Determine the initial active tab in this order\n     * 1. Try to infer from the URL, otherwise\n     * 2. Try to infer from the defaultTab prop, otherwise\n     * 3. Set to be the first tab of the list\n     */\n    if (this.props.updateURL && hash) {\n      activeTab = hash.substr(1);\n    } else if (this.props.defaultTab) {\n      activeTab = this.props.defaultTab;\n    } else if (this.props.tabs.length > 0) {\n      activeTab = this.props.tabs[0].id;\n    }\n\n    this.state = {\n      activeTab: activeTab\n    };\n\n    this.handleClick = this.handleClick.bind(this);\n    this.getTabs = this.getTabs.bind(this);\n    this.getTabPanes = this.getTabPanes.bind(this);\n  }\n\n  handleClick(tabId, e) {\n    this.setState({activeTab: tabId});\n    this.props.onTabChange(tabId);\n\n    // Add tab href to URL querystring and scroll the page to top\n    if (this.props.updateURL) {\n      const scrollDistance = $('body').scrollTop() || $('html').scrollTop();\n      window.location.hash = e.target.hash;\n      $('html,body').scrollTop(scrollDistance);\n    }\n  }\n\n  getTabs() {\n    let tabs = (this.props.tabs).map(function(tab) {\n      let tabClass = this.state.activeTab === tab.id ? 'active' : null;\n      let href = \"#\" + tab.id;\n      let tabID = \"tab-\" + tab.id;\n      return (\n        <li\n          role=\"presentation\"\n          className={tabClass}\n          key={tab.id}\n        >\n          <a id={tabID}\n             href={href}\n             role=\"tab\"\n             data-toggle=\"tab\"\n             onClick={this.handleClick.bind(null, tab.id)}\n          >\n            {tab.label}\n          </a>\n        </li>\n      );\n    }.bind(this));\n\n    return tabs;\n  }\n\n  getTabPanes() {\n    let tabPanes = React.Children.map(this.props.children, function(child, key) {\n      if (child) {\n        return React.cloneElement(child, {\n          activeTab: this.state.activeTab,\n          key: key\n        });\n      }\n    }.bind(this));\n\n    return tabPanes;\n  }\n\n  render() {\n    let tabs = this.getTabs();\n    let tabPanes = this.getTabPanes();\n    let tabStyle = {\n      marginLeft: 0,\n      marginBottom: '5px'\n    };\n\n    return (\n      <div>\n        <ul className=\"nav nav-tabs\" role=\"tablist\" style={tabStyle}>\n          {tabs}\n        </ul>\n        <div className=\"tab-content\">\n          {tabPanes}\n        </div>\n      </div>\n    );\n  }\n}\nTabs.propTypes = {\n  tabs: React.PropTypes.array.isRequired,\n  defaultTab: React.PropTypes.string,\n  updateURL: React.PropTypes.bool\n};\nTabs.defaultProps = {\n  onTabChange: function() {},\n  // Set updateURL to default to true but allow for change\n  // Nested tabs should set this variable to false\n  updateURL: true\n};\n\n/**\n * Allows to dynamically render vertical tabs corresponding to tab panes.\n */\n\nclass VerticalTabs extends React.Component {\n  constructor(props) {\n    super(props);\n\n    const hash = window.location.hash;\n    let activeTab = \"\";\n\n    /**\n     * Determine the initial active tab in this order\n     * 1. Try to infer from the URL, otherwise\n     * 2. Try to infer from the defaultTab prop, otherwise\n     * 3. Set to be the first tab of the list\n     */\n    if (this.props.updateURL && hash) {\n      activeTab = hash.substr(1);\n    } else if (this.props.defaultTab) {\n      activeTab = this.props.defaultTab;\n    } else if (this.props.tabs.length > 0) {\n      activeTab = this.props.tabs[0].id;\n    }\n\n    this.state = {\n      activeTab: activeTab\n    };\n\n    this.handleClick = this.handleClick.bind(this);\n    this.getTabs = this.getTabs.bind(this);\n    this.getTabPanes = this.getTabPanes.bind(this);\n  }\n\n  handleClick(tabId, e) {\n    this.setState({activeTab: tabId});\n    this.props.onTabChange(tabId);\n\n    // Add tab href to URL querystring and scroll the page to top\n    if (this.props.updateURL) {\n      const scrollDistance = $('body').scrollTop() || $('html').scrollTop();\n      window.location.hash = e.target.hash;\n      $('html,body').scrollTop(scrollDistance);\n    }\n  }\n\n  getTabs() {\n    let tabs = (this.props.tabs).map(function(tab) {\n      let tabClass = this.state.activeTab === tab.id ? 'active' : null;\n      let href = \"#\" + tab.id;\n      let tabID = \"tab-\" + tab.id;\n      return (\n        <li\n          role=\"presentation\"\n          className={tabClass}\n          key={tab.id}\n        >\n          <a id={tabID}\n             href={href}\n             role=\"tab\"\n             data-toggle=\"tab\"\n             onClick={this.handleClick.bind(null, tab.id)}\n          >\n            {tab.label}\n          </a>\n        </li>\n      );\n    }.bind(this));\n\n    return tabs;\n  }\n\n  getTabPanes() {\n    let tabPanes = React.Children.map(this.props.children, function(child, key) {\n      if (child) {\n        return React.cloneElement(child, {\n          activeTab: this.state.activeTab,\n          key: key\n        });\n      }\n    }.bind(this));\n\n    return tabPanes;\n  }\n\n  render() {\n    let tabs = this.getTabs();\n    let tabPanes = this.getTabPanes();\n    let tabStyle = {\n      marginLeft: 0,\n      marginBottom: '5px'\n    };\n\n    return (\n      <div>\n        <div className=\"tabbable col-md-3 col-sm-3\">\n          <ul className=\"nav nav-pills nav-stacked\" role=\"tablist\" style={tabStyle}>\n            {tabs}\n          </ul>\n        </div>\n        <div className=\"tab-content col-md-9 col-sm-9\">\n          {tabPanes}\n        </div>\n      </div>\n    );\n  }\n}\nVerticalTabs.propTypes = {\n  tabs: React.PropTypes.array.isRequired,\n  defaultTab: React.PropTypes.string,\n  updateURL: React.PropTypes.bool\n};\nVerticalTabs.defaultProps = {\n  onTabChange: function() {},\n  // Set updateURL to default to true but allow for change\n  // Nested tabs should set this variable to false\n  updateURL: true\n};\n\n/*\n * TabPane component.\n * Used to wrap content for every tab.\n */\nclass TabPane extends React.Component {\n  render() {\n    let classList = \"tab-pane\";\n    let title;\n\n    if (this.props.TabId === this.props.activeTab) {\n      classList += \" active\";\n    }\n    if (this.props.Title) {\n      title = <h1>{this.props.Title}</h1>;\n    }\n\n    return (\n      <div role=\"tabpanel\" className={classList} id={this.props.TabId}>\n        {title}\n        {this.props.children}\n      </div>\n    );\n  }\n}\nTabPane.propTypes = {\n  TabId: React.PropTypes.string.isRequired,\n  Title: React.PropTypes.string,\n  activeTab: React.PropTypes.string\n};\n\nexport {\n  Tabs,\n  VerticalTabs,\n  TabPane\n};\n\n\n\n// WEBPACK FOOTER //\n// ./jsx/Tabs.js","/**\n * This file contains React components for Modal component.\n *\n * @author Henri Rabalais\n * @version 1.1.0\n *\n */\n\nimport Modal from './Modal';\n\n/**\n * Modal Component.\n * React wrapper for a Modal Window. Allows to dynamically toggle a Modal window.\n *\n * ================================================\n * Usage:\n *\n * =================================================\n *\n */\n\nclass FormModal extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { show: false, throwWarning: false }\n\n    this.openModal = this.openModal.bind(this);\n    this.closeModal = this.closeModal.bind(this);\n    this.confirmClose = this.confirmClose.bind(this);\n    this.setWarning = this.setWarning.bind(this);\n  }\n\n  renderChildren() {\n    return React.Children.map(this.props.children, child => {\n      return React.cloneElement(child, { onSuccess: this.closeModal, onChange: this.setWarning });\n    });\n  }\n\n  openModal() {\n    this.setState({\n      show: true\n    });\n  } \n\n  setWarning() {\n    this.setState({\n      throwWarning: true\n    });\n  }\n\n  confirmClose() {\n    if (this.state.throwWarning) {\n      swal({\n        title: \"Are You Sure?\",\n        text: \"Leaving the form will result in the loss of any information entered.\",\n        type: \"warning\",\n        showCancelButton: true,\n        confirmButtonText: 'Proceed',\n        cancelButtonText: 'Cancel',\n      },\n      function() {\n        this.closeModal();\n      }.bind(this));\n    } else {\n      this.closeModal();\n    }\n  }\n\n  closeModal() {\n    this.setState({\n      show: false,\n      throwWarning: false\n    });\n  }\n\n  render() {\n    return (\n      <Modal \n        closeModal={this.confirmClose} \n        openModal={this.openModal} \n        show={this.state.show}\n        {...this.props} \n      >\n        {this.renderChildren()}\n      </Modal>\n    );\n  }\n}\n\nFormModal.propTypes = {\n  title: React.PropTypes.string,\n  buttonClass: React.PropTypes.string,\n  buttonStyle: React.PropTypes.object,\n  buttonContent: React.PropTypes.object,\n};\nFormModal.defaultProps = {\n  buttonClass: 'btn btn-primary'\n};\n\nexport default FormModal;\n\n\n\n// WEBPACK FOOTER //\n// ./jsx/FormModal.js","/**\n * This file contains React components for Modal component.\n *\n * @author Henri Rabalais\n * @version 1.1.0\n *\n */\n\n/**\n * Modal Component.\n * React wrapper for a Modal Window. Allows to dynamically toggle a Modal window.\n *\n * ================================================\n * Usage:\n *\n * =================================================\n *\n */\nclass Modal extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n  }\n\n  render() {\n    // Black Background with Alpha Channel\n    const backdropStyle = {\n      position: 'fixed',\n      zIndex: 9998,\n      top: 0,\n      bottom: 0,\n      left: 0,\n      right: 0,\n      backgroundColor: 'rgba(0,0,0,0.3)',\n      padding: 50\n    };\n\n    // White Modal Window\n    const modalStyle = {\n      position: 'relative',\n      maxWidth: 1000,\n      maxHeight: '100%',\n      margin: '0 auto',\n      backgroundColor: '#fff',\n      borderRadius: 10,\n      overflowY: 'auto',\n      zIndex: 9999\n    };\n\n    const titleStyle = {\n      display: 'flex',\n      flexDirection: 'row',\n      alignItems: 'center',\n      background: '#093782',\n      height: '70px',\n      borderTopRightRadius: '10',\n      color: '#FFFFFF',\n      fontSize: 24,\n      padding: 20,\n    }\n\n    const glyphStyle = {\n      marginLeft: 'auto',\n      cursor: 'pointer'\n    }\n\n    const bodyStyle = {\n      padding: 15\n    }\n  \n    var button = (\n      <button\n        type='button'\n        className={this.props.buttonClass}\n        onClick={this.props.openModal}\n        style={this.props.buttonStyle}\n      >\n        {this.props.buttonContent}\n      </button>\n    );\n\n    var modal;\n    if (this.props.show) {\n      modal = (\n        <div style={backdropStyle} onClick={this.props.closeModal}>\n          <div\n            style={modalStyle}\n            onClick={e => {\n              e.stopPropagation();\n            }}\n          >\n            <div\n              style={titleStyle}\n            >\n              {this.props.title}\n              <span \n                className='glyphicon glyphicon-remove'\n                style={glyphStyle}\n                onClick={this.props.closeModal}\n              />\n            </div>\n            <div\n              style={bodyStyle}\n            >\n              {this.props.children}\n            </div>\n          </div>\n        </div>\n      );\n    }\n\n    return (\n      <div>\n        {button}\n        {modal}\n      </div>\n    );\n  }\n}\n\nModal.propTypes = {\n  title: React.PropTypes.string,\n  buttonClass: React.PropTypes.string,\n  buttonStyle: React.PropTypes.object,\n  buttonContent: React.PropTypes.object,\n  show: React.PropTypes.boolean,\n  closeModal: React.PropTypes.func,\n  openModal: React.PropTypes.func\n};\nModal.defaultProps = {\n  buttonClass: 'btn btn-primary'\n};\n\nexport default Modal;\n\n\n\n// WEBPACK FOOTER //\n// ./jsx/Modal.js","/**\n * This file contains React component for Loader\n *\n * @author Henri Rabalais\n * @version 1.0.0\n *\n */\n\n/**\n * Loader component\n */\nclass Loader extends React.Component {\n\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n\n    return (\n      <div className='loader-container'>\n        <div className=\"loader\"/>\n      </div>\n\n\n    );\n  }\n}\n\nexport default Loader;\n\n\n\n// WEBPACK FOOTER //\n// ./jsx/Loader.js","/**\n * Modify behaviour of specified column cells in the Data Table component\n * @param {string} column - column name\n * @param {string} cell - cell content\n * @param {arrray} rowData - array of cell contents for a specific row\n * @param {arrray} rowHeaders - array of table headers (column names)\n * @return {*} a formated table cell for a given column\n */\nfunction formatColumn(column, cell, rowData, rowHeaders) {\n  // If a column if set as hidden, don't display it\n  //if (loris.hiddenHeaders.indexOf(column) > -1) {\n  //  return null;\n  //}\n\n  // Create the mapping between rowHeaders and rowData in a row object.\n  var row = {};\n  rowHeaders.forEach(function(header, index) {\n    row[header] = rowData[index];\n  }, this);\n\n  // create array of classes to be added to td tag\n  var classes = [];\n\n  // convert array to string, with blank space separator\n  classes = classes.join(\" \");\n\n  //const hasWritePermission = loris.userHasPermission('media_read');\n  if (column === 'Barcode') {\n    var specimenURL = loris.BaseURL + \"/biobank/specimen/?barcode=\" + row['Barcode'];\n    return <td className= {classes}><a href={specimenURL}>{cell}</a></td>;\n  }\n\n  if (column === 'Parent Barcode') {\n    var specimenURL = loris.BaseURL + \"/biobank/specimen/?barcode=\" + row['Parent Barcode'];\n    return <td className= {classes}><a href={specimenURL}>{cell}</a></td>; \n}\n\n  if (column === 'Container Barcode') {\n    var containerURL = loris.BaseURL + \"/biobank/container/?barcode=\" + row['Container Barcode'];\n    return <td className= {classes}><a href={containerURL}>{cell}</a></td>;\n}\n\n // if (column === 'Visit Label') {\n //   if (row[\"Cand ID\"] !== null && row[\"Session ID\"]) {\n //     var sessionURL = loris.BaseURL + \"/instrument_list/?candID=\" +\n //       row[\"Cand ID\"] + \"&sessionID=\" + row[\"Session ID\"];\n //     return <td className={classes}><a href={sessionURL}>{cell}</a></td>;\n //   }\n // }\n\n // if (column === 'Edit Metadata') {\n //   var editURL = loris.BaseURL + \"/biobank/edit/?id=\" + row['Edit Metadata'];\n //   return <td className={classes}><a href={editURL}>Edit</a></td>;\n // }\n\n  return <td className={classes}>{cell}</td>;\n}\n\nexport default formatColumn;\n\n\n\n// WEBPACK FOOTER //\n// ./modules/biobank/jsx/columnFormatterSpecimen.js","/**\n * Modify behaviour of specified column cells in the Data Table component\n * @param {string} column - column name\n * @param {string} cell - cell content\n * @param {arrray} rowData - array of cell contents for a specific row\n * @param {arrray} rowHeaders - array of table headers (column names)\n * @return {*} a formated table cell for a given column\n */\nfunction formatColumn(column, cell, rowData, rowHeaders) {\n  // If a column if set as hidden, don't display it\n  //if (loris.hiddenHeaders.indexOf(column) > -1) {\n  //  return null;\n  //}\n\n  // Create the mapping between rowHeaders and rowData in a row object.\n  var row = {};\n  rowHeaders.forEach(function(header, index) {\n    row[header] = rowData[index];\n  }, this);\n\n  // create array of classes to be added to td tag\n  var classes = [];\n\n  // convert array to string, with blank space separator\n  classes = classes.join(\" \");\n\n  //const hasWritePermission = loris.userHasPermission('media_read');\n  if (column === 'Barcode') {\n    var containerURL = loris.BaseURL + \"/biobank/container/?barcode=\" + row['Barcode'];\n    return <td className= {classes}><a href={containerURL}>{cell}</a></td>;\n  }\n\n  if (column === 'Parent Barcode') {\n    var specimenURL = loris.BaseURL + \"/biobank/container/?barcode=\" + row['Parent Barcode'];\n    return <td className= {classes}><a href={containerURL}>{cell}</a></td>; \n}\n\n // if (column === 'Visit Label') {\n //   if (row[\"Cand ID\"] !== null && row[\"Session ID\"]) {\n //     var sessionURL = loris.BaseURL + \"/instrument_list/?candID=\" +\n //       row[\"Cand ID\"] + \"&sessionID=\" + row[\"Session ID\"];\n //     return <td className={classes}><a href={sessionURL}>{cell}</a></td>;\n //   }\n // }\n\n // if (column === 'Edit Metadata') {\n //   var editURL = loris.BaseURL + \"/biobank/edit/?id=\" + row['Edit Metadata'];\n //   return <td className={classes}><a href={editURL}>Edit</a></td>;\n // }\n\n  return <td className={classes}>{cell}</td>;\n}\n\nexport default formatColumn;\n\n\n\n// WEBPACK FOOTER //\n// ./modules/biobank/jsx/columnFormatterContainer.js"],"sourceRoot":""}