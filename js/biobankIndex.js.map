{"version":3,"sources":["webpack:///modules/biobank/js/biobankIndex.js","webpack:///webpack/bootstrap ef16559463564537b05e?1a66*******","webpack:///./modules/biobank/jsx/biobankIndex.js","webpack:///./jsx/FilterForm.js","webpack:///./jsx/Panel.js","webpack:///./modules/biobank/jsx/specimenForm.js","webpack:///./modules/biobank/jsx/barcodeForm.js","webpack:///./modules/biobank/jsx/collectionForm.js","webpack:///./modules/biobank/jsx/containerParentForm.js","webpack:///./modules/biobank/jsx/containerDisplay.js","webpack:///./modules/biobank/jsx/poolSpecimenForm.js","webpack:///./modules/biobank/jsx/preparationForm.js","webpack:///./modules/biobank/jsx/containerForm.js","webpack:///./modules/biobank/jsx/containerBarcodeForm.js","webpack:///./jsx/Tabs.js","webpack:///./jsx/FormModal.js","webpack:///./jsx/Modal.js","webpack:///./jsx/Loader.js","webpack:///./modules/biobank/jsx/columnFormatterSpecimen.js","webpack:///./modules/biobank/jsx/columnFormatterContainer.js"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","id","loaded","call","m","c","p","_interopRequireDefault","obj","__esModule","default","_classCallCheck","instance","Constructor","TypeError","_possibleConstructorReturn","self","ReferenceError","_inherits","subClass","superClass","prototype","Object","create","constructor","value","enumerable","writable","configurable","setPrototypeOf","__proto__","_createClass","defineProperties","target","props","i","length","descriptor","defineProperty","key","protoProps","staticProps","_FilterForm","_FilterForm2","_specimenForm","_specimenForm2","_poolSpecimenForm","_poolSpecimenForm2","_containerForm","_containerForm2","_Tabs","_FormModal","_FormModal2","_Loader","_Loader2","_columnFormatterSpecimen","_columnFormatterSpecimen2","_columnFormatterContainer","_columnFormatterContainer2","BiobankIndex","_React$Component","this","_this","getPrototypeOf","state","isLoaded","specimenFilter","containerFilter","isOpen","formOptions","loadPage","bind","fetchSpecimenData","fetchFormOptions","fetchContainerData","updateSpecimenFilter","updateContainerFilter","resetFilters","mapFormOptions","$","ajax","specimenDataURL","method","dataType","success","data","setState","specimenData","error","console","containerDataURL","containerData","formDataURL","refs","biobankFilter","clearFilter","rawObject","targetAttribute","React","createElement","addSpecimenButton","poolSpecimenButton","addContainerButton","loris","userHasPermission","specimenTypes","containerTypesPrimary","title","buttonClass","buttonContent","style","display","containersNonPrimary","specimenTypeAttributes","attributeDatatypes","attributeOptions","capacities","containerDimensions","containerCoordinates","specimenTypeUnits","pSCIDs","visits","sessionData","action","BaseURL","refreshParent","poolSpecimenButtonContent","className","specimenProtocols","specimenProtocolAttributes","specimenUnits","specimenRequest","containerTypesNonPrimary","sites","tabList","label","Tabs","tabs","defaultTab","updateURL","TabPane","TabId","Module","name","ref","columns","formElements","form","onUpdate","filter","StaticElement","ButtonElement","type","onUserInput","StaticDataTable","Data","Headers","Filter","getFormattedCell","Component","biobankIndex","ReactDOM","render","document","getElementById","_Panel","_Panel2","FilterForm","getFormChildren","setFilter","onElementUpdate","queryString","QueryString","get","keys","forEach","filterKey","exactMatch","clear","formChildren","Children","children","child","isValidElement","callbackFunc","callbackName","elementName","displayName","queryFieldName","filterValue","push","cloneElement","JSON","parse","stringify","fieldName","fieldValue","set","height","FormElement","defaultProps","warn","propTypes","PropTypes","string","isRequired","object","func","Panel","collapsed","initCollapsed","panelClass","toggleCollapsed","glyphClass","pencilGlyph","edit","marginRight","cursor","onClick","plusGlyph","add","removeGlyph","cancel","panelHeading","data-toggle","data-target","role","_barcodeForm","_barcodeForm2","BiobankSpecimenForm","formData","errorMessage","formErrors","barcodeFormList","1","countBarcodeForms","handleSubmit","validateForm","setFormData","setParentFormData","specimenSubmit","addBarcodeForm","setBarcodeFormData","parentSpecimenIds","candidateId","sessionId","unitId","_this2","barcodeListArray","barcodeForms","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_loop","barcodeKey","removeBarcodeForm","copyBarcodeForm","onChange","units","_iterator","Symbol","iterator","next","done","err","return","globalFields","remainingQuantityFields","text","parentSpecimenBarcodes","pscid","visit","TextboxElement","required","quantity","SelectElement","options","emptyOption","SearchableDropdown","placeHolder","visitLabel","disabled","onSubmit","columnSize","formElement","_this3","test","barcode","isNaN","currentContainerType","specimenTypeFieldsObject","currentSpecimenType","map","attribute","datatype","e","preventDefault","formRefs","isValidForm","formObj","FormData","append","url","cache","contentType","processData","xhr","window","XMLHttpRequest","swal","onSuccess","msg","responseJSON","message","requiredFields","field","hasError","forceUpdate","Function","barcodeFormData","count","multiplier","nextKey","DataURL","refreshTable","_collectionForm","_collectionForm2","SpecimenBarcodeForm","copyMultiplier","setChildFormData","toggleCollapse","setCopyMultiplier","copy","addBarcodeFormButton","addBarcodeFormText","copyBarcodeFormButton","copyBarcodeFormText","min","max","width","removeBarcodeFormButton","glyphStyle","color","marginLeft","fontSize","paddingLeft","marginTop","position","right","stati","collectionFormData","_defineProperty","_containerParentForm","_containerParentForm2","SpecimenCollectionForm","specimenType","containerType","setSpecimenTypeFieldFormData","setContainerParentFormData","getSpecimenTypeFields","handleUpdate","updateSpecimen","specimenId","containerId","collection","date","time","comments","containerParentForm","updateButton","unit","specimenTypeFields","specimenFields","DateElement","minYear","maxYear","TimeElement","TextareaElement","showCancelButton","confirmButtonText","cancelButtonText","isConfirm","toggleEdit","containerParentFormData","fieldsObject","_$$ajax","_containerDisplay","_containerDisplay2","ContainerParentForm","container","parentContainerId","parentContainerField","coordinateField","containerDisplay","containerBarcodesNonPrimary","dimensionId","dimensions","coordinatesTotal","dimension","coordinates","containerTypes","containerStati","select","selectedCoordinate","coordinate","updateParent","ContainerDisplay","redirectURL","drag","drop","tooltip","types","typeId","primary","location","href","dataTransfer","setData","getData","newCoordinate","parseInt","column","row","y","x","nodeWidth","nodeStyle","nodeClass","tooltipTitle","dataHtml","dataToggle","dataPlacement","draggable","onDragStart","onDragOver","allowDrop","onDrop","statusId","status","coordinateDisplay","data-html","data-placement","data-original-title","rowHeight","rowStyle","_preparationForm","_preparationForm2","PoolSpecimenForm","barcodeList","barcodeCount","preparation","step","setPreparationFormData","setSpecimenFormData","submitForm","setBarcodeCount","previous","addPreparation","removePreparation","validate","formSwitch","preparationSwitch","runAjax","originalObject","mappedObject","then","poolData","responseText","inputData","Promise","resolve","reject","textStatus","errorThrown","inputForm","specimenForm","preparationButton","preparationForm","_this4","barcodes","insertAction","NumericElement","barcodesArray","values","barcodesString","join","specimenIds","_this5","log","preparationFormData","specimenFormData","SpecimenPreparationForm","currentProtocol","protocolId","setSpecimenProtocolFieldFormData","getSpecimenProtocolFields","handleSave","savePreparation","locationId","specimenProtocolFieldsObject","submitButton","locationField","specimenProtocolFields","currentSpecimenProtocol","preparationFields","updateAction","_containerBarcodeForm","_containerBarcodeForm2","BiobankContainerForm","containerSubmit","site","ContainerBarcodeForm","hash","activeTab","substr","handleClick","getTabs","getTabPanes","tabId","onTabChange","scrollDistance","scrollTop","tab","tabClass","tabID","tabPanes","tabStyle","marginBottom","array","bool","VerticalTabs","_React$Component2","_React$Component3","apply","arguments","classList","Title","_extends","assign","source","hasOwnProperty","_Modal","_Modal2","FormModal","show","throwWarning","openModal","closeModal","confirmClose","setWarning","renderChildren","buttonStyle","Modal","modal","backdropStyle","zIndex","top","bottom","left","backgroundColor","padding","modalStyle","maxWidth","maxHeight","margin","borderRadius","overflowY","titleStyle","flexDirection","alignItems","background","borderTopRightRadius","bodyStyle","button","stopPropagation","boolean","Loader","formatColumn","cell","rowData","rowHeaders","header","index","classes","specimenURL","containerURL"],"mappings":"CAAS,SAAUA,SCInB,QAAAC,qBAAAC,UAGA,GAAAC,iBAAAD,UACA,MAAAC,kBAAAD,UAAAE,OAGA,IAAAC,QAAAF,iBAAAD,WACAE,WACAE,GAAAJ,SACAK,QAAA,EAUA,OANAP,SAAAE,UAAAM,KAAAH,OAAAD,QAAAC,cAAAD,QAAAH,qBAGAI,OAAAE,QAAA,EAGAF,OAAAD,QAvBA,GAAAD,oBAqCA,OATAF,qBAAAQ,EAAAT,QAGAC,oBAAAS,EAAAP,iBAGAF,oBAAAU,EAAA,GAGAV,oBAAA,KDMM,SAASI,OAAQD,QAASH,qBAE/B,YAsCA,SAASW,wBAAuBC,KAAO,MAAOA,MAAOA,IAAIC,WAAaD,KAAQE,QAASF,KAEvF,QAASG,iBAAgBC,SAAUC,aAAe,KAAMD,mBAAoBC,cAAgB,KAAM,IAAIC,WAAU,qCAEhH,QAASC,4BAA2BC,KAAMb,MAAQ,IAAKa,KAAQ,KAAM,IAAIC,gBAAe,4DAAgE,QAAOd,MAAyB,gBAATA,OAAqC,kBAATA,MAA8Ba,KAAPb,KAElO,QAASe,WAAUC,SAAUC,YAAc,GAA0B,kBAAfA,aAA4C,OAAfA,WAAuB,KAAM,IAAIN,WAAU,iEAAoEM,YAAeD,UAASE,UAAYC,OAAOC,OAAOH,YAAcA,WAAWC,WAAaG,aAAeC,MAAON,SAAUO,YAAY,EAAOC,UAAU,EAAMC,cAAc,KAAeR,aAAYE,OAAOO,eAAiBP,OAAOO,eAAeV,SAAUC,YAAcD,SAASW,UAAYV,YA1Cje,GAAIW,cAAe,WAAc,QAASC,kBAAiBC,OAAQC,OAAS,IAAK,GAAIC,GAAI,EAAGA,EAAID,MAAME,OAAQD,IAAK,CAAE,GAAIE,YAAaH,MAAMC,EAAIE,YAAWX,WAAaW,WAAWX,aAAc,EAAOW,WAAWT,cAAe,EAAU,SAAWS,cAAYA,WAAWV,UAAW,GAAML,OAAOgB,eAAeL,OAAQI,WAAWE,IAAKF,aAAiB,MAAO,UAAUxB,YAAa2B,WAAYC,aAAiJ,MAA9HD,aAAYR,iBAAiBnB,YAAYQ,UAAWmB,YAAiBC,aAAaT,iBAAiBnB,YAAa4B,aAAqB5B,gBEhDjiB6B,YAAA9C,oBAAA,GFoDK+C,aAAepC,uBAAuBmC,aEnD3CE,cAAAhD,oBAAA,GFuDKiD,eAAiBtC,uBAAuBqC,eEtD7CE,kBAAAlD,oBAAA,GF0DKmD,mBAAqBxC,uBAAuBuC,mBEzDjDE,eAAApD,oBAAA,IF6DKqD,gBAAkB1C,uBAAuByC,gBE5D9CE,MAAAtD,oBAAA,IACAuD,WAAAvD,oBAAA,IFiEKwD,YAAc7C,uBAAuB4C,YEhE1CE,QAAAzD,oBAAA,IFoEK0D,SAAW/C,uBAAuB8C,SEnEvCE,yBAAA3D,oBAAA,IFuEK4D,0BAA4BjD,uBAAuBgD,0BEtExDE,0BAAA7D,oBAAA,IF0EK8D,2BAA6BnD,uBAAuBkD,2BExEnDE,aFkFc,SAAUC,kBEhF5B,QAAAD,cAAYzB,OAAOvB,gBAAAkD,KAAAF,aAAA,IAAAG,OAAA/C,2BAAA8C,MAAAF,aAAA7B,WAAAR,OAAAyC,eAAAJ,eAAAxD,KAAA0D,KACX3B,OADW,OAGjB4B,OAAKE,OACHC,UAAU,EACVC,kBACAC,mBACAC,QAAQ,EACRC,gBAIFP,MAAKQ,SAAWR,MAAKQ,SAASC,KAAdT,OAChBA,MAAKU,kBAAoBV,MAAKU,kBAAkBD,KAAvBT,OACzBA,MAAKW,iBAAmBX,MAAKW,iBAAiBF,KAAtBT,OACxBA,MAAKY,mBAAqBZ,MAAKY,mBAAmBH,KAAxBT,OAC1BA,MAAKa,qBAAuBb,MAAKa,qBAAqBJ,KAA1BT,OAC5BA,MAAKc,sBAAwBd,MAAKc,sBAAsBL,KAA3BT,OAC7BA,MAAKe,aAAef,MAAKe,aAAaN,KAAlBT,OACpBA,MAAKgB,eAAiBhB,MAAKgB,eAAeP,KAApBT,OAnBLA,MFgblB,MA/VA5C,WAAUyC,aAAcC,kBA2BxB7B,aAAa4B,eACXpB,IAAK,oBACLd,MAAO,WEvFRoC,KAAKS,cF2FJ/B,IAAK,WACLd,MAAO,WExFRoC,KAAKW,oBACLX,KAAKY,mBACLZ,KAAKa,wBFmGJnC,IAAK,oBACLd,MAAO,WE3FRsD,EAAEC,KAAKnB,KAAK3B,MAAM+C,iBAChBC,OAAQ,MACRC,SAAU,OACVC,QAAS,SAASC,MAChBxB,KAAKyB,UACHC,aAAcF,KACdpB,UAAU,KAEZM,KAAKV,MACP2B,MAAO,SAASA,QACdC,QAAQD,MAAMA,cFiGjBjD,IAAK,qBACLd,MAAO,WE5FRsD,EAAEC,KAAKnB,KAAK3B,MAAMwD,kBAChBR,OAAQ,MACRC,SAAU,OACVC,QAAS,SAASC,MAChBxB,KAAKyB,UACHK,cAAeN,KACfpB,UAAU,KAEZM,KAAKV,MACP2B,MAAO,SAASA,SACdC,QAAQD,MAAMA,eFkGjBjD,IAAK,mBACLd,MAAO,WE7FRsD,EAAEC,KAAKnB,KAAK3B,MAAM0D,aAChBV,OAAQ,MACRC,SAAU,OACVC,QAAS,SAASC,MAChBxB,KAAKyB,UACHjB,YAAagB,KACbpB,UAAU,KAEZM,KAAKV,MACP2B,MAAO,SAASA,SACdC,QAAQD,MAAMA,eFmGjBjD,IAAK,uBACLd,MAAO,SE/FWyC,gBACnBL,KAAKyB,UAAUpB,mCFsGd3B,IAAK,wBACLd,MAAO,SElGY0C,iBACpBN,KAAKyB,UAAUnB,qCFqGd5B,IAAK,eACLd,MAAO,WElGRoC,KAAKgC,KAAKC,cAAcC,iBFyGvBxD,IAAK,iBACLd,MAAO,SEtGKuE,UAAWC,iBACxB,GAAIZ,QACJ,KAAK,GAAIpF,MAAM+F,WACbX,KAAKpF,IAAM+F,UAAU/F,IAAIgG,gBAG3B,OAAOZ,SFyGN9C,IAAK,SACLd,MAAO,WErGR,IAAKoC,KAAKG,MAAMC,SACd,MACEiC,OAAAC,cAAA7C,SAAA5C,QAAA,KAIJ,IAAI0F,0BACAC,0BACAC,yBACJ,IAAIC,MAAMC,kBAAkB,iBAAkB,CAK3C,GAAIC,eAAgB5C,KAAKiB,eAAejB,KAAKG,MAAMK,YAAYoC,cAAe,QAC1EC,sBAAwB7C,KAAKiB,eAAejB,KAAKG,MAAMK,YAAYqC,sBAAuB,QAE9FN,mBACEF,MAAAC,cAAA/C,YAAA1C,SACEiG,MAAM,mBACNC,YAAY,oBACZC,cAAc,IACdC,OAAQC,QAAQ,iBAEhBb,MAAAC,cAAAtD,eAAAnC,SACE+F,cAAeA,cACfC,sBAAuBA,sBACvBM,qBAAsBnD,KAAKG,MAAMK,YAAY2C,qBAC7CC,uBAAwBpD,KAAKG,MAAMK,YAAY4C,uBAC/CC,mBAAoBrD,KAAKG,MAAMK,YAAY6C,mBAC3CC,iBAAkBtD,KAAKG,MAAMK,YAAY8C,iBACzCC,WAAYvD,KAAKG,MAAMK,YAAY+C,WACnCC,oBAAqBxD,KAAKG,MAAMK,YAAYgD,oBAC5CC,qBAAsBzD,KAAKG,MAAMK,YAAYiD,qBAC7CC,kBAAmB1D,KAAKG,MAAMK,YAAYkD,kBAC1CC,OAAQ3D,KAAKG,MAAMK,YAAYmD,OAC/BC,OAAQ5D,KAAKG,MAAMK,YAAYoD,OAC/BC,YAAa7D,KAAKG,MAAMK,YAAYqD,YACpCC,OAAWpB,MAAMqB,QAAjB,yDACAC,cAAehE,KAAKS,WAK1B,IAAIwD,2BACF5B,MAAAC,cAAA,QAAM4B,UAAU,oCAGlB1B,oBACEH,MAAAC,cAAA/C,YAAA1C,SACEiG,MAAM,iBACNC,YAAY,qBACZC,cAAeiB,0BACfhB,OAAQC,QAAQ,iBAEhBb,MAAAC,cAAApD,mBAAArC,SACE+F,cAAeA,cACfC,sBAAuBA,sBACvBM,qBAAsBnD,KAAKG,MAAMK,YAAY2C,qBAC7CC,uBAAwBpD,KAAKG,MAAMK,YAAY4C,uBAC/Ce,kBAAmBnE,KAAKG,MAAMK,YAAY2D,kBAC1CC,2BAA4BpE,KAAKG,MAAMK,YAAY4D,2BACnDf,mBAAoBrD,KAAKG,MAAMK,YAAY6C,mBAC3CC,iBAAkBtD,KAAKG,MAAMK,YAAY8C,iBACzCC,WAAYvD,KAAKG,MAAMK,YAAY+C,WAEnCC,oBAAqBxD,KAAKG,MAAMK,YAAYgD,oBAC5CC,qBAAsBzD,KAAKG,MAAMK,YAAYiD,qBAC7CC,kBAAmB1D,KAAKG,MAAMK,YAAYkD,kBAC1CW,cAAerE,KAAKG,MAAMK,YAAY6D,cACtCV,OAAQ3D,KAAKG,MAAMK,YAAYmD,OAC/BE,YAAa7D,KAAKG,MAAMK,YAAYqD,YACpCS,gBAAoB5B,MAAMqB,QAA1B,kEACAC,cAAehE,KAAKS,SACpBqD,OAAWpB,MAAMqB,QAAjB,uDAKN,IAAIQ,0BAA2BvE,KAAKiB,eAAejB,KAAKG,MAAMK,YAAY+D,yBAA0B,QAEpG9B,oBACEJ,MAAAC,cAAA/C,YAAA1C,SACEiG,MAAM,oBACNC,YAAY,oBACZC,cAAc,IACdC,OAAQC,QAAQ,iBAEhBb,MAAAC,cAAAlD,gBAAAvC,SACE0H,yBAA0BA,yBAC1BC,MAAOxE,KAAKG,MAAMK,YAAYgE,MAC9BV,OAAWpB,MAAMqB,QAAjB,sDACAC,cAAehE,KAAKS,YAO7B,GAAIgE,WACDrI,GAAI,YAAasI,MAAO,cACxBtI,GAAI,aAAcsI,MAAO,cAG5B,OACArC,OAAAC,cAAA,OAAKlG,GAAG,gBACNiG,MAAAC,cAAAjD,MAAAsF,MAAMC,KAAMH,QAASI,WAAW,YAAYC,WAAW,GACrDzC,MAAAC,cAAAjD,MAAA0F,SAASC,MAAOP,QAAQ,GAAGrI,IACzBiG,MAAAC,cAAA,OAAK4B,UAAU,OACb7B,MAAAC,cAAA,OAAK4B,UAAU,aACb7B,MAAAC,cAAAxD,aAAAjC,SACEoI,OAAO,UACPC,KAAK,kBACL9I,GAAG,kBACH+I,IAAI,iBACJC,QAAS,EACTC,aAAcrF,KAAKG,MAAMuB,aAAa4D,KACtCC,SAAUvF,KAAKc,qBACf0E,OAAQxF,KAAKG,MAAME,gBAEnBgC,MAAAC,cAAA,WACAD,MAAAC,cAACmD,cAAD,MACApD,MAAAC,cAACmD,cAAD,MACApD,MAAAC,cAACoD,eAAchB,MAAM,gBAAgBiB,KAAK,QAAQC,YAAa5F,KAAKgB,iBAGxEqB,MAAAC,cAAA,OAAK4B,UAAU,YACb7B,MAAAC,cAAA,QAAM4B,UAAU,UACb3B,kBACDF,MAAAC,cAAA,OAAK4B,UAAU,gBAAf,iBAIF7B,MAAAC,cAAA,WAAKD,MAAAC,cAAA,WACLD,MAAAC,cAAA,QAAM4B,UAAU,UACb1B,mBACDH,MAAAC,cAAA,OAAK4B,UAAU,gBAAf,qBAMN7B,MAAAC,cAACuD,iBACCC,KAAM9F,KAAKG,MAAMuB,aAAaoE,KAC9BC,QAAS/F,KAAKG,MAAMuB,aAAaqE,QACjCC,OAAQhG,KAAKG,MAAME,eACnB4F,iBAAAtG,0BAAA9C,WAGJwF,MAAAC,cAAAjD,MAAA0F,SAASC,MAAOP,QAAQ,GAAGrI,IACzBiG,MAAAC,cAAA,OAAK4B,UAAU,OACb7B,MAAAC,cAAA,OAAK4B,UAAU,aACb7B,MAAAC,cAAAxD,aAAAjC,SACEoI,OAAO,UACPC,KAAK,mBACL9I,GAAG,mBACH+I,IAAI,kBACJC,QAAS,EACTC,aAAcrF,KAAKG,MAAM2B,cAAcwD,KACvCC,SAAUvF,KAAKe,sBACfyE,OAAQxF,KAAKG,MAAMG,iBAEnB+B,MAAAC,cAAA,WACAD,MAAAC,cAACmD,cAAD,MACApD,MAAAC,cAACmD,cAAD,MACApD,MAAAC,cAACoD,eAAchB,MAAM,gBAAgBiB,KAAK,QAAQC,YAAa5F,KAAKgB,iBAGxEqB,MAAAC,cAAA,OAAK4B,UAAU,YACb7B,MAAAC,cAAA,QAAM4B,UAAU,UACbzB,mBACDJ,MAAAC,cAAA,OAAK4B,UAAU,gBAAf,oBAMN7B,MAAAC,cAACuD,iBACCC,KAAM9F,KAAKG,MAAM2B,cAAcgE,KAC/BC,QAAS/F,KAAKG,MAAM2B,cAAciE,QAClCC,OAAQhG,KAAKG,MAAMG,gBACnB2F,iBAAApG,2BAAAhD,iBF4IFiD,cElbiBuC,MAAM6D,UA+SjChF,GAAE,WACA,GAAMiF,cACJ9D,MAAAC,cAAA,OAAK4B,UAAU,gBACb7B,MAAAC,cAACxC,cACCsB,gBAAoBsB,MAAMqB,QAA1B,wBACAlC,iBAAqBa,MAAMqB,QAA3B,8DACAhC,YAAgBW,MAAMqB,QAAtB,wDAKNqC,UAASC,OAAOF,aAAcG,SAASC,eAAe,sBF2IlD,SAASpK,OAAQD,QAASH,qBAE/B,YAYA,SAASW,wBAAuBC,KAAO,MAAOA,MAAOA,IAAIC,WAAaD,KAAQE,QAASF,KAEvF,QAASG,iBAAgBC,SAAUC,aAAe,KAAMD,mBAAoBC,cAAgB,KAAM,IAAIC,WAAU,qCAEhH,QAASC,4BAA2BC,KAAMb,MAAQ,IAAKa,KAAQ,KAAM,IAAIC,gBAAe,4DAAgE,QAAOd,MAAyB,gBAATA,OAAqC,kBAATA,MAA8Ba,KAAPb,KAElO,QAASe,WAAUC,SAAUC,YAAc,GAA0B,kBAAfA,aAA4C,OAAfA,WAAuB,KAAM,IAAIN,WAAU,iEAAoEM,YAAeD,UAASE,UAAYC,OAAOC,OAAOH,YAAcA,WAAWC,WAAaG,aAAeC,MAAON,SAAUO,YAAY,EAAOC,UAAU,EAAMC,cAAc,KAAeR,aAAYE,OAAOO,eAAiBP,OAAOO,eAAeV,SAAUC,YAAcD,SAASW,UAAYV,YAhBjeE,OAAOgB,eAAevC,QAAS,cAC7B0B,OAAO,GAGT,IAAIM,cAAe,WAAc,QAASC,kBAAiBC,OAAQC,OAAS,IAAK,GAAIC,GAAI,EAAGA,EAAID,MAAME,OAAQD,IAAK,CAAE,GAAIE,YAAaH,MAAMC,EAAIE,YAAWX,WAAaW,WAAWX,aAAc,EAAOW,WAAWT,cAAe,EAAU,SAAWS,cAAYA,WAAWV,UAAW,GAAML,OAAOgB,eAAeL,OAAQI,WAAWE,IAAKF,aAAiB,MAAO,UAAUxB,YAAa2B,WAAYC,aAAiJ,MAA9HD,aAAYR,iBAAiBnB,YAAYQ,UAAWmB,YAAiBC,aAAaT,iBAAiBnB,YAAa4B,aAAqB5B,gBG/cjiBwJ,OAAAzK,oBAAA,GHmdK0K,QAAU/J,uBAAuB8J,QGnchCE,WHieY,SAAU3G,kBG/d1B,QAAA2G,YAAYrI,OAAOvB,gBAAAkD,KAAA0G,WAAA,IAAAzG,OAAA/C,2BAAA8C,MAAA0G,WAAAzI,WAAAR,OAAAyC,eAAAwG,aAAApK,KAAA0D,KACX3B,OADW,OAIjB4B,OAAKiC,YAAcjC,MAAKiC,YAAYxB,KAAjBT,OACnBA,MAAK0G,gBAAkB1G,MAAK0G,gBAAgBjG,KAArBT,OACvBA,MAAK2G,UAAY3G,MAAK2G,UAAUlG,KAAfT,OACjBA,MAAK4G,gBAAkB5G,MAAK4G,gBAAgBnG,KAArBT,OAIvBA,MAAK6G,YAAcC,YAAYC,MAXd/G,MHqpBlB,MArLA5C,WAAUqJ,WAAY3G,kBAmBtB7B,aAAawI,aACXhI,IAAK,oBACLd,MAAO,WGteR,GAAI4H,WACAsB,YAAc9G,KAAK8G,WAGvBrJ,QAAOwJ,KAAKH,aAAaI,QAAQ,SAASxI,KACxC,GAAIyI,WAAqB,gBAARzI,IAAyB,SAAWA,GACrD8G,QAAO2B,YACLvJ,MAAOkJ,YAAYpI,KACnB0I,YAAY,KAKhBpH,KAAK3B,MAAMkH,SAASC,WH+enB9G,IAAK,cACLd,MAAO,WGzeRoC,KAAK8G,YAAcC,YAAYM,MAAMrH,KAAK3B,MAAM4G,QAChDjF,KAAK3B,MAAMkH,gBHqfV7G,IAAK,kBACLd,MAAO,WG5eR,GAAI0J,gBAkCJ,OAjCAjF,OAAMkF,SAASL,QAAQlH,KAAK3B,MAAMmJ,SAAU,SAASC,MAAO/I,KAE1D,GAAI2D,MAAMqF,eAAeD,QACD,kBAAfA,OAAM9B,MACb8B,MAAMpJ,MAAMuH,YACZ,CACA,GAAI+B,cAAeF,MAAMpJ,MAAMuH,YAC3BgC,aAAeD,aAAazC,KAC5B2C,YAAcJ,MAAM9B,KAAKmC,YACzBC,eAAuC,WAArBN,MAAMpJ,MAAM6G,KAAqB,cAAgBuC,MAAMpJ,MAAM6G,KAC/E8C,YAAchI,KAAK8G,YAAYiB,eAGd,iBAAjBH,eAEAD,aADkB,kBAAhBE,aAAwD,UAArBJ,MAAMpJ,MAAMsH,KAClC3F,KAAKkC,YAELlC,KAAK6G,gBAAgBnG,KAAK,KAAMmH,cAInDP,aAAaW,KAAK5F,MAAM6F,aAAaT,OACnC7B,YAAa+B,aACb/J,MAAOoK,YAAcA,YAAc,GACnCtJ,IAAKA,OAGPsB,KAAK4G,UAAUiB,YAAaJ,MAAMpJ,MAAM6G,KAAM8C,iBAE9CV,cAAaW,KAAK5F,MAAM6F,aAAaT,OAAQ/I,IAAKA,QAEpDgC,KAAKV,OAEAsH,gBH4fN5I,IAAK,YACLd,MAAO,SG7eA+H,KAAMjH,IAAKd,OACnB,GAAI4H,UAaJ,OAZIxF,MAAK3B,MAAMmH,SACbA,OAAS2C,KAAKC,MAAMD,KAAKE,UAAUrI,KAAK3B,MAAMmH,UAG5C9G,KAAOd,OACT4H,OAAO9G,QACP8G,OAAO9G,KAAKd,MAAQA,MACpB4H,OAAO9G,KAAK0I,WAAuB,kBAATzB,MACjBH,QAAU9G,KAAiB,KAAVd,aACnB4H,QAAO9G,KAGT8G,UHyfN9G,IAAK,kBACLd,MAAO,SGhfM+H,KAAM2C,UAAWC,YAE/B,GAAyB,gBAAdD,YAAgD,gBAAfC,YAA5C,CAKA,GAAIR,gBAAgC,WAAdO,UAA0B,cAAgBA,SAChEtI,MAAK8G,YAAcC,YAAYyB,IAAIxI,KAAK8G,YAAaiB,eAAgBQ,WAGrE,IAAI/C,QAASxF,KAAK4G,UAAUjB,KAAM2C,UAAWC,WAC7CvI,MAAK3B,MAAMkH,SAASC,YHmfnB9G,IAAK,SACLd,MAAO,WG/eR,GAAI0J,cAAetH,KAAK2G,kBACpBtB,aAAerF,KAAK3B,MAAMgH,YAU9B,OARIA,eACF5H,OAAOwJ,KAAK5B,cAAc6B,QAAQ,SAASoB,WACzC,GAAIP,gBAAgC,WAAdO,UAA0B,cAAgBA,SAChEjD,cAAaiD,WAAW1C,YAAc5F,KAAK6G,gBAAgBnG,KAAK,KAAM4H,WACtEjD,aAAaiD,WAAW1K,MAAQoC,KAAK8G,YAAYiB,iBACjDrH,KAAKV,OAIPqC,MAAAC,cAAAmE,QAAA5J,SACET,GAAI4D,KAAK3B,MAAMjC,GACfqM,OAAQzI,KAAK3B,MAAMoK,OACnB3F,MAAO9C,KAAK3B,MAAMyE,OAElBT,MAAAC,cAACoG,YAAgB1I,KAAK3B,MACnBiJ,mBH0fDZ,YGvpBerE,MAAM6D,UAoK/BQ,YAAWiC,cACTvM,GAAI,mBACJqM,OAAQ,OACR3F,MAAO,mBACPyC,SAAU,WACR3D,QAAQgH,KAAK,qCAGjBlC,WAAWmC,WACT5D,OAAQ5C,MAAMyG,UAAUC,OAAOC,WAC/BxD,OAAQnD,MAAMyG,UAAUG,OAAOD,WAC/B5M,GAAIiG,MAAMyG,UAAUC,OACpBN,OAAQpG,MAAMyG,UAAUC,OACxBjG,MAAOT,MAAMyG,UAAUC,OACvBxD,SAAUlD,MAAMyG,UAAUI,MHyf3BhN,QAAQW,QGtfM6J,YH0fT,SAASvK,OAAQD,SAEtB,YAQA,SAASY,iBAAgBC,SAAUC,aAAe,KAAMD,mBAAoBC,cAAgB,KAAM,IAAIC,WAAU,qCAEhH,QAASC,4BAA2BC,KAAMb,MAAQ,IAAKa,KAAQ,KAAM,IAAIC,gBAAe,4DAAgE,QAAOd,MAAyB,gBAATA,OAAqC,kBAATA,MAA8Ba,KAAPb,KAElO,QAASe,WAAUC,SAAUC,YAAc,GAA0B,kBAAfA,aAA4C,OAAfA,WAAuB,KAAM,IAAIN,WAAU,iEAAoEM,YAAeD,UAASE,UAAYC,OAAOC,OAAOH,YAAcA,WAAWC,WAAaG,aAAeC,MAAON,SAAUO,YAAY,EAAOC,UAAU,EAAMC,cAAc,KAAeR,aAAYE,OAAOO,eAAiBP,OAAOO,eAAeV,SAAUC,YAAcD,SAASW,UAAYV,YAVjeE,OAAOgB,eAAevC,QAAS,cAC7B0B,OAAO,GAGT,IAAIM,cAAe,WAAc,QAASC,kBAAiBC,OAAQC,OAAS,IAAK,GAAIC,GAAI,EAAGA,EAAID,MAAME,OAAQD,IAAK,CAAE,GAAIE,YAAaH,MAAMC,EAAIE,YAAWX,WAAaW,WAAWX,aAAc,EAAOW,WAAWT,cAAe,EAAU,SAAWS,cAAYA,WAAWV,UAAW,GAAML,OAAOgB,eAAeL,OAAQI,WAAWE,IAAKF,aAAiB,MAAO,UAAUxB,YAAa2B,WAAYC,aAAiJ,MAA9HD,aAAYR,iBAAiBnB,YAAYQ,UAAWmB,YAAiBC,aAAaT,iBAAiBnB,YAAa4B,aAAqB5B,gBInsB3hBmM,MJutBO,SAAUpJ,kBIrtBrB,QAAAoJ,OAAY9K,OAAOvB,gBAAAkD,KAAAmJ,MAAA,IAAAlJ,OAAA/C,2BAAA8C,MAAAmJ,MAAAlL,WAAAR,OAAAyC,eAAAiJ,QAAA7M,KAAA0D,KACX3B,OADW,OAGjB4B,OAAKE,OACHiJ,UAAWnJ,MAAK5B,MAAMgL,eAIxBpJ,MAAKqJ,WACHrJ,MAAK5B,MAAMgL,cACT,0BACA,6BAGJpJ,MAAKsJ,gBAAkBtJ,MAAKsJ,gBAAgB7I,KAArBT,OAdNA,MJkzBlB,MA5FA5C,WAAU8L,MAAOpJ,kBAkBjB7B,aAAaiL,QACXzK,IAAK,kBACLd,MAAO,WIxtBRoC,KAAKyB,UAAU2H,WAAYpJ,KAAKG,MAAMiJ,eJ4tBrC1K,IAAK,SACLd,MAAO,WIxtBR,GAAI4L,YACFxJ,KAAKG,MAAMiJ,UACT,8CACA,4CAGAK,kBACAzJ,MAAK3B,MAAMqL,OACbD,YACEpH,MAAAC,cAAA,QACE4B,UAAU,wCACVjB,OAAQ0G,YAAY,OAAQC,OAAQ,WACpCC,QAAS7J,KAAK3B,MAAMqL,OAK1B,IAAII,iBACA9J,MAAK3B,MAAM0L,MACbD,UACEzH,MAAAC,cAAA,QACE4B,UAAU,sCACVjB,OAAQ0G,YAAY,OAAQC,OAAQ,WACpCC,QAAS7J,KAAK3B,MAAM0L,MAK1B,IAAIC,mBACAhK,MAAK3B,MAAM4L,SACbD,YACE3H,MAAAC,cAAA,QACE4B,UAAU,wCACVjB,OAAQ0G,YAAY,OAAQC,OAAQ,WACpCC,QAAS7J,KAAK3B,MAAM4L,SAM1B,IAAMC,cAAelK,KAAK3B,MAAMyE,MAC9BT,MAAAC,cAAA,OACE4B,UAAU,iBAEV7B,MAAAC,cAAA,QACE4B,UAAWsF,WACXK,QAAS7J,KAAKuJ,gBACdY,cAAY,WACZC,cAAa,IAAMpK,KAAK3B,MAAMjC,GAC9B6G,OAAQ2G,OAAQ,aAEjBH,YACAK,UACAE,YACAhK,KAAK3B,MAAMyE,OAEZ,EAEJ,OACET,OAAAC,cAAA,OAAK4B,UAAU,uBACZgG,aACD7H,MAAAC,cAAA,OAAKlG,GAAI4D,KAAK3B,MAAMjC,GAAI8H,UAAWlE,KAAKsJ,WAAYe,KAAK,YACvDhI,MAAAC,cAAA,OAAK4B,UAAU,aAAajB,OAAQwF,OAAQzI,KAAK3B,MAAMoK,SACpDzI,KAAK3B,MAAMmJ,gBJ4tBd2B,OIpzBU9G,MAAM6D,UAgG1BiD,OAAMN,WACJzM,GAAIiG,MAAMyG,UAAUC,OACpBN,OAAQpG,MAAMyG,UAAUC,OACxBjG,MAAOT,MAAMyG,UAAUC,OACvBW,KAAMrH,MAAMyG,UAAUI,KACtBa,IAAK1H,MAAMyG,UAAUI,MAEvBC,MAAMR,cACJU,eAAe,EACfjN,GAAI,gBACJqM,OAAQ,QJ0tBTvM,QAAQW,QIvtBMsM,OJ2tBT,SAAShN,OAAQD,QAASH,qBAE/B,YAYA,SAASW,wBAAuBC,KAAO,MAAOA,MAAOA,IAAIC,WAAaD,KAAQE,QAASF,KAEvF,QAASG,iBAAgBC,SAAUC,aAAe,KAAMD,mBAAoBC,cAAgB,KAAM,IAAIC,WAAU,qCAEhH,QAASC,4BAA2BC,KAAMb,MAAQ,IAAKa,KAAQ,KAAM,IAAIC,gBAAe,4DAAgE,QAAOd,MAAyB,gBAATA,OAAqC,kBAATA,MAA8Ba,KAAPb,KAElO,QAASe,WAAUC,SAAUC,YAAc,GAA0B,kBAAfA,aAA4C,OAAfA,WAAuB,KAAM,IAAIN,WAAU,iEAAoEM,YAAeD,UAASE,UAAYC,OAAOC,OAAOH,YAAcA,WAAWC,WAAaG,aAAeC,MAAON,SAAUO,YAAY,EAAOC,UAAU,EAAMC,cAAc,KAAeR,aAAYE,OAAOO,eAAiBP,OAAOO,eAAeV,SAAUC,YAAcD,SAASW,UAAYV,YAhBjeE,OAAOgB,eAAevC,QAAS,cAC7B0B,OAAO,GAGT,IAAIM,cAAe,WAAc,QAASC,kBAAiBC,OAAQC,OAAS,IAAK,GAAIC,GAAI,EAAGA,EAAID,MAAME,OAAQD,IAAK,CAAE,GAAIE,YAAaH,MAAMC,EAAIE,YAAWX,WAAaW,WAAWX,aAAc,EAAOW,WAAWT,cAAe,EAAU,SAAWS,cAAYA,WAAWV,UAAW,GAAML,OAAOgB,eAAeL,OAAQI,WAAWE,IAAKF,aAAiB,MAAO,UAAUxB,YAAa2B,WAAYC,aAAiJ,MAA9HD,aAAYR,iBAAiBnB,YAAYQ,UAAWmB,YAAiBC,aAAaT,iBAAiBnB,YAAa4B,aAAqB5B,gBK51BjiBsN,aAAAvO,oBAAA,GLg2BKwO,cAAgB7N,uBAAuB4N,cKp1BtCE,oBLw2BqB,SAAUzK,kBKv2BnC,QAAAyK,qBAAYnM,OAAOvB,gBAAAkD,KAAAwK,oBAAA,IAAAvK,OAAA/C,2BAAA8C,MAAAwK,oBAAAvM,WAAAR,OAAAyC,eAAAsK,sBAAAlO,KAAA0D,KACX3B,OADW,OAGjB4B,OAAKE,OACHsK,YACAC,aAAc,KACdC,cACAC,iBAAkBC,MAClBC,kBAAmB,GAGrB7K,MAAK8K,aAAe9K,MAAK8K,aAAarK,KAAlBT,OACpBA,MAAK+K,aAAe/K,MAAK+K,aAAatK,KAAlBT,OACpBA,MAAKgL,YAAchL,MAAKgL,YAAYvK,KAAjBT,OACnBA,MAAKiL,kBAAoBjL,MAAKiL,kBAAkBxK,KAAvBT,OACzBA,MAAKkL,eAAiBlL,MAAKkL,eAAezK,KAApBT,OACtBA,MAAKmL,eAAiBnL,MAAKmL,eAAe1K,KAApBT,OACtBA,MAAKoL,mBAAqBpL,MAAKoL,mBAAmB3K,KAAxBT,OAjBTA,MLgzClB,MAxcA5C,WAAUmN,oBAAqBzK,kBAyB/B7B,aAAasM,sBACX9L,IAAK,oBACLd,MAAO,WK12BR,GAAI6M,UAAWzK,KAAK3B,MAAMoM,UAAYzK,KAAKG,MAAMsK,QAK7CzK,MAAK3B,MAAMiN,oBACbb,SAAA,kBAAgCzK,KAAK3B,MAAMiN,kBAC3Cb,SAAA,MAAoBzK,KAAK3B,MAAMkN,YAC/Bd,SAAA,WAAyBzK,KAAK3B,MAAMmN,UACpCf,SAAA,OAAqBzK,KAAK3B,MAAMoN,QAGlCzL,KAAKyB,UAAUgJ,uBLk3Bd/L,IAAK,SACLd,MAAO,WKh3BD,GAAA8N,QAAA1L,KAGH2L,iBAAmBlO,OAAOwJ,KAAKjH,KAAKG,MAAMyK,iBAC1CgB,gBACAtN,EAAI,EALDuN,2BAAA,EAAAC,mBAAA,EAAAC,eAAAC,MAAA,KAMP,OAAAC,OANOC,MAAA,cAMExN,KANFuN,MAAArO,KAOLgO,cAAa3D,KACX5F,MAAAC,cAAAiI,cAAA1N,SACE6B,IAAKA,IACLyN,WAAYzN,IACZtC,GAAIkC,EACJmM,SAAUiB,OAAKvL,MAAMyK,gBAAgBlM,KACnCgN,OAAKvL,MAAMyK,gBAAgBlM,KAAO,KACpC0N,kBAA+C,IAA5BT,iBAAiBpN,OAClC,iBAAMmN,QAAKU,kBAAkB1N,MAAO,KACtC0M,eAAgB9M,GAAKqN,iBAAiBpN,OAASmN,OAAKN,eAAiB,KACrEiB,gBAAiB/N,GAAKqN,iBAAiBpN,QAAUmN,OAAKvL,MAAMyK,gBAAgBlM,KAC1EgN,OAAKW,gBAAgB3L,KAArBgL,OAAgChN,KAAO,KACzCwM,kBAAmBQ,OAAKL,mBACxBiB,SAAUZ,OAAKrN,MAAMiO,SACrB1J,cAAe8I,OAAKrN,MAAMuE,cAC1BC,sBAAuB6I,OAAKrN,MAAMwE,sBAClCM,qBAAsBuI,OAAKrN,MAAM8E,qBACjCC,uBAAwBsI,OAAKrN,MAAM+E,uBACnCC,mBAAoBqI,OAAKrN,MAAMgF,mBAC/BC,iBAAkBoI,OAAKrN,MAAMiF,iBAC7BC,WAAYmI,OAAKrN,MAAMkF,WACvBC,oBAAqBkI,OAAKrN,MAAMmF,oBAChCC,qBAAsBiI,OAAKrN,MAAMoF,qBACjCC,kBAAmBgI,OAAKrN,MAAMqF,kBAC9B6I,MAAOb,OAAKrN,MAAMkO,SAItBjO,KA7BFkO,UAAgBb,iBAAhBc,OAAAC,cAAAb,2BAAAI,MAAAO,UAAAG,QAAAC,MAAAf,2BAAA,EAAkCK,QAN3B,MAAAW,KAAAf,mBAAA,EAAAC,eAAAc,IAAA,aAAAhB,2BAAAW,UAAAM,QAAAN,UAAAM,SAAA,WAAAhB,kBAAA,KAAAC,iBAsCP,GAAIgB,qBACAC,8BAoEJ,OAnEIhN,MAAK3B,MAAMiN,mBACbyB,aACE1K,MAAAC,cAAA,WACED,MAAAC,cAACmD,eACCf,MAAM,kBACNuI,KAAMjN,KAAK3B,MAAM6O,yBAEnB7K,MAAAC,cAACmD,eACCf,MAAM,QACNuI,KAAMjN,KAAK3B,MAAM8O,QAEnB9K,MAAAC,cAACmD,eACCf,MAAM,cACNuI,KAAMjN,KAAK3B,MAAM+O,SAMvBJ,wBACE3K,MAAAC,cAAA,WACED,MAAAC,cAAC+K,gBACCnI,KAAK,WACLR,MAAM,qBACNkB,YAAa5F,KAAKiL,YAClBqC,UAAU,EACV1P,MAAOoC,KAAKG,MAAMsK,SAAS8C,WAE7BlL,MAAAC,cAACkL,eACCtI,KAAK,SACLR,MAAM,OACN+I,QAASzN,KAAK3B,MAAMgG,cACpBuB,YAAa5F,KAAKiL,YAClByC,aAAa,EACbJ,UAAU,EACV1P,MAAOoC,KAAKG,MAAMsK,SAASgB,WAKjCsB,aACI1K,MAAAC,cAAA,WACED,MAAAC,cAACqL,oBACCzI,KAAK,QACLR,MAAM,QACN+I,QAASzN,KAAK3B,MAAMsF,OACpBiC,YAAa5F,KAAKiL,YAClB9F,IAAI,QACJmI,UAAU,EACV1P,MAAOoC,KAAKG,MAAMsK,SAAS0C,MAC3BS,YAAY,uBAEdvL,MAAAC,cAACkL,eACCtI,KAAK,aACLR,MAAM,cACN+I,QAASzN,KAAKG,MAAMyD,OACpBgC,YAAa5F,KAAKiL,YAClB9F,IAAI,aACJmI,UAAU,EACV1P,MAAOoC,KAAKG,MAAMsK,SAASoD,WAC3BC,UAAU9N,KAAKG,MAAMsK,SAAS0C,SAQtC9K,MAAAC,cAACoG,aACCxD,KAAK,eACL9I,GAAG,eACH2R,SAAU/N,KAAK+K,aACf5F,IAAI,QAEJ9C,MAAAC,cAAA,OAAK4B,UAAU,OACb7B,MAAAC,cAAA,OAAK4B,UAAU,4BACZ6I,aACAC,0BAGJpB,aACDvJ,MAAAC,cAACoD,eACChB,MAAM,SACNsJ,WAAW,kCLs6BhBtP,IAAK,eACLd,MAAO,SK74BGqQ,YAAarQ,OAAO,GAAAsQ,QAAAlO,KAC3B2K,WAAa3K,KAAKG,MAAMwK,UAGR,aAAhBsD,aAAuC,KAAVrQ,QACzB,SAASuQ,KAAKnO,KAAKG,MAAMsK,SAAS2D,SAGtCzD,WAAWyD,SAAU,EAFrBzD,WAAWyD,SAAU,GAOL,aAAhBH,aAAwC,KAAVrQ,QAC5ByQ,MAAMzQ,QAAWA,MAAQoC,KAAK3B,MAAMkF,WAAWvD,KAAKG,MAAMmO,sBAC5D3D,WAAW4C,UAAW,EAEtB5C,WAAW4C,UAAW,EAK1B,IAAIgB,0BAA2BvO,KAAK3B,MAAM+E,uBAAuBpD,KAAKG,MAAMqO,oBACnD/Q,QAAOwJ,KAAKsH,0BAA0BE,IAAI,SAACC,WAElE,GAAIC,UAAWT,OAAK7P,MAAMgF,mBAAmBkL,yBAAyBG,WAAzB,YAAmDC,QAC/E,YAAbA,UACEV,cAAgBS,YACdL,MAAMzQ,QAAoB,KAAVA,MAClB+M,WAAW+D,YAAa,EAExB/D,WAAW+D,YAAa,IAMhC1O,MAAKyB,UACHkJ,WAAYA,gBLy5BbjM,IAAK,eACLd,MAAO,SKh5BGgR,GACXA,EAAEC,gBAEF,IAAIpE,UAAWzK,KAAKG,MAAMsK,SAEtBqE,UADkB9O,KAAKG,MAAMyK,gBAClB5K,KAAKgC,KAIfhC,MAAK+O,YAAYD,SAAUrE,WAIhCzK,KAAKmL,oBLw5BJzM,IAAK,iBACLd,MAAO,WKj5BR,GAAI6M,UAAWzK,KAAKG,MAAMsK,SACtBG,gBAAkB5K,KAAKG,MAAMyK,eACjCH,UAAA,gBAA8BtC,KAAKE,UAAUuC,gBAC7C,IAAIoE,SAAU,GAAIC,SAClB,KAAK,GAAIvQ,QAAO+L,UACQ,KAAlBA,SAAS/L,OACXsQ,QAAQE,OAAOxQ,KAAK+L,SAAS/L,MAIjCwC,GAAEC,MACAwE,KAAM,OACNwJ,IAAKnP,KAAK3B,MAAMyF,OAChBtC,KAAMwN,QACNI,OAAO,EACPC,aAAa,EACbC,aAAa,EACbC,IAAK,WACH,GAAIA,KAAM,GAAIC,QAAOC,cACrB,OAAOF,MACP7O,KAAKV,MACPuB,QAAS,WAEPvB,KAAK3B,MAAM2F,gBACX0L,KAAK,kCAAmC,GAAI,WAC5C1P,KAAK3B,MAAMsR,aACXjP,KAAKV,MACP2B,MAAO,SAASkL,KACdjL,QAAQD,MAAMkL,IACd,IAAI+C,KAAM/C,IAAIgD,aAAehD,IAAIgD,aAAaC,QAAU,iBACxD9P,MAAKyB,UACHiJ,aAAckF,MAEhBF,KAAKE,IAAK,GAAI,UACdlP,KAAKV,WLi6BRtB,IAAK,cACLd,MAAO,QAASmR,aKt5BPD,SAAUrE,UACpB,GAAIsE,cAAc,EAEdgB,gBACF5C,MAAO,KACPU,WAAY,KAad,OAVApQ,QAAOwJ,KAAK8I,gBAAgBtB,IAAI,SAASuB,OACnCvF,SAASuF,OACXD,eAAeC,OAASvF,SAASuF,OACxBlB,SAASkB,SAClBlB,SAASkB,OAAO3R,MAAM4R,UAAW,EACjClB,aAAc,KAGlB/O,KAAKkQ,cAEEnB,eLi6BNrQ,IAAK,cACLd,MAAO,SKz5BEqQ,YAAarQ,OAIvBoC,KAAK3B,MAAMiO,mBAAoB6D,WAAYnQ,KAAK3B,MAAMiO,WAElC,UAAhB2B,aAAqC,KAAVrQ,OAA0BoO,SAAVpO,QAC7CoC,KAAKG,MAAMyD,OAAS5D,KAAK3B,MAAMwF,YAAY7D,KAAK3B,MAAMsF,OAAO/F,QAAQgG,OAGvE,IAAI6G,UAAWzK,KAAKG,MAAMsK,QAC1BA,UAASwD,aAAerQ,MAExBoC,KAAKyB,UACFgJ,mBACDzK,KAAKkL,wBL05BNxM,IAAK,qBACLd,MAAO,SKv5BSwS,gBAAiBjE,YAClC,GAAI1B,UAAWzK,KAAKG,MAAMsK,SACtBG,gBAAkB5K,KAAKG,MAAMyK,eACjCA,iBAAgBuB,YAAciE,gBAC9B3F,SAAA,gBAA8BG,gBAE9B5K,KAAKyB,UACFgJ,mBACDzK,KAAKkL,wBLw5BNxM,IAAK,iBACLd,MAAO,WKp5BR,GAAIgN,iBAAkB5K,KAAKG,MAAMyK,gBAC7ByF,MAAQrQ,KAAKG,MAAM2K,iBAEvBF,iBAAgByF,MAAM,MAEtBrQ,KAAKyB,UACHmJ,gBAAiBA,gBACjBE,kBAAmBuF,MAAQ,OLy5B5B3R,IAAK,kBACLd,MAAO,SKt5BMc,IAAK4R,YAKnB,IAAK,GAJDD,OAAQrQ,KAAKG,MAAM2K,kBACnByF,QAAUF,MAAM,EAChBzF,gBAAkB5K,KAAKG,MAAMyK,gBAExBtM,EAAE,EAAGA,GAAGgS,WAAYhS,IAC3BsM,gBAAgB2F,SAAWpI,KAAKC,MAAMD,KAAKE,UAAUuC,gBAAgBlM,aAC9DkM,iBAAgB2F,SAASnC,QAChCmC,SAGFvQ,MAAKyB,UACHmJ,gBAAiBA,gBACjBE,kBAAmByF,aL05BpB7R,IAAK,oBACLd,MAAO,SKv5BQc,KAChB,GAAIkM,iBAAkB5K,KAAKG,MAAMyK,sBAC1BA,iBAAgBlM,KAEvBsB,KAAKyB,UACHmJ,gBAAiBA,qBL25BlBlM,IAAK,oBACLd,MAAO,WKv5BR,GAAIoC,KAAK3B,MAAM6M,kBAAmB,CAChC,GAAIT,UAAWzK,KAAKG,MAAMsK,QAC1BzK,MAAK3B,MAAM6M,kBAAkBT,eL65BzBD,qBKjzCwBnI,MAAM6D,UAyZxCsE,qBAAoB3B,WAClB2H,QAASnO,MAAMyG,UAAUC,OAAOC,WAChClF,OAAQzB,MAAMyG,UAAUC,OAAOC,WAC/BoF,QAAS/L,MAAMyG,UAAUC,OACzB0H,aAAcpO,MAAMyG,UAAUI,ML85B/BhN,QAAQW,QK35BM2N,qBL+5BT,SAASrO,OAAQD,QAASH,qBAE/B,YAYA,SAASW,wBAAuBC,KAAO,MAAOA,MAAOA,IAAIC,WAAaD,KAAQE,QAASF,KAEvF,QAASG,iBAAgBC,SAAUC,aAAe,KAAMD,mBAAoBC,cAAgB,KAAM,IAAIC,WAAU,qCAEhH,QAASC,4BAA2BC,KAAMb,MAAQ,IAAKa,KAAQ,KAAM,IAAIC,gBAAe,4DAAgE,QAAOd,MAAyB,gBAATA,OAAqC,kBAATA,MAA8Ba,KAAPb,KAElO,QAASe,WAAUC,SAAUC,YAAc,GAA0B,kBAAfA,aAA4C,OAAfA,WAAuB,KAAM,IAAIN,WAAU,iEAAoEM,YAAeD,UAASE,UAAYC,OAAOC,OAAOH,YAAcA,WAAWC,WAAaG,aAAeC,MAAON,SAAUO,YAAY,EAAOC,UAAU,EAAMC,cAAc,KAAeR,aAAYE,OAAOO,eAAiBP,OAAOO,eAAeV,SAAUC,YAAcD,SAASW,UAAYV,YAhBjeE,OAAOgB,eAAevC,QAAS,cAC7B0B,OAAO,GAGT,IAAIM,cAAe,WAAc,QAASC,kBAAiBC,OAAQC,OAAS,IAAK,GAAIC,GAAI,EAAGA,EAAID,MAAME,OAAQD,IAAK,CAAE,GAAIE,YAAaH,MAAMC,EAAIE,YAAWX,WAAaW,WAAWX,aAAc,EAAOW,WAAWT,cAAe,EAAU,SAAWS,cAAYA,WAAWV,UAAW,GAAML,OAAOgB,eAAeL,OAAQI,WAAWE,IAAKF,aAAiB,MAAO,UAAUxB,YAAa2B,WAAYC,aAAiJ,MAA9HD,aAAYR,iBAAiBnB,YAAYQ,UAAWmB,YAAiBC,aAAaT,iBAAiBnB,YAAa4B,aAAqB5B,gBMn1CjiB0T,gBAAA3U,oBAAA,GNu1CK4U,iBAAmBjU,uBAAuBgU,iBM30CzCE,oBN+1CqB,SAAU7Q,kBM91CnC,QAAA6Q,qBAAYvS,OAAOvB,gBAAAkD,KAAA4Q,oBAAA,IAAA3Q,OAAA/C,2BAAA8C,MAAA4Q,oBAAA3S,WAAAR,OAAAyC,eAAA0Q,sBAAAtU,KAAA0D,KACX3B,OADW,OAGjB4B,OAAKE,OACHsK,YACAE,cACAvB,WAAW,EACXyH,eAAgB,GAGlB5Q,MAAKgL,YAAchL,MAAKgL,YAAYvK,KAAjBT,OACnBA,MAAK6Q,iBAAmB7Q,MAAK6Q,iBAAiBpQ,KAAtBT,OACxBA,MAAKiL,kBAAoBjL,MAAKiL,kBAAkBxK,KAAvBT,OACzBA,MAAK8Q,eAAiB9Q,MAAK8Q,eAAerQ,KAApBT,OACtBA,MAAK+Q,kBAAoB/Q,MAAK+Q,kBAAkBtQ,KAAvBT,OACzBA,MAAKgR,KAAOhR,MAAKgR,KAAKvQ,KAAVT,OAfKA,MN6lDlB,MA9PA5C,WAAUuT,oBAAqB7Q,kBAuB/B7B,aAAa0S,sBACXlS,IAAK,oBACLd,MAAO,WMr2CR,GAAIoC,KAAK3B,MAAMoM,SAAU,CACvB,GAAIA,UAAWzK,KAAK3B,MAAMoM;AAE1BzK,KAAKyB,UACHgJ,SAAUA,eN22Cb/L,IAAK,iBACLd,MAAO,WMt2CRoC,KAAKyB,UAAU2H,WAAYpJ,KAAKG,MAAMiJ,eN02CrC1K,IAAK,oBACLd,MAAO,SMx2CQgR,GAChB,GAAIiC,gBAAiBjC,EAAExQ,OAAOR,KAE9BoC,MAAKyB,UACHoP,eAAgBA,oBN42CjBnS,IAAK,OACLd,MAAO,WMx2CRoC,KAAK3B,MAAMgO,gBAAgBrM,KAAKG,MAAM0Q,mBN42CrCnS,IAAK,SACLd,MAAO,WMz2CR,GAAIsT,6BACAC,0BACAC,6BACAC,0BACArR,MAAK3B,MAAM+M,iBACb8F,qBACE7O,MAAAC,cAAA,QAAM4B,UAAU,UACd7B,MAAAC,cAAA,OACE4B,UAAU,oBACV2F,QAAS7J,KAAK3B,MAAM+M,gBAFtB,MASJ+F,mBACE9O,MAAAC,cAAA,QAAM4B,UAAU,gBAAhB,cAMAlE,KAAK3B,MAAMgO,kBACb+E,sBACE/O,MAAAC,cAAA,QAAM4B,UAAU,UACd7B,MAAAC,cAAA,OACE4B,UAAU,oBACV2F,QAAS7J,KAAKiR,MAEd5O,MAAAC,cAAA,QAAM4B,UAAU,oCAItBmN,oBACEhP,MAAAC,cAAA,QAAM4B,UAAU,gBACd7B,MAAAC,cAAA,SACE4B,UAAU,wBACVyB,KAAK,SACL2L,IAAI,IACJC,IAAI,KACJtO,OAAQuO,MAAO,GAAItO,QAAS,UAC5BoJ,SAAUtM,KAAKgR,kBACfpT,MAAOoC,KAAKG,MAAM0Q,iBARtB,UAeJ,IAAIY,+BACJ,IAAIzR,KAAK3B,MAAM+N,kBAAmB,CAChC,GAAMsF,aACJC,MAAO,UACPC,WAAY,GACZhI,OAAQ,UACRiI,SAAU,GAGZJ,yBACEpP,MAAAC,cAAA,QACE4B,UAAU,6BACV2F,QAAS7J,KAAK3B,MAAM+N,kBACpBnJ,MAAOyO,aAKb,MACErP,OAAAC,cAACoG,aACCxD,KAAK,kBAEL7C,MAAAC,cAAA,OAAK4B,UAAU,OACb7B,MAAAC,cAAA,OAAK4B,UAAU,4BACb7B,MAAAC,cAAA,WACED,MAAAC,cAAC+K,gBACCnI,KAAK,UACLR,MAAO,WAAa1E,KAAK3B,MAAMjC,GAC/BwJ,YAAa5F,KAAKiL,YAClB9F,IAAI,UACJmI,UAAU,EACV1P,MAAOoC,KAAKG,MAAMsK,SAAS2D,YAIjC/L,MAAAC,cAAA,OAAK4B,UAAU,WAAWjB,OAAQ6O,YAAY,EAAGC,UAAU,KACzD1P,MAAAC,cAAA,QACE4B,UAAYlE,KAAKG,MAAMiJ,UAAY,mCAAqC,iCACxEnG,OAAQ2G,OAAQ,UAAWiI,SAAS,GAAIG,SAAS,WAAYC,MAAM,IACnE9H,cAAY,WACZC,cAAa,SAAWpK,KAAK3B,MAAMjC,GACnCyN,QAAS7J,KAAK+Q,iBAEfU,0BAGLpP,MAAAC,cAAA,OAAK4B,UAAU,OACb7B,MAAAC,cAAA,OAAK4B,UAAU,aACf7B,MAAAC,cAAA,OAAK4B,UAAU,YACb7B,MAAAC,cAAA,OAAKlG,GAAI,QAAU4D,KAAK3B,MAAMjC,GAAI8H,UAAU,YAC1C7B,MAAAC,cAAAqO,iBAAA9T,SACE4N,SAAUzK,KAAK3B,MAAMoM,SACrBS,kBAAmBlL,KAAK8Q,iBACxBxE,SAAUtM,KAAK3B,MAAMiO,SACrB1J,cAAe5C,KAAK3B,MAAMuE,cAC1BQ,uBAAwBpD,KAAK3B,MAAM+E,uBACnCC,mBAAoBrD,KAAK3B,MAAMgF,mBAC/BC,iBAAkBtD,KAAK3B,MAAMiF,iBAC7BT,sBAAuB7C,KAAK3B,MAAMwE,sBAClCM,qBAAsBnD,KAAK3B,MAAM8E,qBACjCK,oBAAqBxD,KAAK3B,MAAMmF,oBAChCC,qBAAsBzD,KAAK3B,MAAMoF,qBACjCC,kBAAmB1D,KAAK3B,MAAMqF,kBAC9BwO,MAAOlS,KAAK3B,MAAM6T,WAK1B7P,MAAAC,cAAA,OAAK4B,UAAU,OACb7B,MAAAC,cAAA,OAAK4B,UAAU,aACb7B,MAAAC,cAAA,OAAK4B,UAAU,aACf7B,MAAAC,cAAA,OAAK4B,UAAU,mBACZgN,qBACAC,oBAEH9O,MAAAC,cAAA,OAAK4B,UAAU,mBACZkN,sBACAC,2BNk5CV3S,IAAK,cACLd,MAAO,SMr4CEqQ,YAAarQ,OACvBoC,KAAK3B,MAAMiO,mBAAoB6D,WAAYnQ,KAAK3B,MAAMiO,UAEtD,IAAI7B,UAAWzK,KAAKG,MAAMsK,QAC1BA,UAASwD,aAAerQ,MAExBoC,KAAKyB,UAEHgJ,SAAUA,UAEVzK,KAAKkL,sBNs4CNxM,IAAK,mBACLd,MAAO,SMn4COuU,oBACf,GAAI1H,UAAWzK,KAAKG,MAAMsK,QAE1B,KAAK,GAAIuF,SAASmC,oBAChB1H,SAASuF,OAASmC,mBAAmBnC,MAGvChQ,MAAKyB,UAEDgJ,SAAUA,UAEZzK,KAAKkL,sBNo4CNxM,IAAK,oBACLd,MAAO,WMh4CRoC,KAAK3B,MAAM6M,kBAAkBlL,KAAKG,MAAMsK,SAAUzK,KAAK3B,MAAM8N,gBNq4CvDyE,qBM9lDwBvO,MAAM6D,UA6NxC0K,qBAAoB/H,WAClBzM,GAAIiG,MAAMyG,UAAUC,OACpBnG,cAAeP,MAAMyG,UAAUG,OAAOD,WACtCnG,sBAAuBR,MAAMyG,UAAUG,OAAOD,WAC9C5F,uBAAwBf,MAAMyG,UAAUG,OAAOD,WAC/C3F,mBAAoBhB,MAAMyG,UAAUG,OAAOD,WAC3CzF,WAAYlB,MAAMyG,UAAUG,OAAOD,YNu4CpC9M,QAAQW,QMp4CM+T,qBNw4CT,SAASzU,OAAQD,QAASH,qBAE/B,YAYA,SAASW,wBAAuBC,KAAO,MAAOA,MAAOA,IAAIC,WAAaD,KAAQE,QAASF,KAEvF,QAASyV,iBAAgBzV,IAAK+B,IAAKd,OAAiK,MAApJc,OAAO/B,KAAOc,OAAOgB,eAAe9B,IAAK+B,KAAOd,MAAOA,MAAOC,YAAY,EAAME,cAAc,EAAMD,UAAU,IAAkBnB,IAAI+B,KAAOd,MAAgBjB,IAE3M,QAASG,iBAAgBC,SAAUC,aAAe,KAAMD,mBAAoBC,cAAgB,KAAM,IAAIC,WAAU,qCAEhH,QAASC,4BAA2BC,KAAMb,MAAQ,IAAKa,KAAQ,KAAM,IAAIC,gBAAe,4DAAgE,QAAOd,MAAyB,gBAATA,OAAqC,kBAATA,MAA8Ba,KAAPb,KAElO,QAASe,WAAUC,SAAUC,YAAc,GAA0B,kBAAfA,aAA4C,OAAfA,WAAuB,KAAM,IAAIN,WAAU,iEAAoEM,YAAeD,UAASE,UAAYC,OAAOC,OAAOH,YAAcA,WAAWC,WAAaG,aAAeC,MAAON,SAAUO,YAAY,EAAOC,UAAU,EAAMC,cAAc,KAAeR,aAAYE,OAAOO,eAAiBP,OAAOO,eAAeV,SAAUC,YAAcD,SAASW,UAAYV,YAlBjeE,OAAOgB,eAAevC,QAAS,cAC7B0B,OAAO,GAGT,IAAIM,cAAe,WAAc,QAASC,kBAAiBC,OAAQC,OAAS,IAAK,GAAIC,GAAI,EAAGA,EAAID,MAAME,OAAQD,IAAK,CAAE,GAAIE,YAAaH,MAAMC,EAAIE,YAAWX,WAAaW,WAAWX,aAAc,EAAOW,WAAWT,cAAe,EAAU,SAAWS,cAAYA,WAAWV,UAAW,GAAML,OAAOgB,eAAeL,OAAQI,WAAWE,IAAKF,aAAiB,MAAO,UAAUxB,YAAa2B,WAAYC,aAAiJ,MAA9HD,aAAYR,iBAAiBnB,YAAYQ,UAAWmB,YAAiBC,aAAaT,iBAAiBnB,YAAa4B,aAAqB5B,gBOloDjiBqV,qBAAAtW,oBAAA,GPsoDKuW,sBAAwB5V,uBAAuB2V,sBOznD9CE,uBP+oDwB,SAAUxS,kBO9oDtC,QAAAwS,wBAAYlU,OAAOvB,gBAAAkD,KAAAuS,uBAAA,IAAAtS,OAAA/C,2BAAA8C,MAAAuS,uBAAAtU,WAAAR,OAAAyC,eAAAqS,yBAAAjW,KAAA0D,KACX3B,OADW,OAGjB4B,OAAKE,OACHsK,UAAWjJ,SACXgN,oBAAqBvO,MAAK5B,MAAMqL,KAAOzJ,MAAK5B,MAAMmU,aAAe,KACjElE,qBAAsBrO,MAAK5B,MAAMqL,KAAOzJ,MAAK5B,MAAMoU,cAAgB,MAGrExS,MAAKgL,YAAchL,MAAKgL,YAAYvK,KAAjBT,OACnBA,MAAKyS,6BAA+BzS,MAAKyS,6BAA6BhS,KAAlCT,OACpCA,MAAKiL,kBAAoBjL,MAAKiL,kBAAkBxK,KAAvBT,OACzBA,MAAK0S,2BAA6B1S,MAAK0S,2BAA2BjS,KAAhCT,OAClCA,MAAK2S,sBAAwB3S,MAAK2S,sBAAsBlS,KAA3BT,OAC7BA,MAAK4S,aAAe5S,MAAK4S,aAAanS,KAAlBT,OACpBA,MAAK6S,eAAiB7S,MAAK6S,eAAepS,KAApBT,OAfLA,MPogElB,MArXA5C,WAAUkV,uBAAwBxS,kBAuBlC7B,aAAaqU,yBACX7T,IAAK,oBACLd,MAAO,WOtpDU,GAAA8N,QAAA1L,KACdyK,SAAWzK,KAAKG,MAAMsK,QAE1B,IAAIzK,KAAK3B,MAAMoM,SAAU,CACvBA,SAAWzK,KAAK3B,MAAMoM,QACIzK,MAAKG,MAAMqO,mBAErCxO,MAAKyB,UACH+M,oBAAqB/D,SAAS+H,eAIlC,GAAIxS,KAAK3B,MAAMqL,KAAM,CACnBe,SAAA,WAA4BzK,KAAK3B,MAAM0U,WACvCtI,SAAA,YAA4BzK,KAAK3B,MAAM2U,YACvCvI,SAAA,aAA4BzK,KAAK3B,MAAMmU,aACvC/H,SAAA,cAA4BzK,KAAK3B,MAAMoU,cACvChI,SAAA,SAA4BzK,KAAK3B,MAAM4U,WAAW1F,SAClD9C,SAAA,OAA4BzK,KAAK3B,MAAM4U,WAAWxH,OAClDhB,SAAA,KAA4BzK,KAAK3B,MAAM4U,WAAWC,KAClDzI,SAAA,KAA4BzK,KAAK3B,MAAM4U,WAAWE,KAClD1I,SAAA,SAA4BzK,KAAK3B,MAAM4U,WAAWG,QAElD,IAAI7E,0BAA2BvO,KAAK3B,MAAM+E,uBAAuBpD,KAAKG,MAAMqO,oBAC5E,IAAID,yBACF,CAAyB9Q,OAAOwJ,KAAKsH,0BAA0BE,IAAI,SAACC,WAClEjE,SAASjJ,KAAKkN,WAAahD,OAAKrN,MAAM4U,WAAWzR,KAAKkN,cAK5D1O,KAAKyB,UACHgJ,SAAUA,cP4pDX/L,IAAK,iBACLd,MAAO,SOzpDKuE,UAAWC,iBACxB,GAAIZ,QACJ,KAAK,GAAIpF,MAAM+F,WACbX,KAAKpF,IAAM+F,UAAU/F,IAAIgG,gBAG3B,OAAOZ,SP4pDN9C,IAAK,SACLd,MAAO,WOzpDR,GAAIyV,oBACCrT,MAAK3B,MAAMqL,OACd2J,oBACEhR,MAAAC,cAAAgQ,sBAAAzV,SACEqO,kBAAmBlL,KAAK2S,2BACxBxP,qBAAsBnD,KAAK3B,MAAM8E,qBACjCK,oBAAqBxD,KAAK3B,MAAMmF,oBAChCC,qBAAsBzD,KAAK3B,MAAMoF,uBAKvC,IAAI6P,aACAtT,MAAK3B,MAAMqL,OACb4J,aACEjR,MAAAC,cAACoD,eAAchB,MAAM,WAMzB,IAAIhB,qBACJ,IAAI1D,KAAKG,MAAMqO,oBAAqB,CAGlC,IAAK,GAAIpS,MAAM4D,MAAK3B,MAAMqF,kBAAkB1D,KAAKG,MAAMqO,qBACrD9K,kBAAkBtH,IAAM4D,KAAK3B,MAAMqF,kBAAkB1D,KAAKG,MAAMqO,qBAAqBpS,IAAImX,IAG3F,IAAIhF,0BAA2BvO,KAAK3B,MAAM+E,uBAAuBpD,KAAKG,MAAMqO,oBAC5E,IAAID,yBACF,GAAIiF,oBAAqBxT,KAAK4S,sBAAsBrE,0BAIxD,GAAIkF,eA0DJ,OAzDIzT,MAAKG,MAAMqO,sBACbiF,eACEpR,MAAAC,cAAA,WACED,MAAAC,cAACkL,eACCtI,KAAK,gBACLR,MAAM,iBACN+I,QAASzN,KAAK3B,MAAMwE,sBACpB+C,YAAa5F,KAAKiL,YAClB9F,IAAI,gBACJmI,UAAU,EACV1P,MAAOoC,KAAKG,MAAMsK,SAASgI,gBAE7BpQ,MAAAC,cAAC+K,gBACCnI,KAAK,WACLR,MAAM,WACNkB,YAAa5F,KAAKiL,YAClB9F,IAAI,WACJmI,UAAU,EACV1P,MAAOoC,KAAKG,MAAMsK,SAAS8C,WAE7BlL,MAAAC,cAACkL,eACCtI,KAAK,SACLR,MAAM,OACN+I,QAAS/J,kBACTkC,YAAa5F,KAAKiL,YAClBqC,UAAU,EACV1P,MAAOoC,KAAKG,MAAMsK,SAASgB,SAE5B+H,mBACDnR,MAAAC,cAACoR,aACCxO,KAAK,OACLR,MAAM,OACNiP,QAAQ,OACRC,QAAQ,OACRhO,YAAa5F,KAAKiL,YAClBqC,UAAU,EACV1P,MAAOoC,KAAKG,MAAMsK,SAASyI,OAE7B7Q,MAAAC,cAACuR,aACC3O,KAAK,OACLR,MAAM,OACNkB,YAAa5F,KAAKiL,YAClBqC,UAAU,EACV1P,MAAOoC,KAAKG,MAAMsK,SAAS0I,OAE7B9Q,MAAAC,cAACwR,iBACC5O,KAAK,WACLR,MAAM,WACNkB,YAAa5F,KAAKiL,YAClB9F,IAAI,WACJvH,MAAOoC,KAAKG,MAAMsK,SAAS2I,WAE5BC,sBAMLhR,MAAAC,cAACoG,aACCxD,KAAK,kBACL6I,SAAU/N,KAAK6S,aACf1N,IAAI,QAEJ9C,MAAAC,cAACkL,eACCtI,KAAK,eACLR,MAAM,gBACN+I,QAASzN,KAAK3B,MAAMuE,cACpBgD,YAAa5F,KAAKiL,YAClB9F,IAAI,eACJmI,UAAU,EACV1P,MAAOoC,KAAKG,MAAMsK,SAAS+H,eAE5BiB,eACAH,iBPmqDJ5U,IAAK,cACLd,MAAO,SOzpDEqQ,YAAarQ,OAEvBoC,KAAK3B,MAAMiO,mBAAoB6D,WAAYnQ,KAAK3B,MAAMiO,UAEtD,IAAI7B,UAAWzK,KAAKG,MAAMsK,QAC1BA,UAASwD,aAAerQ,MAEJ,iBAAhBqQ,aAA4C,KAAVrQ,QAGhCoC,KAAK3B,MAAMqL,MACbgG,MACE5M,MAAO,UACPmK,KAAM,sOAGNtH,KAAM,UACNoO,kBAAkB,EAClBC,kBAAmB,gBACnBC,iBAAkB,WAEpB,SAASC,WACHA,WACFlU,KAAK3B,MAAM8V,cAGbzT,KAAKV,OAMTyK,SAASjJ,QACTxB,KAAKyB,UACH+M,oBAAqB5Q,SAIL,kBAAhBqQ,aAA6C,KAAVrQ,OACrCoC,KAAKyB,UACH6M,qBAAsB1Q,QAI1BoC,KAAKyB,UAEDgJ,SAAUA,UAEZzK,KAAKkL,sBPspDNxM,IAAK,+BACLd,MAAO,SOnpDmBqQ,YAAarQ,OACxC,GAAI6M,UAAWzK,KAAKG,MAAMsK,QAC1BA,UAASjJ,KAAKyM,aAAerQ,MAE7BoC,KAAKyB,UAEDgJ,SAAUA,UAEZzK,KAAKkL,sBPopDNxM,IAAK,6BACLd,MAAO,SOhpDiBwW,yBACzB,GAAI3J,UAAWzK,KAAKG,MAAMsK,QAE1B,KAAK,GAAIuF,SAASoE,yBAChB3J,SAASuF,OAASoE,wBAAwBpE,MAG5ChQ,MAAKyB,UAEDgJ,SAAUA,UAEZzK,KAAKkL,sBPipDNxM,IAAK,oBACLd,MAAO,WO5oDR,IAAKoC,KAAK3B,MAAMqL,KAAM,CACpB,GAAIe,UAAWzK,KAAKG,MAAMsK,QAC1BzK,MAAK3B,MAAM6M,kBAAkBT,cPspD9B/L,IAAK,wBACLd,MAAO,SOjpDYyW,cAAc,GAAAnG,QAAAlO,KAC9BwT,mBAAqB/V,OAAOwJ,KAAKoN,cAAc5F,IAAI,SAACC,WACtD,GAAIC,UAAWT,OAAK7P,MAAMgF,mBAAmBgR,aAAa3F,WAAb,YAAuCC,QACpF,IAAiB,SAAbA,UAAoC,WAAbA,SAAuB,CAEhD,GAA6C,MAAzC0F,aAAa3F,WAAb,WACF,MACErM,OAAAC,cAAC+K,gBACCnI,KAAMwJ,UACNhK,MAAO2P,aAAa3F,WAAb,KACP9I,YAAasI,OAAKwE,6BAClBvN,IAAKuJ,UACLpB,SAAU+G,aAAa3F,WAAb,SACV9Q,MAAOsQ,OAAK/N,MAAMsK,SAASjJ,KAAKkN,YAKtC,IAA8C,OAA1C2F,aAAa3F,WAAb,WACF,MACErM,OAAAC,cAACkL,eACCtI,KAAMwJ,UACNhK,MAAO2P,aAAa3F,WAAb,KACPjB,QAASS,OAAK7P,MAAMiF,iBAAiB+Q,aAAa3F,WAAb,YACrC9I,YAAasI,OAAKwE,6BAClBvN,IAAKuJ,UACLpB,SAAU+G,aAAa3F,WAAb,SACV9Q,MAAOsQ,OAAK/N,MAAMsK,SAASjJ,KAAKkN,aAMxC,GAAiB,aAAbC,SACF,MACEtM,OAAAC,cAACoR,aACCxO,KAAMwJ,UACNhK,MAAO2P,aAAa3F,WAAb,KACP9I,YAAasI,OAAKwE,6BAClBvN,IAAKuJ,UACLpB,SAAU+G,aAAa3F,WAAb,SACV9Q,MAAOsQ,OAAK/N,MAAMsK,SAASjJ,KAAKkN,cAWxC,OAAO8E,uBPgpDN9U,IAAK,eACLd,MAAO,SO9oDGgR,GAGX5O,KAAK8S,oBPipDJpU,IAAK,iBACLd,MAAO,WO/oDO,GAAA0W,SACX7J,SAAWzK,KAAKG,MAAMsK,QAC1BA,UAAA,KAAmBtC,KAAKE,UAAUoC,SAAA,KAElC,IAAIuE,SAAU,GAAIC,SAClB,KAAK,GAAIvQ,OAAO+L,UACQ,KAAlBA,SAAS/L,MACXsQ,QAAQE,OAAOxQ,IAAK+L,SAAS/L,KAIjCwC,GAAEC,MAAFmT,SACE3O,KAAM,OACNwJ,IAAKnP,KAAK3B,MAAMyF,OAChBtC,KAAMwN,QACNI,OAAO,EACPC,aAAa,EACbC,aAAa,GANf8C,gBAAAkC,QAAA,eAOe,GAPflC,gBAAAkC,QAAA,MAQO,WACH,GAAI/E,KAAM,GAAIC,QAAOC,cACrB,OAAOF,MACP7O,KAAKV,OAXToS,gBAAAkC,QAAA,UAYW,WAEP7J,SAASjJ,KAAO2G,KAAKC,MAAMqC,SAASjJ,MACpCxB,KAAK3B,MAAM2F,iBACXtD,KAAKV,OAhBToS,gBAAAkC,QAAA,QAiBS,SAASzH,KACdjL,QAAQD,MAAMkL,IACd,IAAI+C,KAAM/C,IAAIgD,aAAehD,IAAIgD,aAAaC,QAAU,iBACxD9P,MAAKyB,UACHiJ,aAAckF,MAEhBF,KAAKE,IAAK,GAAI,UACdlP,KAAKV,OAxBTsU,cP0qDM/B,wBOrgE2BlQ,MAAM6D,UAwX3CqM,wBAAuB1J,WACrBqC,kBAAmB7I,MAAMyG,UAAUI,KACnCtG,cAAeP,MAAMyG,UAAUG,OAAOD,WACtCnG,sBAAuBR,MAAMyG,UAAUG,OAAOD,WAC9C5F,uBAAwBf,MAAMyG,UAAUG,OAAOD,WAC/C3F,mBAAoBhB,MAAMyG,UAAUG,OAAOD,WAC3CzF,WAAYlB,MAAMyG,UAAUG,OAAOD,YPmpDpC9M,QAAQW,QOhpDM0V,wBPopDT,SAASpW,OAAQD,QAASH,qBAE/B,YAYA,SAASW,wBAAuBC,KAAO,MAAOA,MAAOA,IAAIC,WAAaD,KAAQE,QAASF,KAEvF,QAASG,iBAAgBC,SAAUC,aAAe,KAAMD,mBAAoBC,cAAgB,KAAM,IAAIC,WAAU,qCAEhH,QAASC,4BAA2BC,KAAMb,MAAQ,IAAKa,KAAQ,KAAM,IAAIC,gBAAe,4DAAgE,QAAOd,MAAyB,gBAATA,OAAqC,kBAATA,MAA8Ba,KAAPb,KAElO,QAASe,WAAUC,SAAUC,YAAc,GAA0B,kBAAfA,aAA4C,OAAfA,WAAuB,KAAM,IAAIN,WAAU,iEAAoEM,YAAeD,UAASE,UAAYC,OAAOC,OAAOH,YAAcA,WAAWC,WAAaG,aAAeC,MAAON,SAAUO,YAAY,EAAOC,UAAU,EAAMC,cAAc,KAAeR,aAAYE,OAAOO,eAAiBP,OAAOO,eAAeV,SAAUC,YAAcD,SAASW,UAAYV,YAhBjeE,OAAOgB,eAAevC,QAAS,cAC7B0B,OAAO,GAGT,IAAIM,cAAe,WAAc,QAASC,kBAAiBC,OAAQC,OAAS,IAAK,GAAIC,GAAI,EAAGA,EAAID,MAAME,OAAQD,IAAK,CAAE,GAAIE,YAAaH,MAAMC,EAAIE,YAAWX,WAAaW,WAAWX,aAAc,EAAOW,WAAWT,cAAe,EAAU,SAAWS,cAAYA,WAAWV,UAAW,GAAML,OAAOgB,eAAeL,OAAQI,WAAWE,IAAKF,aAAiB,MAAO,UAAUxB,YAAa2B,WAAYC,aAAiJ,MAA9HD,aAAYR,iBAAiBnB,YAAYQ,UAAWmB,YAAiBC,aAAaT,iBAAiBnB,YAAa4B,aAAqB5B,gBQ/hEjiBuX,kBAAAxY,oBAAA,GRmiEKyY,mBAAqB9X,uBAAuB6X,mBQjiE3CE,oBRojEqB,SAAU1U,kBQnjEnC,QAAA0U,qBAAYpW,OAAOvB,gBAAAkD,KAAAyU,oBAAA,IAAAxU,OAAA/C,2BAAA8C,MAAAyU,oBAAAxW,WAAAR,OAAAyC,eAAAuU,sBAAAnY,KAAA0D,KACX3B,OADW,OAGjB4B,OAAKE,OACHsK,YACAE,cACAD,aAAc,MAGhBzK,MAAKgB,eAAiBhB,MAAKgB,eAAeP,KAApBT,OACtBA,MAAK8K,aAAe9K,MAAK8K,aAAarK,KAAlBT,OACpBA,MAAKgL,YAAchL,MAAKgL,YAAYvK,KAAjBT,OAXFA,MRmxElB,MA/NA5C,WAAUoX,oBAAqB1U,kBAmB/B7B,aAAauW,sBACX/V,IAAK,oBACLd,MAAO,WQvjER,GAAIoC,KAAK3B,MAAMqW,UAAW,CAC1B,GAAIjK,UAAWzK,KAAKG,MAAMsK,QAC1BA,UAAA,UAAwBtC,KAAKE,UAAUrI,KAAK3B,MAAMqW,WAClDjK,SAAA,kBAAgCzK,KAAK3B,MAAMqW,UAAUC,kBAErD3U,KAAKyB,UACHgJ,SAAUA,eRmkEX/L,IAAK,iBACLd,MAAO,SQ9jEKuE,UAAWC,iBACxB,GAAIZ,QACJ,KAAK,GAAIpF,MAAM+F,WACbX,KAAKpF,IAAM+F,UAAU/F,IAAIgG,gBAG3B,OAAOZ,SRikEN9C,IAAK,SACLd,MAAO,WQ7jER,GAAIgX,sBACAC,gBACAC,iBACAC,4BAA8B/U,KAAKiB,eAAejB,KAAK3B,MAAM8E,qBAAsB,UAgBvF,IAdAyR,qBACEvS,MAAAC,cAACkL,eACCtI,KAAK,oBACLR,MAAM,2BACN+I,QAASsH,4BACTnP,YAAa5F,KAAKiL,YAClB9F,IAAI,oBACJmI,UAAU,EACV1P,MAAOoC,KAAKG,MAAMsK,SAASkK,oBAM3B3U,KAAKG,MAAMsK,SAASkK,kBAAmB,CAEzC,GAAIK,aAAchV,KAAK3B,MAAM8E,qBAAqBnD,KAAKG,MAAMsK,SAASkK,mBAAmBK,WAGzF,IAAIA,YAAa,CAGf,GAAIC,YAAajV,KAAK3B,MAAMmF,oBAAoBwR,aAG5CE,iBAAmB,CACvB,KAAK,GAAIC,aAAaF,YACpBC,kBAAsCD,WAAWE,UAKnD,KAAK,GADDC,gBACK9W,EAAI,EAAGA,GAAK4W,iBAAkB5W,IAIjC0B,KAAK3B,MAAMoF,qBAAqBzD,KAAKG,MAAMsK,SAASkK,oBAClD3U,KAAK3B,MAAMoF,qBAAqBzD,KAAKG,MAAMsK,SAASkK,mBAAmBrW,KAK7E8W,YAAY9W,GAAKA,EAgBnBwW,kBACEzS,MAAAC,cAAAkS,mBAAA3X,SACEoY,WAAcjV,KAAK3B,MAAMmF,oBAAoBxD,KAAK3B,MAAM8E,qBAAqBnD,KAAKG,MAAMsK,SAASkK,mBAAmBK,aACpHI,YAAepV,KAAK3B,MAAMoF,qBAAqBzD,KAAKG,MAAMsK,SAASkK,mBACnEU,eAAkBrV,KAAK3B,MAAMgX,eAC7BC,eAAkBtV,KAAK3B,MAAMiX,eAC7BC,QAAU,EACVC,mBAAsBxV,KAAKG,MAAMsK,SAASgL,WAC1CC,aAAgB1V,KAAKiL,eAM7B,GAAIqI,aAOJ,OANItT,MAAK3B,MAAMqW,YACbpB,aACEjR,MAAAC,cAACoD,eAAchB,MAAM,YAKvBrC,MAAAC,cAACoG,aACCqF,SAAU/N,KAAK+K,cAEd6J,qBACAC,gBACAC,iBACDzS,MAAAC,cAAA,WACCgR,iBRwkEJ5U,IAAK,eACLd,MAAO,WQzjER,GAAI6M,UAAWzK,KAAKG,MAAMsK,SACtBuE,QAAU,GAAIC,SAClB,KAAK,GAAIvQ,OAAO+L,UACO,KAAlBA,SAAS/L,MACVsQ,QAAQE,OAAOxQ,IAAK+L,SAAS/L,KAIjCwC,GAAEC,MACAwE,KAAM,OACNwJ,IAAKnP,KAAK3B,MAAMyF,OAChBtC,KAAMwN,QACNI,OAAO,EACPC,aAAa,EACbC,aAAa,EACbC,IAAK,WACH,GAAIA,KAAM,GAAIC,QAAOC,cACrB,OAAOF,MACP7O,KAAKV,MACPuB,QAAS,WACPvB,KAAK3B,MAAM2F,gBACX0L,KAAK,sCAAuC,GAAI,WAChD1P,KAAK3B,MAAMsR,aACXjP,KAAKV,MACP2B,MAAO,SAASkL,KACdjL,QAAQD,MAAMkL,IACd,IAAI+C,KAAM/C,IAAIgD,aAAehD,IAAIgD,aAAaC,QAAU,iBACxD9P,MAAKyB,UACHiJ,aAAckF,MAEhBF,KAAKE,IAAK,GAAI,UACdlP,KAAKV,WRukERtB,IAAK,cACLd,MAAO,SQ9jEEqQ,YAAarQ,OAEvB,GAAI6M,UAAWzK,KAAKG,MAAMsK,QAC1BA,UAASwD,aAAerQ,MAEJ,sBAAhBqQ,cACFxD,SAAA,WAAyB,IAG3BzK,KAAKyB,UAEDgJ,SAAUA,UAEZzK,KAAKkL,sBR+jENxM,IAAK,oBACLd,MAAO,WQ3jER,IAAKoC,KAAK3B,MAAMqW,UAAW,CACzB,GAAIjK,UAAWzK,KAAKG,MAAMsK,QAC1BzK,MAAK3B,MAAM6M,kBAAkBT,eRikEzBgK,qBQpxEwBpS,MAAM6D,UAwNxCuO,qBAAoB5L,WAClB2H,QAASnO,MAAMyG,UAAUC,OACzBjF,OAAQzB,MAAMyG,UAAUC,OACxBqF,QAAS/L,MAAMyG,UAAUC,OACzB0H,aAAcpO,MAAMyG,UAAUI,KAC9ByG,UAAWtN,MAAMyG,UAAUI,MRkkE5BhN,QAAQW,QQ/jEM4X,qBRmkET,SAAStY,OAAQD,SAEtB,YAQA,SAASY,iBAAgBC,SAAUC,aAAe,KAAMD,mBAAoBC,cAAgB,KAAM,IAAIC,WAAU,qCAEhH,QAASC,4BAA2BC,KAAMb,MAAQ,IAAKa,KAAQ,KAAM,IAAIC,gBAAe,4DAAgE,QAAOd,MAAyB,gBAATA,OAAqC,kBAATA,MAA8Ba,KAAPb,KAElO,QAASe,WAAUC,SAAUC,YAAc,GAA0B,kBAAfA,aAA4C,OAAfA,WAAuB,KAAM,IAAIN,WAAU,iEAAoEM,YAAeD,UAASE,UAAYC,OAAOC,OAAOH,YAAcA,WAAWC,WAAaG,aAAeC,MAAON,SAAUO,YAAY,EAAOC,UAAU,EAAMC,cAAc,KAAeR,aAAYE,OAAOO,eAAiBP,OAAOO,eAAeV,SAAUC,YAAcD,SAASW,UAAYV,YAVjeE,OAAOgB,eAAevC,QAAS,cAC7B0B,OAAO,GAGT,IAAIM,cAAe,WAAc,QAASC,kBAAiBC,OAAQC,OAAS,IAAK,GAAIC,GAAI,EAAGA,EAAID,MAAME,OAAQD,IAAK,CAAE,GAAIE,YAAaH,MAAMC,EAAIE,YAAWX,WAAaW,WAAWX,aAAc,EAAOW,WAAWT,cAAe,EAAU,SAAWS,cAAYA,WAAWV,UAAW,GAAML,OAAOgB,eAAeL,OAAQI,WAAWE,IAAKF,aAAiB,MAAO,UAAUxB,YAAa2B,WAAYC,aAAiJ,MAA9HD,aAAYR,iBAAiBnB,YAAYQ,UAAWmB,YAAiBC,aAAaT,iBAAiBnB,YAAa4B,aAAqB5B,gBShzE3hB2Y,iBTg0EkB,SAAU5V,kBS/zEhC,QAAA4V,oBAAc7Y,gBAAAkD,KAAA2V,iBAAA,IAAA1V,OAAA/C,2BAAA8C,MAAA2V,iBAAA1X,WAAAR,OAAAyC,eAAAyV,mBAAArZ,KAAA0D,MAAA,OAGZC,OAAK2V,YAAc3V,MAAK2V,YAAYlV,KAAjBT,OACnBA,MAAK4V,KAAO5V,MAAK4V,KAAKnV,KAAVT,OACZA,MAAK6V,KAAO7V,MAAK6V,KAAKpV,KAAVT,OALAA,MTw/Eb,MAxLA5C,WAAUsY,iBAAkB5V,kBAa5B7B,aAAayX,mBACXjX,IAAK,oBACLd,MAAO,WSt0ERsD,EAAE,2BAA2B6U,aT00E5BrX,IAAK,oBACLd,MAAO,WSv0ERsD,EAAE,2BAA2B6U,aT20E5BrX,IAAK,cACLd,MAAO,SSz0EEgR,GACV,GAAI6G,YAAa7G,EAAExQ,OAAOhC,EAC1B,IAAI4D,KAAK3B,MAAM+W,YAAYK,YAAa,CACtC,GAAI9P,MAAO3F,KAAK3B,MAAM2X,MACpBhW,KAAK3B,MAAMmJ,SAASxH,KAAK3B,MAAM+W,YAAYK,aAAaQ,QACxDC,QAAU,WAAa,YACrB/G,IAAMzM,MAAMqB,QAAQ,YAAY4B,KAAK,aACvC3F,KAAK3B,MAAMmJ,SAASxH,KAAK3B,MAAM+W,YAAYK,aAAarH,OAE1DoB,QAAO2G,SAASC,KAAOjH,QT00ExBzQ,IAAK,YACLd,MAAO,SSv0EAgR,GACNA,EAAEC,oBT00EHnQ,IAAK,OACLd,MAAO,SSx0ELgR,GACD,GAAI8F,WAAYvM,KAAKE,UACnBrI,KAAK3B,MAAMmJ,SAASxH,KAAK3B,MAAM+W,YAAYxG,EAAExQ,OAAOhC,KAEtDwS,GAAEyH,aAAaC,QAAQ,aAAc5B,cTy0EtChW,IAAK,OACLd,MAAO,SSv0ELgR,GACHA,EAAEC,gBAEF,IAAI6F,WAAY9F,EAAEyH,aAAaE,QAAQ,cACnCC,cAAgBC,SAAS7H,EAAExQ,OAAOhC,GAEtC4D,MAAK3B,MAAMqX,aAAahB,UAAW8B,kBT00ElC9X,IAAK,SACLd,MAAO,WSx0ED,GAAA8N,QAAA1L,KAEL0W,UACAC,OACAzT,eACAuS,WAAa,CACjB,IAAIzV,KAAK3B,MAAM4W,WAAY,CACzB,IAAK,GAAI2B,GAAE,EAAGA,EAAI5W,KAAK3B,MAAM4W,WAAW2B,EAAGA,IAAK,CAC9CF,SACA,KAAK,GAAIG,GAAE,EAAGA,GAAK7W,KAAK3B,MAAM4W,WAAW4B,EAAGA,IAAK,CAE/C,GAAIC,WAAa,IAAI9W,KAAK3B,MAAM4W,WAAW4B,EAAM,IAAI7W,KAAK3B,MAAM4W,WAAW4B,EAAI,IAC3EE,WAAavF,MAAOsF,WACpBE,UAAY,OACZC,aAAe,KACfC,SAAW,QACXC,WAAa,KACbC,cAAgB,KAChBC,UAAY,QACZC,YAAc,KACdC,WAAavX,KAAKwX,UAClBC,OAASzX,KAAK8V,KACdjM,QAAU,IAET7J,MAAK3B,MAAMkX,QAEVvV,KAAK3B,MAAM+W,aACTpV,KAAK3B,MAAM+W,YAAYK,cACzBuB,UAAY,gBACZE,SAAW,OACXC,WAAa,UACbC,cAAgB,MAChBH,aACF,OAASjX,KAAK3B,MAAMmJ,SAASxH,KAAK3B,MAAM+W,YAAYK,aAAarH,QAAU,YAClEpO,KAAK3B,MAAMgX,eAAerV,KAAK3B,MAAMmJ,SAASxH,KAAK3B,MAAM+W,YAAYK,aAAaQ,QAAQvR,MAAQ,YAClG1E,KAAK3B,MAAMiX,eAAetV,KAAK3B,MAAMmJ,SAASxH,KAAK3B,MAAM+W,YAAYK,aAAaiC,UAAUC,OAAS,QAC5GN,UAAY,OACZC,YAActX,KAAK6V,KACnB0B,WAAa,KACbE,OAAS,KACT5N,QAAU7J,KAAK4V,aAKjB5V,KAAK3B,MAAMkX,SACTE,YAAczV,KAAK3B,MAAMmX,mBAC3BwB,UAAY,gBAEJhX,KAAK3B,MAAM+W,YAIZpV,KAAK3B,MAAM+W,cACbpV,KAAK3B,MAAM+W,YAAYK,YAInBzV,KAAK3B,MAAM+W,YAAYK,aAH9BuB,UAAY,iBACrBnN,QAAU,SAAC+E,GAAD,MAAOlD,QAAKrN,MAAMqX,aAAa,aAAc9G,EAAExQ,OAAOhC,QANzD4a,UAAY,iBACZnN,QAAU,SAAC+E,GAAD,MAAOlD,QAAKrN,MAAMqX,aAAa,aAAc9G,EAAExQ,OAAOhC,MAoBpE,IAAIwb,yBAEFA,mBAAoBf,EAAK7W,KAAK3B,MAAM4W,WAAW4B,EAAID,EAKrDF,OAAOzO,KACL5F,MAAAC,cAAA,OACElG,GAAIqZ,WACJvR,UAAW8S,UACXa,YAAWX,SACX/M,cAAagN,WACbW,iBAAgBV,cAChBW,sBAAqBd,aACrBhU,MAAO8T,UACPlN,QAASA,QACTwN,UAAWA,UACXC,YAAaA,YACbC,WAAYA,WACZE,OAAQA,QAEPG,oBAILnC,aAGF,GAAIuC,WAAa,IAAIhY,KAAK3B,MAAM4W,WAAW2B,EAAM,IAAI5W,KAAK3B,MAAM4W,WAAW2B,EAAI,IAE3EqB,UADa,IAAIjY,KAAK3B,MAAM4W,WAAW2B,EAAI,KAE7CnO,OAAQuP,WAGVrB,KAAI1O,KACF5F,MAAAC,cAAA,OACE4B,UAAU,MACVjB,MAAOgV,UAENvB,SAKPxT,QAAUyT,IAGV,MACEtU,OAAAC,cAAA,OAAK4B,UAAU,WACZhB,aT80ECyS,kBSz/EqBtT,MAAM6D,UAiLrCyP,kBAAiB9M,aT60EhB3M,QAAQW,QS10EM8Y,kBT80ET,SAASxZ,OAAQD,QAASH,qBAE/B,YAoBA,SAASW,wBAAuBC,KAAO,MAAOA,MAAOA,IAAIC,WAAaD,KAAQE,QAASF,KAEvF,QAASG,iBAAgBC,SAAUC,aAAe,KAAMD,mBAAoBC,cAAgB,KAAM,IAAIC,WAAU,qCAEhH,QAASC,4BAA2BC,KAAMb,MAAQ,IAAKa,KAAQ,KAAM,IAAIC,gBAAe,4DAAgE,QAAOd,MAAyB,gBAATA,OAAqC,kBAATA,MAA8Ba,KAAPb,KAElO,QAASe,WAAUC,SAAUC,YAAc,GAA0B,kBAAfA,aAA4C,OAAfA,WAAuB,KAAM,IAAIN,WAAU,iEAAoEM,YAAeD,UAASE,UAAYC,OAAOC,OAAOH,YAAcA,WAAWC,WAAaG,aAAeC,MAAON,SAAUO,YAAY,EAAOC,UAAU,EAAMC,cAAc,KAAeR,aAAYE,OAAOO,eAAiBP,OAAOO,eAAeV,SAAUC,YAAcD,SAASW,UAAYV,YAxBjeE,OAAOgB,eAAevC,QAAS,cAC7B0B,OAAO,GAGT,IAAIM,cAAe,WAAc,QAASC,kBAAiBC,OAAQC,OAAS,IAAK,GAAIC,GAAI,EAAGA,EAAID,MAAME,OAAQD,IAAK,CAAE,GAAIE,YAAaH,MAAMC,EAAIE,YAAWX,WAAaW,WAAWX,aAAc,EAAOW,WAAWT,cAAe,EAAU,SAAWS,cAAYA,WAAWV,UAAW,GAAML,OAAOgB,eAAeL,OAAQI,WAAWE,IAAKF,aAAiB,MAAO,UAAUxB,YAAa2B,WAAYC,aAAiJ,MAA9HD,aAAYR,iBAAiBnB,YAAYQ,UAAWmB,YAAiBC,aAAaT,iBAAiBnB,YAAa4B,aAAqB5B,gBUlhFjiBsN,aAAAvO,oBAAA,GACAgD,eVqhFqBrC,uBAAuB4N,cUrhF5CvO,oBAAA,IVyhFKiD,eAAiBtC,uBAAuBqC,eUxhF7CmZ,iBAAAnc,oBAAA,GV4hFKoc,kBAAoBzb,uBAAuBwb,kBUhhF1CE,iBVoiFkB,SAAUrY,kBUniFhC,QAAAqY,kBAAY/Z,OAAOvB,gBAAAkD,KAAAoY,iBAAA,IAAAnY,OAAA/C,2BAAA8C,MAAAoY,iBAAAna,WAAAR,OAAAyC,eAAAkY,mBAAA9b,KAAA0D,KACX3B,OADW,OAGjB4B,OAAKE,OACHsK,YACA4N,eACA3N,aAAc,KACdC,cACA2N,aAAc,EACdC,aAAa,EACbC,KAAM,GAGRvY,MAAK8K,aAAe9K,MAAK8K,aAAarK,KAAlBT,OACpBA,MAAK+K,aAAe/K,MAAK+K,aAAatK,KAAlBT,OACpBA,MAAKgL,YAAchL,MAAKgL,YAAYvK,KAAjBT,OACnBA,MAAKwY,uBAAyBxY,MAAKwY,uBAAuB/X,KAA5BT,OAC9BA,MAAKyY,oBAAsBzY,MAAKyY,oBAAoBhY,KAAzBT,OAC3BA,MAAK0Y,WAAa1Y,MAAK0Y,WAAWjY,KAAhBT,OAClBA,MAAKgB,eAAiBhB,MAAKgB,eAAeP,KAApBT,OACtBA,MAAK2Y,gBAAkB3Y,MAAK2Y,gBAAgBlY,KAArBT,OACvBA,MAAK0M,KAAO1M,MAAK0M,KAAKjM,KAAVT,OACZA,MAAK4Y,SAAW5Y,MAAK4Y,SAASnY,KAAdT,OAChBA,MAAK6Y,eAAiB7Y,MAAK6Y,eAAepY,KAApBT,OACtBA,MAAK8Y,kBAAoB9Y,MAAK8Y,kBAAkBrY,KAAvBT,OACzBA,MAAK+Y,SAAW/Y,MAAK+Y,SAAStY,KAAdT,OAChBA,MAAKgZ,WAAahZ,MAAKgZ,WAAWvY,KAAhBT,OAClBA,MAAKiZ,kBAAoBjZ,MAAKiZ,kBAAkBxY,KAAvBT,OACzBA,MAAKkZ,QAAUlZ,MAAKkZ,QAAQzY,KAAbT,OA5BEA,MVwmGlB,MApkBA5C,WAAU+a,iBAAkBrY,kBAuC5B7B,aAAaka,mBACX1Z,IAAK,iBACLd,MAAO,SU7iFKwb,eAAgBhX,iBAC7B,GAAIiX,gBACJ,KAAK,GAAI/a,KAAK8a,gBACZC,aAAa/a,GAAK8a,eAAe9a,GAAG8D,gBAGtC,OAAOiX,iBVgjFN3a,IAAK,OACLd,MAAO,WU9iFH,GAAA8N,QAAA1L,IACLA,MAAKgZ,WAAWM,KACd,SAAA9X,MACEkK,OAAKjK,UACH8X,SAAU/X,KACVgX,KAAM9M,OAAKvL,MAAMqY,KAAK,KAG1B,SAAA7W,OACE+N,KAAK,QAAS/N,MAAM6X,aAAc,cVkjFrC9a,IAAK,WACLd,MAAO,WU7iFRoC,KAAKyB,UACH+W,KAAMxY,KAAKG,MAAMqY,KAAK,OVkjFvB9Z,IAAK,WACLd,MAAO,WU9iFR,MAAOoC,MAAKmZ,QAAQnZ,KAAK3B,MAAMiG,iBAAkB+T,YAAarY,KAAKG,MAAMkY,iBVkjFxE3Z,IAAK,UACLd,MAAO,SUhjFFuR,IAAKsK,WAAW,GAAAvL,QAAAlO,IACtB,OAAO,IAAI0Z,SAAQ,SAACC,QAASC,QAC3B1Y,EAAEC,KAAKgO,KACL9N,OAAQ,MACRC,SAAU,OACVE,KAAMiY,UACNlY,QAAS,SAASC,MAChBmY,QAAQnY,OACRd,KAFOwN,QAGTvM,MAAO,SAASA,OAAOkY,WAAYC,aACjCF,OAAOjY,QACPC,QAAQD,MAAMA,gBVwjFnBjD,IAAK,kBACLd,MAAO,SUnjFMoS,MAAOpS,OACrB,GAAI0a,cAAe1a,MACfya,YAAcrY,KAAKG,MAAMkY,WAC7B,KAAK,GAAIjK,WAAWiK,aACdjK,QAAUkK,oBACLD,aAAYjK,QAIvBpO,MAAKyB,UAAU6W,0BAAcD,6BVsjF5B3Z,IAAK,aACLd,MAAO,SUpjFCmc,UAAWC,cACpB,OAAOha,KAAKG,MAAMqY,MAChB,IAAK,GACH,MAAOuB,UACT,KAAK,GACH,MAAOC,kBVwjFVtb,IAAK,oBACLd,MAAO,SUrjFQqc,kBAAmBC,iBACnC,OAAOla,KAAKG,MAAMoY,aAChB,KAAK,EACH,MAAO0B,kBACT,MAAK,EACH,MAAOC,qBVyjFVxb,IAAK,iBACLd,MAAO,WUtjFO,GAAAuc,QAAAna,IACfA,MAAKgZ,WAAWM,KACd,SAAA9X,MACE2Y,OAAK1Y,UACH8X,SAAU/X,KACV+W,aAAa,KAGjB,SAAA5W,OACE+N,KAAK,SAAU/N,MAAM6X,aAAc,cV0jFtC9a,IAAK,oBACLd,MAAO,WUrjFR,GAAI6M,UAAWzK,KAAKG,MAAMsK,QAE1BA,UAASyP,mBACTla,KAAKyB,UACH8W,aAAa,EACb9N,uBV0jFD/L,IAAK,SACLd,MAAO,WUpjFR,IAAK,GADDwc,aACK9b,EAAE,EAAGA,GAAG0B,KAAKG,MAAMmY,aAAcha,IACxC8b,SAASnS,KACP5F,MAAAC,cAAC+K,gBACCnI,KAAM5G,EACNoG,MAAO,WAAapG,EACpBsH,YAAa5F,KAAKiL,YAClBqC,UAAU,EACV1P,MAAOoC,KAAKG,MAAMkY,YAAY/Z,GAC9BoM,aAAc1K,KAAKG,MAAMwK,WAAWrM,KAK1C,IAAI2b,mBACF5X,MAAAC,cAAA,OAAK4B,UAAU,OACb7B,MAAAC,cAAA,OAAK4B,UAAU,aACf7B,MAAAC,cAAA,OAAK4B,UAAU,mBACX7B,MAAAC,cAAA,QAAM4B,UAAU,UAChB7B,MAAAC,cAAA,OACE4B,UAAU,oBACV2F,QAAS7J,KAAK8Y,gBAFhB,MAOAzW,MAAAC,cAAA,OAAK4B,UAAU,gBAAf,qBAOJgW,sBACJ,IAAIla,KAAKG,MAAMoZ,SAAU,CAEvB,GAAMnV,4BAA6BpE,KAAK3B,MAAM+F,2BAA2BpE,KAAKG,MAAMoZ,SAAStD,QAEzF9R,oBACJ,KAAK,GAAI/H,MAAMgI,4BACbD,kBAAkB/H,IAAM4D,KAAK3B,MAAM8F,kBAAkB/H,GAEvD+H,mBAAoBnE,KAAKiB,eAAekD,kBAAmB,YAE3D+V,gBACE7X,MAAAC,cAAA,OAAK4B,UAAU,OACb7B,MAAAC,cAAA,OAAK4B,UAAU,4BACb7B,MAAAC,cAAA6V,kBAAAtb,SACE4N,SAAUzK,KAAKG,MAAMsK,SAASyP,gBAC9B/V,kBAAmBA,kBACnBC,2BAA4BA,2BAC5Bf,mBAAoBrD,KAAK3B,MAAMgF,mBAC/BC,iBAAkBtD,KAAK3B,MAAMiF,iBAC7B4H,kBAAmBlL,KAAKyY,uBACxB4B,aAAiB3X,MAAMqB,QAAvB,kEAEF1B,MAAAC,cAAA,KAAG4B,UAAU,aAAajB,OAAQ2G,OAAO,WAAYC,QAAS7J,KAAK+Y,mBAAnE,wBAMR,GAAIgB,WACF1X,MAAAC,cAAA,WACED,MAAAC,cAAA,OAAK4B,UAAU,OACb7B,MAAAC,cAAA,OAAK4B,UAAU,4BACb7B,MAAAC,cAACmD,eACCf,MAAM,eACNuI,KAAK;GAGP5K,MAAAC,cAACgY,gBACC5V,MAAM,iBACN4M,IAAI,IACJC,IAAI,MACJ3T,MAAOoC,KAAKG,MAAMmY,aAClB1S,YAAa5F,KAAK4Y,kBAEnBwB,WAGJpa,KAAKkZ,kBAAkBe,kBAAmBC,iBAC3C7X,MAAAC,cAAA,OAAK4B,UAAU,mCACb7B,MAAAC,cAAA,OAAK4B,UAAU,gBAAf,QAGA7B,MAAAC,cAAA,QAAM4B,UAAU,UACd7B,MAAAC,cAAA,OACE4B,UAAU,uBACV2F,QAAS7J,KAAK2M,MAEdtK,MAAAC,cAAA,QAAM4B,UAAU,0CAQtB8V,mBACJ,IAAIha,KAAKG,MAAMoZ,SAAU,CAGvB,GAAI3W,iBACA5C,MAAKG,MAAMoZ,SAAStD,SACtBrT,cAAc5C,KAAKG,MAAMoZ,SAAStD,QAAUjW,KAAK3B,MAAMuE,cAAc5C,KAAKG,MAAMoZ,SAAStD,QAG3F,IAAI9I,OAAQnN,KAAK3B,MAAMsF,OAAO3D,KAAKG,MAAMoZ,SAAShO,aAC9C6B,MAAQpN,KAAK3B,MAAMwF,YAAYsJ,OAAOvJ,OAAO5D,KAAKG,MAAMoZ,SAAS/N,WAEjE+O,cAAgB9c,OAAO+c,OAAOxa,KAAKG,MAAMkY,aACzCoC,eAAiBF,cAAcG,KAAK,MAIpCrW,cAAgBrE,KAAKiB,eAAejB,KAAK3B,MAAMgG,cAAe,OAElE2V,cACE3X,MAAAC,cAAA,OAAK4B,UAAU,OACb7B,MAAAC,cAAA,OAAK4B,UAAU,aACb7B,MAAAC,cAAAtD,eAAAnC,SACE4N,SAAUzK,KAAKG,MAAMsK,SAASuP,aAC9BzO,YAAavL,KAAKG,MAAMoZ,SAAShO,YACjC4B,MAAOA,MACP3B,UAAWxL,KAAKG,MAAMoZ,SAAS/N,UAC/B4B,MAAOA,MACPF,uBAAwBuN,eACxBnP,kBAAmBtL,KAAKG,MAAMoZ,SAASoB,YACvC/X,cAAeA,cACfc,kBAAmB1D,KAAK3B,MAAMqF,kBAC9BW,cAAeA,cACfxB,sBAAuB7C,KAAK3B,MAAMwE,sBAClCM,qBAAsBnD,KAAK3B,MAAM8E,qBACjCC,uBAAwBpD,KAAK3B,MAAM+E,uBACnCC,mBAAoBrD,KAAK3B,MAAMgF,mBAC/BC,iBAAkBtD,KAAK3B,MAAMiF,iBAC7BC,WAAYvD,KAAK3B,MAAMkF,WACvBC,oBAAqBxD,KAAK3B,MAAMmF,oBAChCC,qBAAsBzD,KAAK3B,MAAMoF,qBACjCyH,kBAAmBlL,KAAK0Y,oBACxB5U,OAAWpB,MAAMqB,QAAjB,qDACAC,cAAehE,KAAK3B,MAAM2F,gBAE5B3B,MAAAC,cAACoD,eACChB,MAAM,YAGVrC,MAAAC,cAAA,OAAK4B,UAAU,mCACb7B,MAAAC,cAAA,QAAM4B,UAAU,UACd7B,MAAAC,cAAA,OACE4B,UAAU,uBACV2F,QAAS7J,KAAK6Y,UAEdxW,MAAAC,cAAA,QAAM4B,UAAU,uCAGpB7B,MAAAC,cAAA,OAAK4B,UAAU,gBAAf,cAQR,MACE7B,OAAAC,cAACoG,aACCxD,KAAK,mBACL9I,GAAG,mBACH2R,SAAU/N,KAAK+K,aACf5F,IAAI,QAEHnF,KAAKiZ,WAAWc,UAAWC,kBVkmF/Btb,IAAK,eACLd,MAAO,SUzlFGqQ,YAAarQ,OAAO,GAAAgd,QAAA5a,KAC3B2K,WAAa3K,KAAKG,MAAMwK,UAGR,aAAhBsD,aAAuC,KAAVrQ,QACzB,SAASuQ,KAAKnO,KAAKG,MAAMsK,SAAS2D,SAGtCzD,WAAWyD,SAAU,EAFrBzD,WAAWyD,SAAU,GAOL,aAAhBH,aAAwC,KAAVrQ,QAC5ByQ,MAAMzQ,QAAWA,MAAQoC,KAAK3B,MAAMkF,WAAWvD,KAAKG,MAAMmO,sBAC5D3D,WAAW4C,UAAW,EAEtB5C,WAAW4C,UAAW,EAK1B,IAAIgB,0BAA2BvO,KAAK3B,MAAM+E,uBAAuBpD,KAAKG,MAAMqO,oBACnD/Q,QAAOwJ,KAAKsH,0BAA0BE,IAAI,SAACC,WAElE,GAAIC,UAAWiM,OAAKvc,MAAMgF,mBAAmBkL,yBAAyBG,WAAzB,YAAmDC,QAC/E,YAAbA,UACEV,cAAgBS,YACdL,MAAMzQ,QAAoB,KAAVA,MAClB+M,WAAW+D,YAAa,EAExB/D,WAAW+D,YAAa,IAMhC1O,MAAKyB,UACHkJ,WAAYA,gBVqmFbjM,IAAK,eACLd,MAAO,SU7lFGgR,GACXA,EAAEC,iBAEF7O,KAAK2Y,gBVqmFJja,IAAK,aACLd,MAAO,WU9lFR,GAAI6M,UAAWzK,KAAKG,MAAMsK,SACtByP,gBAAkBla,KAAKG,MAAMsK,SAASyP,gBACtCF,aAAeha,KAAKG,MAAMsK,SAASuP,YACvCvP,UAAA,gBAA8BtC,KAAKE,UAAU6R,iBAC7CzP,SAAA,aAA2BtC,KAAKE,UAAU2R,cAE1CpY,QAAQiZ,IAAIpQ,SAASuP,cACrBpY,QAAQiZ,IAAIpQ,SAASyP,gBAErB,IAAIlL,SAAU,GAAIC,SAClB,KAAK,GAAIvQ,OAAO+L,UACQ,KAAlBA,SAAS/L,MACXsQ,QAAQE,OAAOxQ,IAAK+L,SAAS/L,KAIjCwC,GAAEC,MACAwE,KAAM,OACNwJ,IAAKnP,KAAK3B,MAAMyF,OAChBtC,KAAMwN,QACNI,OAAO,EACPC,aAAa,EACbC,aAAa,EACbC,IAAK,WACH,GAAIA,KAAM,GAAIC,QAAOC,cACrB,OAAOF,MACP7O,KAAKV,MACPuB,QAAS,WAEPmO,KAAK,+BAAgC,GAAI,WACzC1P,KAAK3B,MAAMsR,aACXjP,KAAKV,MACP2B,MAAO,SAASkL,KACdjL,QAAQD,MAAMkL,IACd,IAAI+C,KAAM/C,IAAIgD,aAAehD,IAAIgD,aAAaC,QAAU,iBACxD9P,MAAKyB,UACHiJ,aAAckF,MAEhBF,KAAKE,IAAK,GAAI,UACdlP,KAAKV,WV6nFRtB,IAAK,cACLd,MAAO,QAASmR,aUnmFPD,SAAUrE,UACpB,GAAIsE,cAAc,EAEdgB,gBACF5C,MAAO,KACPU,WAAY,KAad,OAVApQ,QAAOwJ,KAAK8I,gBAAgBtB,IAAI,SAASuB,OACnCvF,SAASuF,OACXD,eAAeC,OAASvF,SAASuF,OACxBlB,SAASkB,SAClBlB,SAASkB,OAAO3R,MAAM4R,UAAW,EACjClB,aAAc,KAGlB/O,KAAKkQ,cAEEnB,eV8mFNrQ,IAAK,cACLd,MAAO,SUtmFEqQ,YAAarQ,OAIvBoC,KAAK3B,MAAMiO,mBAAoB6D,WAAYnQ,KAAK3B,MAAMiO,WAElC,UAAhB2B,aAAqC,KAAVrQ,OAA0BoO,SAAVpO,QAC7CoC,KAAKG,MAAMyD,OAAS5D,KAAK3B,MAAMwF,YAAY7D,KAAK3B,MAAMsF,OAAO/F,QAAQgG,OAGvE,IAAI6G,UAAWzK,KAAKG,MAAMsK,SACtB4N,YAAcrY,KAAKG,MAAMkY,WAGzBhK,OAAMJ,aACRxD,SAASwD,aAAerQ,MAExBya,YAAYpK,aAAerQ,MAG7BoC,KAAKyB,UACHgJ,kBACA4N,6BV0mFD3Z,IAAK,yBACLd,MAAO,SUvmFakd,qBACrB,GAAIrQ,UAAWzK,KAAKG,MAAMsK,QAC1BA,UAASyP,gBAAkBY,oBAE3B9a,KAAKyB,UAAUgJ,uBV0mFd/L,IAAK,sBACLd,MAAO,SUxmFUmd,kBAClB,GAAItQ,UAAWzK,KAAKG,MAAMsK,QAC1BA,UAASuP,aAAee,iBAExB/a,KAAKyB,UAAUgJ,wBV4mFT2N,kBUzmGqB/V,MAAM6D,UAigBrCkS,kBAAiBvP,WACf2H,QAASnO,MAAMyG,UAAUC,OAAOC,WAChClF,OAAQzB,MAAMyG,UAAUC,OAAOC,WAC/ByH,aAAcpO,MAAMyG,UAAUI,MV8mF/BhN,QAAQW,QU3mFMub,kBV+mFT,SAASjc,OAAQD,SAEtB,YAQA,SAASY,iBAAgBC,SAAUC,aAAe,KAAMD,mBAAoBC,cAAgB,KAAM,IAAIC,WAAU,qCAEhH,QAASC,4BAA2BC,KAAMb,MAAQ,IAAKa,KAAQ,KAAM,IAAIC,gBAAe,4DAAgE,QAAOd,MAAyB,gBAATA,OAAqC,kBAATA,MAA8Ba,KAAPb,KAElO,QAASe,WAAUC,SAAUC,YAAc,GAA0B,kBAAfA,aAA4C,OAAfA,WAAuB,KAAM,IAAIN,WAAU,iEAAoEM,YAAeD,UAASE,UAAYC,OAAOC,OAAOH,YAAcA,WAAWC,WAAaG,aAAeC,MAAON,SAAUO,YAAY,EAAOC,UAAU,EAAMC,cAAc,KAAeR,aAAYE,OAAOO,eAAiBP,OAAOO,eAAeV,SAAUC,YAAcD,SAASW,UAAYV,YAVjeE,OAAOgB,eAAevC,QAAS,cAC7B0B,OAAO,GAGT,IAAIM,cAAe,WAAc,QAASC,kBAAiBC,OAAQC,OAAS,IAAK,GAAIC,GAAI,EAAGA,EAAID,MAAME,OAAQD,IAAK,CAAE,GAAIE,YAAaH,MAAMC,EAAIE,YAAWX,WAAaW,WAAWX,aAAc,EAAOW,WAAWT,cAAe,EAAU,SAAWS,cAAYA,WAAWV,UAAW,GAAML,OAAOgB,eAAeL,OAAQI,WAAWE,IAAKF,aAAiB,MAAO,UAAUxB,YAAa2B,WAAYC,aAAiJ,MAA9HD,aAAYR,iBAAiBnB,YAAYQ,UAAWmB,YAAiBC,aAAaT,iBAAiBnB,YAAa4B,aAAqB5B,gBWjoG3hBge,wBXmpGyB,SAAUjb,kBWlpGvC,QAAAib,yBAAY3c,OAAOvB,gBAAAkD,KAAAgb,wBAAA,IAAA/a,OAAA/C,2BAAA8C,MAAAgb,wBAAA/c,WAAAR,OAAAyC,eAAA8a,0BAAA1e,KAAA0D,KACX3B,OADW,OAGjB4B,OAAKE,OACHsK,UAAWjJ,SACXyZ,gBAAiBhb,MAAK5B,MAAMka,YAActY,MAAK5B,MAAMka,YAAY2C,WAAa,KAC9EvQ,eAGF1K,MAAKgL,YAAchL,MAAKgL,YAAYvK,KAAjBT,OACnBA,MAAKiL,kBAAoBjL,MAAKiL,kBAAkBxK,KAAvBT,OACzBA,MAAKkb,iCAAmClb,MAAKkb,iCAAiCza,KAAtCT,OACxCA,MAAKmb,0BAA4Bnb,MAAKmb,0BAA0B1a,KAA/BT,OACjCA,MAAKob,WAAapb,MAAKob,WAAW3a,KAAhBT,OAClBA,MAAKqb,gBAAkBrb,MAAKqb,gBAAgB5a,KAArBT,OAdNA,MX87GlB,MA3SA5C,WAAU2d,wBAAyBjb,kBAsBnC7B,aAAa8c,0BACXtc,IAAK,oBACLd,MAAO,WW1pGU,GAAA8N,QAAA1L,KACdyK,SAAWzK,KAAKG,MAAMsK,QAO1B,IAJAA,SAAA,WAAyBzK,KAAK3B,MAAM0U,WAIhC/S,KAAK3B,MAAMoM,SAAU,CACvBA,SAAWzK,KAAK3B,MAAMoM,QAEtB,IAAIwQ,uBACJA,iBAAkBjb,KAAK3B,MAAMoM,SAASyQ,YAAc,KACpDlb,KAAKyB,UAAUwZ,kCAIjB,GAAIjb,KAAK3B,MAAMka,YAAa,CAC1B9N,SAAA,WAAyBzK,KAAK3B,MAAMka,YAAY2C,WAChDzQ,SAAA,WAAyBzK,KAAK3B,MAAMka,YAAYgD,WAChD9Q,SAAA,KAAyBzK,KAAK3B,MAAMka,YAAYrF,KAChDzI,SAAA,KAAyBzK,KAAK3B,MAAMka,YAAYpF,KAChD1I,SAAA,SAAyBzK,KAAK3B,MAAMka,YAAYnF,QAEhD,IAAIoI,8BAA+Bxb,KAAK3B,MAAM+F,2BAA2BpE,KAAKG,MAAM8a,gBACpF,IAAIO,6BACF,CAA6B/d,OAAOwJ,KAAKuU,8BAA8B/M,IAAI,SAACC,WAC1EjE,SAASjJ,KAAKkN,WAAahD,OAAKrN,MAAMka,YAAY/W,KAAKkN,cAI7D1O,KAAKyB,UACHgJ,SAAUA,cXgqGX/L,IAAK,SACLd,MAAO,WW3pGR,GAAI6d,aAIAzb,MAAK3B,MAAMka,cAAgBvY,KAAK3B,MAAM0U,WACxC0I,aAAe,KACLzb,KAAK3B,MAAMka,cACrBkD,aACEpZ,MAAAC,cAACoD,eAAchB,MAAM,WAIzB,IAAI4O,cACAoI,aACA1b,MAAK3B,MAAMka,cACbjF,aACEjR,MAAAC,cAACoD,eAAchB,MAAM,WAGvBgX,cACErZ,MAAAC,cAACkL,eACCtI,KAAK,aACLR,MAAM,WACN+I,QAASzN,KAAK3B,MAAMmG,MACpBoB,YAAa5F,KAAKiL,YAClBqC,UAAU,EACV1P,MAAOoC,KAAKG,MAAMsK,SAAS8Q,aAKnC,IAAII,8BACJ,IAAI3b,KAAKG,MAAM8a,gBAAiB,CAC9B,GAAIO,8BAA+Bxb,KAAK3B,MAAM+F,2BAA2BpE,KAAKG,MAAM8a,gBAEhFO,gCACFG,uBAAyB3b,KAAKob,0BAA0BI,+BAY1D,MAPIxb,MAAKG,MAAMyb,0BACbC,kBACExZ,MAAAC,cAAA,aAMFD,MAAAC,cAACoG,aACCxD,KAAK,sBACL6I,SAAU/N,KAAKqb,WACflW,IAAI,QAEJ9C,MAAAC,cAACkL,eACCtI,KAAK,aACLR,MAAM,WACN+I,QAASzN,KAAK3B,MAAM8F,kBACpByB,YAAa5F,KAAKiL,YAClBqC,UAAU,EACV1P,MAAOoC,KAAKG,MAAMsK,SAASyQ,aAE5BQ,cACAC,uBACDtZ,MAAAC,cAACoR,aACCxO,KAAK,OACLR,MAAM,OACNkB,YAAa5F,KAAKiL,YAClBqC,UAAU,EACV1P,MAAOoC,KAAKG,MAAMsK,SAASyI,OAE7B7Q,MAAAC,cAACuR,aACC3O,KAAK,OACLR,MAAM,OACNkB,YAAa5F,KAAKiL,YAClBqC,UAAU,EACV1P,MAAOoC,KAAKG,MAAMsK,SAAS0I,OAE7B9Q,MAAAC,cAACwR,iBACC5O,KAAK,WACLR,MAAM,WACNkB,YAAa5F,KAAKiL,YAClBrN,MAAOoC,KAAKG,MAAMsK,SAAS2I,WAE5BqI,aACAnI,iBXiqGJ5U,IAAK,cACLd,MAAO,SWvpGEqQ,YAAarQ,OAEvB,GAAI6M,UAAWzK,KAAKG,MAAMsK,QAEN,gBAAhBwD,aAA0C,KAAVrQ,QAIlC6M,SAASjJ,QACTxB,KAAKyB,UACHwZ,gBAAiBrd,SAIrB6M,SAASwD,aAAerQ,MAExBoC,KAAKyB,UACFgJ,mBACDzK,KAAKkL,sBXwpGNxM,IAAK,mCACLd,MAAO,SWrpGuBqQ,YAAarQ,OAC5C,GAAI6M,UAAWzK,KAAKG,MAAMsK,QAC1BA,UAASjJ,KAAKyM,aAAerQ,MAE7BoC,KAAKyB,UACFgJ,mBACDzK,KAAKkL,sBXspGNxM,IAAK,oBACLd,MAAO,WWlpGR,GAAIoC,KAAK3B,MAAM6M,kBAAmB,CAChC,GAAIT,UAAWzK,KAAKG,MAAMsK,QAC1BzK,MAAK3B,MAAM6M,kBAAkBT,cX2pG9B/L,IAAK,4BACLd,MAAO,SWtpGgByW,cAAc,GAAAnG,QAAAlO,KAClC2b,uBAAyBle,OAAOwJ,KAAKoN,cAAc5F,IAAI,SAACC,WAC1D,GAAIC,UAAWT,OAAK7P,MAAMgF,mBAAmBgR,aAAa3F,WAAb,YAAuCC,QAEpF,IAAiB,SAAbA,UAAoC,WAAbA,SAAuB,CAChD,GAA6C,MAAzC0F,aAAa3F,WAAb,WACF,MACErM,OAAAC,cAAC+K,gBACCnI,KAAMwJ,UACNhK,MAAO2P,aAAa3F,WAAb,KACP9I,YAAasI,OAAKiN,iCAClBhW,IAAKuJ,UACLpB,SAAU+G,aAAa3F,WAAb,SACV9Q,MAAOsQ,OAAK/N,MAAMsK,SAASjJ,KAAKkN,WAChChE,aAAcwD,OAAK/N,MAAMwK,WAAW+D,WAAa,aAAaC,SAAS,UAAY,MAKzF,IAA8C,OAA1C0F,aAAa3F,WAAb,WACF,MACErM,OAAAC,cAACkL,eACCtI,KAAMwJ,UACNhK,MAAO2P,aAAa3F,WAAb,KACPjB,QAASS,OAAK7P,MAAMiF,iBAAiB+Q,aAAa3F,WAAb,YACrC9I,YAAasI,OAAKiN,iCAClBhW,IAAKuJ,UACLpB,SAAU+G,aAAa3F,WAAb,SACV9Q,MAAOsQ,OAAK/N,MAAMsK,SAASjJ,KAAKkN,aAMxC,GAAiB,aAAbC,SACF,MACEtM,OAAAC,cAACoR,aACCxO,KAAMwJ,UACNhK,MAAO2P,aAAa3F,WAAb,KACP9I,YAAasI,OAAKiN,iCAClBhW,IAAKuJ,UACLpB,SAAU+G,aAAa3F,WAAb,SACV9Q,MAAOsQ,OAAK/N,MAAMsK,SAASjJ,KAAKkN,cAUxC,OAAOiN,2BXmpGNjd,IAAK,aACLd,MAAO,SWjpGCgR,GAEJ5O,KAAK3B,MAAMka,aACdvY,KAAKsb,gBAAgBtb,KAAK3B,MAAMgc,cAE9Bra,KAAK3B,MAAMka,aACbvY,KAAKsb,gBAAgBtb,KAAK3B,MAAMyd,iBXqpGjCpd,IAAK,kBACLd,MAAO,SWlpGMkG,QACd,GAAI2G,UAAWzK,KAAKG,MAAMsK,QAC1BA,UAAA,KAAmBtC,KAAKE,UAAUoC,SAAA,MAElC7I,QAAQiZ,IAAIpQ,SACZ,IAAIuE,SAAU,GAAIC,SAClB,KAAK,GAAIvQ,OAAO+L,UACQ,KAAlBA,SAAS/L,MACXsQ,QAAQE,OAAOxQ,IAAK+L,SAAS/L,KAIjCwC,GAAEC,MACAwE,KAAM,OACNwJ,IAAKrL,OACLtC,KAAMwN,QACNI,OAAO,EACPC,aAAa,EACbC,aAAa,EACbC,IAAK,WACH,GAAIA,KAAM,GAAIC,QAAOC,cACrB,OAAOF,MACP7O,KAAKV,MACPuB,QAAS,WAGPvB,KAAK3B,MAAM2F,iBAGXtD,KAAKV,MACP2B,MAAO,SAASkL,KACdjL,QAAQD,MAAMkL,IACd,IAAI+C,KAAM/C,IAAIgD,aAAehD,IAAIgD,aAAaC,QAAU,iBAExD9P,MAAKyB,UACHiJ,aAAckF,MAEhBF,KAAKE,IAAK,GAAI,UACdlP,KAAKV,YXupGHgb,yBW/7G4B3Y,MAAM6D,UA6S5C8U,yBAAwBnS,WACtBhG,sBAAuBR,MAAMyG,UAAUG,OAAOD,WAC9C5F,uBAAwBf,MAAMyG,UAAUG,OAAOD,WAC/C3F,mBAAoBhB,MAAMyG,UAAUG,OAAOD,WAC3CzF,WAAYlB,MAAMyG,UAAUG,OAAOD,WACnCuD,MAAOlK,MAAMyG,UAAUG,OAAOD,YXwpG/B9M,QAAQW,QWrpGMme,yBXypGT,SAAS7e,OAAQD,QAASH,qBAE/B,YAYA,SAASW,wBAAuBC,KAAO,MAAOA,MAAOA,IAAIC,WAAaD,KAAQE,QAASF,KAEvF,QAASG,iBAAgBC,SAAUC,aAAe,KAAMD,mBAAoBC,cAAgB,KAAM,IAAIC,WAAU,qCAEhH,QAASC,4BAA2BC,KAAMb,MAAQ,IAAKa,KAAQ,KAAM,IAAIC,gBAAe,4DAAgE,QAAOd,MAAyB,gBAATA,OAAqC,kBAATA,MAA8Ba,KAAPb,KAElO,QAASe,WAAUC,SAAUC,YAAc,GAA0B,kBAAfA,aAA4C,OAAfA,WAAuB,KAAM,IAAIN,WAAU,iEAAoEM,YAAeD,UAASE,UAAYC,OAAOC,OAAOH,YAAcA,WAAWC,WAAaG,aAAeC,MAAON,SAAUO,YAAY,EAAOC,UAAU,EAAMC,cAAc,KAAeR,aAAYE,OAAOO,eAAiBP,OAAOO,eAAeV,SAAUC,YAAcD,SAASW,UAAYV,YAhBjeE,OAAOgB,eAAevC,QAAS,cAC7B0B,OAAO,GAGT,IAAIM,cAAe,WAAc,QAASC,kBAAiBC,OAAQC,OAAS,IAAK,GAAIC,GAAI,EAAGA,EAAID,MAAME,OAAQD,IAAK,CAAE,GAAIE,YAAaH,MAAMC,EAAIE,YAAWX,WAAaW,WAAWX,aAAc,EAAOW,WAAWT,cAAe,EAAU,SAAWS,cAAYA,WAAWV,UAAW,GAAML,OAAOgB,eAAeL,OAAQI,WAAWE,IAAKF,aAAiB,MAAO,UAAUxB,YAAa2B,WAAYC,aAAiJ,MAA9HD,aAAYR,iBAAiBnB,YAAYQ,UAAWmB,YAAiBC,aAAaT,iBAAiBnB,YAAa4B,aAAqB5B,gBYj+GjiB+e,sBAAAhgB,oBAAA,IZq+GKigB,uBAAyBtf,uBAAuBqf,uBYz9G/CE,qBZ6+GsB,SAAUlc,kBY5+GpC,QAAAkc,sBAAY5d,OAAOvB,gBAAAkD,KAAAic,qBAAA,IAAAhc,OAAA/C,2BAAA8C,MAAAic,qBAAAhe,WAAAR,OAAAyC,eAAA+b,uBAAA3f,KAAA0D,KACX3B,OADW,OAGjB4B,OAAKE,OACHsK,YACAE,cACAD,aAAc,KACdE,iBAAkBC,MAClBC,kBAAmB,GAGrB7K,MAAK8K,aAAe9K,MAAK8K,aAAarK,KAAlBT,OACpBA,MAAK+K,aAAe/K,MAAK+K,aAAatK,KAAlBT,OACpBA,MAAKgL,YAAchL,MAAKgL,YAAYvK,KAAjBT,OACnBA,MAAKic,gBAAkBjc,MAAKic,gBAAgBxb,KAArBT,OACvBA,MAAKmL,eAAiBnL,MAAKmL,eAAe1K,KAApBT,OACtBA,MAAKoL,mBAAqBpL,MAAKoL,mBAAmB3K,KAAxBT,OAhBTA,MZ8xHlB,MAjTA5C,WAAU4e,qBAAsBlc,kBAwBhC7B,aAAa+d,uBACXvd,IAAK,SACLd,MAAO,WYp/GD,GAAA8N,QAAA1L,KAGH2L,iBAAmBlO,OAAOwJ,KAAKjH,KAAKG,MAAMyK,iBAC1CgB,gBACAtN,EAAI,EALDuN,2BAAA,EAAAC,mBAAA,EAAAC,eAAAC,MAAA,KAMP,OAAAC,OANOC,MAAA,cAMExN,KANFuN,MAAArO,KAOLgO,cAAa3D,KACX5F,MAAAC,cAAA0Z,uBAAAnf,SACE6B,IAAKA,IACLyN,WAAYzN,IACZtC,GAAIkC,EACJmM,SAAUiB,OAAKvL,MAAMyK,gBAAgBlM,KAAOgN,OAAKvL,MAAMyK,gBAAgBlM,KAAO,KAC9E0N,kBAA+C,IAA5BT,iBAAiBpN,OAAe,iBAAMmN,QAAKU,kBAAkB1N,MAAO,KACvF0M,eAAgB9M,GAAKqN,iBAAiBpN,OAASmN,OAAKN,eAAiB,KACrEiB,gBAAiB/N,GAAKqN,iBAAiBpN,QAAUmN,OAAKvL,MAAMyK,gBAAgBlM,KAAOgN,OAAKW,gBAAgB3L,KAArBgL,OAAgChN,KAAO,KAC1HwM,kBAAmBQ,OAAKL,mBACxBiB,SAAUZ,OAAKrN,MAAMiO,SACrB/H,yBAA0BmH,OAAKrN,MAAMkG,yBACrCwQ,4BAA6BrJ,OAAKrN,MAAM0W,+BAI5CzW,KAjBFkO,UAAgBb,iBAAhBc,OAAAC,cAAAb,2BAAAI,MAAAO,UAAAG,QAAAC,MAAAf,2BAAA,EAAkCK,QAN3B,MAAAW,KAAAf,mBAAA,EAAAC,eAAAc,IAAA,aAAAhB,2BAAAW,UAAAM,QAAAN,UAAAM,SAAA,WAAAhB,kBAAA,KAAAC,iBA2BP,MACE1J,OAAAC,cAACoG,aACCxD,KAAK,eACL6I,SAAU/N,KAAK+K,aACf5F,IAAI,QAEJ9C,MAAAC,cAAA,WACAD,MAAAC,cAAA,OAAK4B,UAAU,OACb7B,MAAAC,cAAA,OAAK4B,UAAU,aACb7B,MAAAC,cAACkL,eACCtI,KAAK,OACLR,MAAM,OACN+I,QAASzN,KAAK3B,MAAMmG,MACpBoB,YAAa5F,KAAKiL,YAClB9F,IAAI,OACJmI,UAAU,EACV1P,MAAOoC,KAAKG,MAAMsK,SAAS0R,SAIhCvQ,aACCvJ,MAAAC,cAAA,OAAK4B,UAAU,4BACb7B,MAAAC,cAACoD,eAAchB,MAAM,gBZwiH5BhG,IAAK,eACLd,MAAO,SYthHGqQ,YAAarQ,OAAO,GAAAsQ,QAAAlO,KAC3B2K,WAAa3K,KAAKG,MAAMwK,UAGR,aAAhBsD,aAAuC,KAAVrQ,QACzB,SAASuQ,KAAKnO,KAAKG,MAAMsK,SAAS2D,SAGtCzD,WAAWyD,SAAU,EAFrBzD,WAAWyD,SAAU,GAOL,aAAhBH,aAAwC,KAAVrQ,QAC5ByQ,MAAMzQ,QAAWA,MAAQoC,KAAK3B,MAAMkF,WAAWvD,KAAKG,MAAMmO,sBAC5D3D,WAAW4C,UAAW,EAEtB5C,WAAW4C,UAAW,EAK1B,IAAIgB,0BAA2BvO,KAAK3B,MAAM+E,uBAAuBpD,KAAKG,MAAMqO,oBACnD/Q,QAAOwJ,KAAKsH,0BAA0BE,IAAI,SAACC,WAElE,GAAIC,UAAWT,OAAK7P,MAAMgF,mBAAmBkL,yBAAyBG,WAAzB,YAAmDC,QAC/E,YAAbA,UACEV,cAAgBS,YACdL,MAAMzQ,QAAoB,KAAVA,MAClB+M,WAAW+D,YAAa,EAExB/D,WAAW+D,YAAa,IAMhC1O,MAAKyB,UACHkJ,WAAYA,gBZkiHbjM,IAAK,eACLd,MAAO,SYzhHGgR,GAEX5O,KAAKkc,qBZ4hHJxd,IAAK,kBACLd,MAAO,WYxhHR,GAAI6M,UAAWzK,KAAKG,MAAMsK,SACtBG,gBAAkB5K,KAAKG,MAAMyK,eACjCH,UAAA,gBAA8BtC,KAAKE,UAAUuC,gBAC7C,IAAIoE,SAAU,GAAIC,SAClB,KAAK,GAAIvQ,QAAO+L,UACQ,KAAlBA,SAAS/L,OACXsQ,QAAQE,OAAOxQ,KAAK+L,SAAS/L,MAIjCwC,GAAEC,MACAwE,KAAM,OACNwJ,IAAKnP,KAAK3B,MAAMyF,OAChBtC,KAAMwN,QACNI,OAAO,EACPC,aAAa,EACbC,aAAa,EACbC,IAAK,WACH,GAAIA,KAAM,GAAIC,QAAOC,cACrB,OAAOF,MACP7O,KAAKV,MACPuB,QAAS,WAGPvB,KAAK3B,MAAM2F,gBAGX0L,KAAK,mCAAoC,GAAI,WAG7C1P,KAAK3B,MAAMsR,aACXjP,KAAKV,MACP2B,MAAO,SAASkL,KACdjL,QAAQD,MAAMkL,IACd,IAAI+C,KAAM/C,IAAIgD,aAAehD,IAAIgD,aAAaC,QAAU,iBACxD9P,MAAKyB,UACHiJ,aAAckF,MAEhBF,KAAKE,IAAK,GAAI,UACdlP,KAAKV,WZsiHRtB,IAAK,cACLd,MAAO,SY7hHEqQ,YAAarQ,OACvBoC,KAAK3B,MAAMiO,mBAAoB6D,WAAYnQ,KAAK3B,MAAMiO,UAGtD,IAAI7B,UAAWzK,KAAKG,MAAMsK,QAC1BA,UAASwD,aAAerQ,MAExBoC,KAAKyB,UACHgJ,SAAUA,cZiiHX/L,IAAK,qBACLd,MAAO,SY9hHSwS,gBAAiBjE,YAClC,GAAI1B,UAAWzK,KAAKG,MAAMsK,SACtBG,gBAAkB5K,KAAKG,MAAMyK,eACjCA,iBAAgBuB,YAAciE,gBAC9B3F,SAAA,gBAA8BG,gBAE9B5K,KAAKyB,UACHgJ,SAAUA,cZkiHX/L,IAAK,iBACLd,MAAO,WY9hHR,GAAIgN,iBAAkB5K,KAAKG,MAAMyK,gBAC7ByF,MAAQrQ,KAAKG,MAAM2K,iBAEvBF,iBAAgByF,MAAM,MAEtBrQ,KAAKyB,UACHmJ,gBAAiBA,gBACjBE,kBAAmBuF,MAAQ,OZmiH5B3R,IAAK,kBACLd,MAAO,SYhiHMc,IAAK4R,YAKnB,IAAK,GAJDD,OAAQrQ,KAAKG,MAAM2K,kBACnByF,QAAUF,MAAM,EAChBzF,gBAAkB5K,KAAKG,MAAMyK,gBAExBtM,EAAE,EAAGA,GAAGgS,WAAYhS,IAC3BsM,gBAAgB2F,SAAWpI,KAAKC,MAAMD,KAAKE,UAAUuC,gBAAgBlM,aAC9DkM,iBAAgB2F,SAASnC,QAChCmC,SAGFvQ,MAAKyB,UACHmJ,gBAAiBA,gBACjBE,kBAAmByF,aZoiHpB7R,IAAK,oBACLd,MAAO,SYjiHQc,KAChB,GAAIkM,iBAAkB5K,KAAKG,MAAMyK,sBAC1BA,iBAAgBlM,KAEvBsB,KAAKyB,UACHmJ,gBAAiBA,sBZsiHbqR,sBY/xHyB5Z,MAAM6D,UA+PzC+V,sBAAqBpT,WACnB2H,QAASnO,MAAMyG,UAAUC,OAAOC,WAChClF,OAAQzB,MAAMyG,UAAUC,OAAOC,WAC/BoF,QAAS/L,MAAMyG,UAAUC,OACzB0H,aAAcpO,MAAMyG,UAAUI,MZsiH/BhN,QAAQW,QYniHMof,sBZuiHT,SAAS9f,OAAQD,SAEtB,YAQA,SAASY,iBAAgBC,SAAUC,aAAe,KAAMD,mBAAoBC,cAAgB,KAAM,IAAIC,WAAU,qCAEhH,QAASC,4BAA2BC,KAAMb,MAAQ,IAAKa,KAAQ,KAAM,IAAIC,gBAAe,4DAAgE,QAAOd,MAAyB,gBAATA,OAAqC,kBAATA,MAA8Ba,KAAPb,KAElO,QAASe,WAAUC,SAAUC,YAAc,GAA0B,kBAAfA,aAA4C,OAAfA,WAAuB,KAAM,IAAIN,WAAU,iEAAoEM,YAAeD,UAASE,UAAYC,OAAOC,OAAOH,YAAcA,WAAWC,WAAaG,aAAeC,MAAON,SAAUO,YAAY,EAAOC,UAAU,EAAMC,cAAc,KAAeR,aAAYE,OAAOO,eAAiBP,OAAOO,eAAeV,SAAUC,YAAcD,SAASW,UAAYV,YAVjeE,OAAOgB,eAAevC,QAAS,cAC7B0B,OAAO,GAGT,IAAIM,cAAe,WAAc,QAASC,kBAAiBC,OAAQC,OAAS,IAAK,GAAIC,GAAI,EAAGA,EAAID,MAAME,OAAQD,IAAK,CAAE,GAAIE,YAAaH,MAAMC,EAAIE,YAAWX,WAAaW,WAAWX,aAAc,EAAOW,WAAWT,cAAe,EAAU,SAAWS,cAAYA,WAAWV,UAAW,GAAML,OAAOgB,eAAeL,OAAQI,WAAWE,IAAKF,aAAiB,MAAO,UAAUxB,YAAa2B,WAAYC,aAAiJ,MAA9HD,aAAYR,iBAAiBnB,YAAYQ,UAAWmB,YAAiBC,aAAaT,iBAAiBnB,YAAa4B,aAAqB5B,gBavzH3hBof,qBby0HsB,SAAUrc,kBax0HpC,QAAAqc,sBAAY/d,OAAOvB,gBAAAkD,KAAAoc,qBAAA,IAAAnc,OAAA/C,2BAAA8C,MAAAoc,qBAAAne,WAAAR,OAAAyC,eAAAkc,uBAAA9f,KAAA0D,KACX3B,OADW,OAGjB4B,OAAKE,OACHsK,YACAE,cACAvB,WAAW,EACXyH,eAAgB,GAGlB5Q,MAAKgL,YAAchL,MAAKgL,YAAYvK,KAAjBT,OACnBA,MAAKiL,kBAAoBjL,MAAKiL,kBAAkBxK,KAAvBT,OACzBA,MAAK8Q,eAAiB9Q,MAAK8Q,eAAerQ,KAApBT,OACtBA,MAAK+Q,kBAAoB/Q,MAAK+Q,kBAAkBtQ,KAAvBT,OACzBA,MAAKgR,KAAOhR,MAAKgR,KAAKvQ,KAAVT,OAdKA,MbmjIlB,MA1OA5C,WAAU+e,qBAAsBrc,kBAsBhC7B,aAAake,uBACX1d,IAAK,oBACLd,MAAO,Wa/0HR,GAAIoC,KAAK3B,MAAMoM,SAAU,CACvB,GAAIA,UAAWzK,KAAK3B,MAAMoM,QAE1BzK,MAAKyB,UACHgJ,SAAUA,ebq1Hb/L,IAAK,iBACLd,MAAO,Wah1HRoC,KAAKyB,UAAU2H,WAAYpJ,KAAKG,MAAMiJ,ebo1HrC1K,IAAK,oBACLd,MAAO,Sal1HQgR,GAChB,GAAIiC,gBAAiBjC,EAAExQ,OAAOR,KAE9BoC,MAAKyB,UACHoP,eAAgBA,oBbs1HjBnS,IAAK,OACLd,MAAO,Wal1HRoC,KAAK3B,MAAMgO,gBAAgBrM,KAAKG,MAAM0Q,mBbs1HrCnS,IAAK,SACLd,MAAO,Wal1HR,GAAIsT,6BACAC,0BACAC,6BACAC,0BACArR,MAAK3B,MAAM+M,iBACb8F,qBACE7O,MAAAC,cAAA,QAAM4B,UAAU,UACd7B,MAAAC,cAAA,OACE4B,UAAU,oBACV2F,QAAS7J,KAAK3B,MAAM+M,gBAFtB,MASJ+F,mBACE9O,MAAAC,cAAA,QAAM4B,UAAU,gBAAhB,cAMAlE,KAAK3B,MAAMgO,kBACb+E,sBACE/O,MAAAC,cAAA,QAAM4B,UAAU,UACd7B,MAAAC,cAAA,OACE4B,UAAU,oBACV2F,QAAS7J,KAAKiR,MAEd5O,MAAAC,cAAA,QAAM4B,UAAU,oCAItBmN,oBACEhP,MAAAC,cAAA,QAAM4B,UAAU,gBACd7B,MAAAC,cAAA,SACE4B,UAAU,wBACVyB,KAAK,SACL2L,IAAI,IACJC,IAAI,KACJtO,OAAQuO,MAAO,GAAItO,QAAS,UAC5BoJ,SAAUtM,KAAKgR,kBACfpT,MAAOoC,KAAKG,MAAM0Q,iBARtB,UAgBJ,IAAIY,+BACJ,IAAIzR,KAAK3B,MAAM+N,kBAAmB,CAChC,GAAMsF,aACJC,MAAO,UACPC,WAAY,GACZhI,OAAQ,UACRiI,SAAU,GAGZJ,yBACEpP,MAAAC,cAAA,QACE4B,UAAU,6BACV2F,QAAS7J,KAAK3B,MAAM+N,kBACpBnJ,MAAOyO,aAMb,MACErP,OAAAC,cAACoG,aACCxD,KAAK,kBAEL7C,MAAAC,cAAA,OAAK4B,UAAU,OACb7B,MAAAC,cAAA,OAAK4B,UAAU,aACb7B,MAAAC,cAAA,WACAD,MAAAC,cAAC+K,gBACCnI,KAAK,UACLR,MAAO,WAAa1E,KAAK3B,MAAMjC,GAC/BwJ,YAAa5F,KAAKiL,YAClB9F,IAAI,UACJmI,UAAU,EACV1P,MAAOoC,KAAKG,MAAMsK,SAAS2D,YAI/B/L,MAAAC,cAAA,OAAK4B,UAAU,WAAWjB,OAAQ6O,YAAY,EAAGC,UAAU,KACzD1P,MAAAC,cAAA,QACE4B,UAAYlE,KAAKG,MAAMiJ,UAAY,mCAAqC,iCACxEnG,OAAQ2G,OAAQ,UAAWiI,SAAS,GAAIG,SAAS,WAAYC,MAAM,IACnE9H,cAAY,WACZC,cAAa,SAAWpK,KAAK3B,MAAMjC,GACnCyN,QAAS7J,KAAK+Q,iBAEfU,0BAGLpP,MAAAC,cAAA,OAAK4B,UAAU,OACb7B,MAAAC,cAAA,OAAK4B,UAAU,aACf7B,MAAAC,cAAA,OAAK4B,UAAU,YACb7B,MAAAC,cAAA,OAAKlG,GAAI,QAAU4D,KAAK3B,MAAMjC,GAAI8H,UAAU,YAC1C7B,MAAAC,cAACkL,eACCtI,KAAK,gBACLR,MAAM,iBACN+I,QAASzN,KAAK3B,MAAMkG,yBACpBqB,YAAa5F,KAAKiL,YAClBqC,UAAU,EACV1P,MAAOoC,KAAKG,MAAMsK,SAASgI,mBAKnCpQ,MAAAC,cAAA,OAAK4B,UAAU,OACb7B,MAAAC,cAAA,OAAK4B,UAAU,aACb7B,MAAAC,cAAA,OAAK4B,UAAU,aACf7B,MAAAC,cAAA,OAAK4B,UAAU,mBACZgN,qBACAC,oBAEH9O,MAAAC,cAAA,OAAK4B,UAAU,mBACZkN,sBACAC,2Bb03HV3S,IAAK,cACLd,MAAO,Sa72HEqQ,YAAarQ,OACvBoC,KAAK3B,MAAMiO,mBAAoB6D,WAAYnQ,KAAK3B,MAAMiO,UAEtD,IAAI7B,UAAWzK,KAAKG,MAAMsK,QAC1BA,UAASwD,aAAerQ,MAExBoC,KAAKyB,UAEHgJ,SAAUA,UAEVzK,KAAKkL,sBb82HNxM,IAAK,oBACLd,MAAO,Wa12HRoC,KAAK3B,MAAM6M,kBAAkBlL,KAAKG,MAAMsK,SAAUzK,KAAK3B,MAAMjC,Qb+2HvDggB,sBapjIyB/Z,MAAM6D,UAyMzCkW,sBAAqBvT,WACnBzM,GAAIiG,MAAMyG,UAAUC,OACpBnG,cAAeP,MAAMyG,UAAUG,OAAOD,WACtCnG,sBAAuBR,MAAMyG,UAAUG,OAAOD,WAC9C5F,uBAAwBf,MAAMyG,UAAUG,OAAOD,WAC/C3F,mBAAoBhB,MAAMyG,UAAUG,OAAOD,WAC3CzF,WAAYlB,MAAMyG,UAAUG,OAAOD,Ybi3HpC9M,QAAQW,Qa92HMuf,sBbk3HT,SAASjgB,OAAQD,SAEtB,YAQA,SAASY,iBAAgBC,SAAUC,aAAe,KAAMD,mBAAoBC,cAAgB,KAAM,IAAIC,WAAU,qCAEhH,QAASC,4BAA2BC,KAAMb,MAAQ,IAAKa,KAAQ,KAAM,IAAIC,gBAAe,4DAAgE,QAAOd,MAAyB,gBAATA,OAAqC,kBAATA,MAA8Ba,KAAPb,KAElO,QAASe,WAAUC,SAAUC,YAAc,GAA0B,kBAAfA,aAA4C,OAAfA,WAAuB,KAAM,IAAIN,WAAU,iEAAoEM,YAAeD,UAASE,UAAYC,OAAOC,OAAOH,YAAcA,WAAWC,WAAaG,aAAeC,MAAON,SAAUO,YAAY,EAAOC,UAAU,EAAMC,cAAc,KAAeR,aAAYE,OAAOO,eAAiBP,OAAOO,eAAeV,SAAUC,YAAcD,SAASW,UAAYV,YAVjeE,OAAOgB,eAAevC,QAAS,cAC7B0B,OAAO,GAGT,IAAIM,cAAe,WAAc,QAASC,kBAAiBC,OAAQC,OAAS,IAAK,GAAIC,GAAI,EAAGA,EAAID,MAAME,OAAQD,IAAK,CAAE,GAAIE,YAAaH,MAAMC,EAAIE,YAAWX,WAAaW,WAAWX,aAAc,EAAOW,WAAWT,cAAe,EAAU,SAAWS,cAAYA,WAAWV,UAAW,GAAML,OAAOgB,eAAeL,OAAQI,WAAWE,IAAKF,aAAiB,MAAO,UAAUxB,YAAa2B,WAAYC,aAAiJ,MAA9HD,aAAYR,iBAAiBnB,YAAYQ,UAAWmB,YAAiBC,aAAaT,iBAAiBnB,YAAa4B,aAAqB5B,gBcvjI3hB2H,Kd8lIM,SAAU5E,kBc5lIpB,QAAA4E,MAAYtG,OAAOvB,gBAAAkD,KAAA2E,KAAA,IAAA1E,OAAA/C,2BAAA8C,MAAA2E,KAAA1G,WAAAR,OAAAyC,eAAAyE,OAAArI,KAAA0D,KACX3B,QAEAge,KAAO7M,OAAO2G,SAASkG,KACzBC,UAAY,EAJC,OAYbrc,OAAK5B,MAAMyG,WAAauX,KAC1BC,UAAYD,KAAKE,OAAO,GACftc,MAAK5B,MAAMwG,WACpByX,UAAYrc,MAAK5B,MAAMwG,WACd5E,MAAK5B,MAAMuG,KAAKrG,OAAS,IAClC+d,UAAYrc,MAAK5B,MAAMuG,KAAK,GAAGxI,IAGjC6D,MAAKE,OACHmc,UAAWA,WAGbrc,MAAKuc,YAAcvc,MAAKuc,YAAY9b,KAAjBT,OACnBA,MAAKwc,QAAUxc,MAAKwc,QAAQ/b,KAAbT,OACfA,MAAKyc,YAAczc,MAAKyc,YAAYhc,KAAjBT,OA1BFA,MdktIlB,MArHA5C,WAAUsH,KAAM5E,kBAkChB7B,aAAayG,OACXjG,IAAK,cACLd,MAAO,ScpmIE+e,MAAO/N,GAKjB,GAJA5O,KAAKyB,UAAU6a,UAAWK,QAC1B3c,KAAK3B,MAAMue,YAAYD,OAGnB3c,KAAK3B,MAAMyG,UAAW,CACxB,GAAM+X,gBAAiB3b,EAAE,QAAQ4b,aAAe5b,EAAE,QAAQ4b,WAC1DtN,QAAO2G,SAASkG,KAAOzN,EAAExQ,OAAOie,KAChCnb,EAAE,aAAa4b,UAAUD,oBdwmI1Bne,IAAK,UACLd,MAAO,WcpmIR,GAAIgH,MAAQ5E,KAAK3B,MAAMuG,KAAM6J,IAAI,SAASsO,KACxC,GAAIC,UAAWhd,KAAKG,MAAMmc,YAAcS,IAAI3gB,GAAK,SAAW,KACxDga,KAAO,IAAM2G,IAAI3gB,GACjB6gB,MAAQ,OAASF,IAAI3gB,EACzB,OACEiG,OAAAC,cAAA,MACE+H,KAAK,eACLnG,UAAW8Y,SACXte,IAAKqe,IAAI3gB,IAETiG,MAAAC,cAAA,KAAGlG,GAAI6gB,MACJ7G,KAAMA,KACN/L,KAAK,MACLF,cAAY,MACZN,QAAS7J,KAAKwc,YAAY9b,KAAK,KAAMqc,IAAI3gB,KAEzC2gB,IAAIrY,SAIXhE,KAAKV,MAEP,OAAO4E,Sd0mINlG,IAAK,cACLd,MAAO,WcvmIR,GAAIsf,UAAW7a,MAAMkF,SAASkH,IAAIzO,KAAK3B,MAAMmJ,SAAU,SAASC,MAAO/I,KACrE,GAAI+I,MACF,MAAOpF,OAAM6F,aAAaT,OACxB6U,UAAWtc,KAAKG,MAAMmc,UACtB5d,IAAKA,OAGTgC,KAAKV,MAEP,OAAOkd,ad2mINxe,IAAK,SACLd,MAAO,WcxmIR,GAAIgH,MAAO5E,KAAKyc,UACZS,SAAWld,KAAK0c,cAChBS,UACFvL,WAAY,EACZwL,aAAc,MAGhB,OACE/a,OAAAC,cAAA,WACED,MAAAC,cAAA,MAAI4B,UAAU,eAAemG,KAAK,UAAUpH,MAAOka,UAChDvY,MAEHvC,MAAAC,cAAA,OAAK4B,UAAU,eACZgZ,edonIDvY,McptIStC,MAAM6D,UAsGzBvB,MAAKkE,WACHjE,KAAMvC,MAAMyG,UAAUuU,MAAMrU,WAC5BnE,WAAYxC,MAAMyG,UAAUC,OAC5BjE,UAAWzC,MAAMyG,UAAUwU,MAE7B3Y,KAAKgE,cACHiU,YAAa,aAGb9X,WAAW,EdwnIZ,IcjnIKyY,cdinIc,SAAUC,mBchnI5B,QAAAD,cAAYlf,OAAOvB,gBAAAkD,KAAAud,aAAA,IAAA7R,QAAAxO,2BAAA8C,MAAAud,aAAAtf,WAAAR,OAAAyC,eAAAqd,eAAAjhB,KAAA0D,KACX3B,QAEAge,KAAO7M,OAAO2G,SAASkG,KACzBC,UAAY,EAJC,OAYb5Q,QAAKrN,MAAMyG,WAAauX,KAC1BC,UAAYD,KAAKE,OAAO,GACf7Q,OAAKrN,MAAMwG,WACpByX,UAAY5Q,OAAKrN,MAAMwG,WACd6G,OAAKrN,MAAMuG,KAAKrG,OAAS,IAClC+d,UAAY5Q,OAAKrN,MAAMuG,KAAK,GAAGxI,IAGjCsP,OAAKvL,OACHmc,UAAWA,WAGb5Q,OAAK8Q,YAAc9Q,OAAK8Q,YAAY9b,KAAjBgL,QACnBA,OAAK+Q,QAAU/Q,OAAK+Q,QAAQ/b,KAAbgL,QACfA,OAAKgR,YAAchR,OAAKgR,YAAYhc,KAAjBgL,QA1BFA,Od0uIlB,MAzHArO,WAAUkgB,aAAcC,mBAkCxBtf,aAAaqf,eACX7e,IAAK,cACLd,MAAO,ScxnIE+e,MAAO/N,GAKjB,GAJA5O,KAAKyB,UAAU6a,UAAWK,QAC1B3c,KAAK3B,MAAMue,YAAYD,OAGnB3c,KAAK3B,MAAMyG,UAAW,CACxB,GAAM+X,gBAAiB3b,EAAE,QAAQ4b,aAAe5b,EAAE,QAAQ4b,WAC1DtN,QAAO2G,SAASkG,KAAOzN,EAAExQ,OAAOie,KAChCnb,EAAE,aAAa4b,UAAUD,oBd4nI1Bne,IAAK,UACLd,MAAO,WcxnIR,GAAIgH,MAAQ5E,KAAK3B,MAAMuG,KAAM6J,IAAI,SAASsO,KACxC,GAAIC,UAAWhd,KAAKG,MAAMmc,YAAcS,IAAI3gB,GAAK,SAAW,KACxDga,KAAO,IAAM2G,IAAI3gB,GACjB6gB,MAAQ,OAASF,IAAI3gB,EACzB,OACEiG,OAAAC,cAAA,MACE+H,KAAK,eACLnG,UAAW8Y,SACXte,IAAKqe,IAAI3gB,IAETiG,MAAAC,cAAA,KAAGlG,GAAI6gB,MACJ7G,KAAMA,KACN/L,KAAK,MACLF,cAAY,MACZN,QAAS7J,KAAKwc,YAAY9b,KAAK,KAAMqc,IAAI3gB,KAEzC2gB,IAAIrY,SAIXhE,KAAKV,MAEP,OAAO4E,Sd8nINlG,IAAK,cACLd,MAAO,Wc3nIR,GAAIsf,UAAW7a,MAAMkF,SAASkH,IAAIzO,KAAK3B,MAAMmJ,SAAU,SAASC,MAAO/I;AACrE,GAAI+I,MACF,MAAOpF,OAAM6F,aAAaT,OACxB6U,UAAWtc,KAAKG,MAAMmc,UACtB5d,IAAKA,OAGTgC,KAAKV,MAEP,OAAOkd,ad+nINxe,IAAK,SACLd,MAAO,Wc5nIR,GAAIgH,MAAO5E,KAAKyc,UACZS,SAAWld,KAAK0c,cAChBS,UACFvL,WAAY,EACZwL,aAAc,MAGhB,OACE/a,OAAAC,cAAA,WACED,MAAAC,cAAA,OAAK4B,UAAU,8BACb7B,MAAAC,cAAA,MAAI4B,UAAU,4BAA4BmG,KAAK,UAAUpH,MAAOka,UAC7DvY,OAGLvC,MAAAC,cAAA,OAAK4B,UAAU,iCACZgZ,ed0oIDK,cc3uIiBlb,MAAM6D,UAuGjCqX,cAAa1U,WACXjE,KAAMvC,MAAMyG,UAAUuU,MAAMrU,WAC5BnE,WAAYxC,MAAMyG,UAAUC,OAC5BjE,UAAWzC,MAAMyG,UAAUwU,MAE7BC,aAAa5U,cACXiU,YAAa,aAGb9X,WAAW,Ed+oIZ,IcxoIKC,SdwoIS,SAAU0Y,mBAGtB,QAAS1Y,WAGP,MAFAjI,iBAAgBkD,KAAM+E,SAEf7H,2BAA2B8C,MAAO+E,QAAQ9G,WAAaR,OAAOyC,eAAe6E,UAAU2Y,MAAM1d,KAAM2d,YA6B5G,MAlCAtgB,WAAU0H,QAAS0Y,mBAQnBvf,aAAa6G,UACXrG,IAAK,SACLd,MAAO,WcjpIR,GAAIggB,WAAY,WACZ9a,YASJ,OAPI9C,MAAK3B,MAAM2G,QAAUhF,KAAK3B,MAAMie,YAClCsB,WAAa,WAEX5d,KAAK3B,MAAMwf,QACb/a,MAAQT,MAAAC,cAAA,UAAKtC,KAAK3B,MAAMwf,QAIxBxb,MAAAC,cAAA,OAAK+H,KAAK,WAAWnG,UAAW0Z,UAAWxhB,GAAI4D,KAAK3B,MAAM2G,OACvDlC,MACA9C,KAAK3B,MAAMmJ,cd4pIVzC,Sc3qIY1C,MAAM6D,UAoB5BnB,SAAQ8D,WACN7D,MAAO3C,MAAMyG,UAAUC,OAAOC,WAC9B6U,MAAOxb,MAAMyG,UAAUC,OACvBuT,UAAWja,MAAMyG,UAAUC,Qd6pI5B7M,QczpICyI,Ud0pIDzI,QczpICqhB,0Bd0pIDrhB,QczpIC6I,iBd6pII,SAAS5I,OAAQD,QAASH,qBAE/B,YAcA,SAASW,wBAAuBC,KAAO,MAAOA,MAAOA,IAAIC,WAAaD,KAAQE,QAASF,KAEvF,QAASG,iBAAgBC,SAAUC,aAAe,KAAMD,mBAAoBC,cAAgB,KAAM,IAAIC,WAAU,qCAEhH,QAASC,4BAA2BC,KAAMb,MAAQ,IAAKa,KAAQ,KAAM,IAAIC,gBAAe,4DAAgE,QAAOd,MAAyB,gBAATA,OAAqC,kBAATA,MAA8Ba,KAAPb,KAElO,QAASe,WAAUC,SAAUC,YAAc,GAA0B,kBAAfA,aAA4C,OAAfA,WAAuB,KAAM,IAAIN,WAAU,iEAAoEM,YAAeD,UAASE,UAAYC,OAAOC,OAAOH,YAAcA,WAAWC,WAAaG,aAAeC,MAAON,SAAUO,YAAY,EAAOC,UAAU,EAAMC,cAAc,KAAeR,aAAYE,OAAOO,eAAiBP,OAAOO,eAAeV,SAAUC,YAAcD,SAASW,UAAYV,YAlBjeE,OAAOgB,eAAevC,QAAS,cAC7B0B,OAAO,GAGT,IAAIkgB,UAAWrgB,OAAOsgB,QAAU,SAAU3f,QAAU,IAAK,GAAIE,GAAI,EAAGA,EAAIqf,UAAUpf,OAAQD,IAAK,CAAE,GAAI0f,QAASL,UAAUrf,EAAI,KAAK,GAAII,OAAOsf,QAAcvgB,OAAOD,UAAUygB,eAAe3hB,KAAK0hB,OAAQtf,OAAQN,OAAOM,KAAOsf,OAAOtf,MAAY,MAAON,SAEnPF,aAAe,WAAc,QAASC,kBAAiBC,OAAQC,OAAS,IAAK,GAAIC,GAAI,EAAGA,EAAID,MAAME,OAAQD,IAAK,CAAE,GAAIE,YAAaH,MAAMC,EAAIE,YAAWX,WAAaW,WAAWX,aAAc,EAAOW,WAAWT,cAAe,EAAU,SAAWS,cAAYA,WAAWV,UAAW,GAAML,OAAOgB,eAAeL,OAAQI,WAAWE,IAAKF,aAAiB,MAAO,UAAUxB,YAAa2B,WAAYC,aAAiJ,MAA9HD,aAAYR,iBAAiBnB,YAAYQ,UAAWmB,YAAiBC,aAAaT,iBAAiBnB,YAAa4B,aAAqB5B,gBex8IjiBkhB,OAAAniB,oBAAA,If48IKoiB,QAAUzhB,uBAAuBwhB,Qe/7IhCE,Uf09IW,SAAUre,kBez9IzB,QAAAqe,WAAY/f,OAAOvB,gBAAAkD,KAAAoe,UAAA,IAAAne,OAAA/C,2BAAA8C,MAAAoe,UAAAngB,WAAAR,OAAAyC,eAAAke,YAAA9hB,KAAA0D,KACX3B,OADW,OAEjB4B,OAAKE,OAAUke,MAAM,EAAOC,cAAc,GAE1Cre,MAAKse,UAAYte,MAAKse,UAAU7d,KAAfT,OACjBA,MAAKue,WAAave,MAAKue,WAAW9d,KAAhBT,OAClBA,MAAKwe,aAAexe,MAAKwe,aAAa/d,KAAlBT,OACpBA,MAAKye,WAAaze,MAAKye,WAAWhe,KAAhBT,OAPDA,Mf0iJlB,MAhFA5C,WAAU+gB,UAAWre,kBAgBrB7B,aAAakgB,YACX1f,IAAK,iBACLd,MAAO,Wel+IO,GAAA8N,QAAA1L,IACf,OAAOqC,OAAMkF,SAASkH,IAAIzO,KAAK3B,MAAMmJ,SAAU,SAAAC,OAC7C,MAAOpF,OAAM6F,aAAaT,OAASkI,UAAWjE,OAAK8S,WAAYlS,SAAUZ,OAAKgT,kBfw+I/EhgB,IAAK,YACLd,MAAO,Wep+IRoC,KAAKyB,UACH4c,MAAM,Ofy+IP3f,IAAK,aACLd,MAAO,Wer+IRoC,KAAKyB,UACH6c,cAAc,Of0+If5f,IAAK,eACLd,MAAO,Wet+IJoC,KAAKG,MAAMme,aACb5O,MACE5M,MAAO,gBACPmK,KAAM,uEACNtH,KAAM,UACNoO,kBAAkB,EAClBC,kBAAmB,UACnBC,iBAAkB,UAEpB,WACEjU,KAAKwe,cACL9d,KAAKV,OAEPA,KAAKwe,gBf0+IN9f,IAAK,aACLd,MAAO,Wet+IRoC,KAAKyB,UACH4c,MAAM,EACNC,cAAc,Of2+If5f,IAAK,SACLd,MAAO,Wev+IR,MACEyE,OAAAC,cAAA6b,QAAAthB,QAAAihB,UACEU,WAAYxe,KAAKye,aACjBF,UAAWve,KAAKue,UAChBF,KAAMre,KAAKG,MAAMke,MACbre,KAAK3B,OAER2B,KAAK2e,sBf6+IJP,We3iJc/b,MAAM6D,UAoE9BkY,WAAUvV,WACR/F,MAAOT,MAAMyG,UAAUC,OACvBhG,YAAaV,MAAMyG,UAAUC,OAC7B6V,YAAavc,MAAMyG,UAAUG,OAC7BjG,cAAeX,MAAMyG,UAAUG,QAEjCmV,UAAUzV,cACR5F,YAAa,mBf6+Id7G,QAAQW,Qe1+IMuhB,Wf8+IT,SAASjiB,OAAQD,SAEtB,YAQA,SAASY,iBAAgBC,SAAUC,aAAe,KAAMD,mBAAoBC,cAAgB,KAAM,IAAIC,WAAU,qCAEhH,QAASC,4BAA2BC,KAAMb,MAAQ,IAAKa,KAAQ,KAAM,IAAIC,gBAAe,4DAAgE,QAAOd,MAAyB,gBAATA,OAAqC,kBAATA,MAA8Ba,KAAPb,KAElO,QAASe,WAAUC,SAAUC,YAAc,GAA0B,kBAAfA,aAA4C,OAAfA,WAAuB,KAAM,IAAIN,WAAU,iEAAoEM,YAAeD,UAASE,UAAYC,OAAOC,OAAOH,YAAcA,WAAWC,WAAaG,aAAeC,MAAON,SAAUO,YAAY,EAAOC,UAAU,EAAMC,cAAc,KAAeR,aAAYE,OAAOO,eAAiBP,OAAOO,eAAeV,SAAUC,YAAcD,SAASW,UAAYV,YAVjeE,OAAOgB,eAAevC,QAAS,cAC7B0B,OAAO,GAGT,IAAIM,cAAe,WAAc,QAASC,kBAAiBC,OAAQC,OAAS,IAAK,GAAIC,GAAI,EAAGA,EAAID,MAAME,OAAQD,IAAK,CAAE,GAAIE,YAAaH,MAAMC,EAAIE,YAAWX,WAAaW,WAAWX,aAAc,EAAOW,WAAWT,cAAe,EAAU,SAAWS,cAAYA,WAAWV,UAAW,GAAML,OAAOgB,eAAeL,OAAQI,WAAWE,IAAKF,aAAiB,MAAO,UAAUxB,YAAa2B,WAAYC,aAAiJ,MAA9HD,aAAYR,iBAAiBnB,YAAYQ,UAAWmB,YAAiBC,aAAaT,iBAAiBnB,YAAa4B,aAAqB5B,gBgBvkJ3hB6hB,MhBimJO,SAAU9e,kBgB/lJrB,QAAA8e,OAAYxgB,OAAO,MAAAvB,iBAAAkD,KAAA6e,OAAA3hB,2BAAA8C,MAAA6e,MAAA5gB,WAAAR,OAAAyC,eAAA2e,QAAAviB,KAAA0D,KACX3B,QhBgtJP,MAjHAhB,WAAUwhB,MAAO9e,kBAQjB7B,aAAa2gB,QACXngB,IAAK,SACLd,MAAO,WgBnmJR,GAqDIkhB,OArDEC,eACJ/M,SAAU,QACVgN,OAAQ,KACRC,IAAK,EACLC,OAAQ,EACRC,KAAM,EACNlN,MAAO,EACPmN,gBAAiB,kBACjBC,QAAS,IAILC,YACJtN,SAAU,WACVuN,SAAU,IACVC,UAAW,OACXC,OAAQ,SACRL,gBAAiB,OACjBM,aAAc,GACdC,UAAW,OACXX,OAAQ,MAGJY,YACJ1c,QAAS,OACT2c,cAAe,MACfC,WAAY,SACZC,WAAY,UACZtX,OAAQ,OACRuX,qBAAsB,KACtBrO,MAAO,UACPE,SAAU,GACVwN,QAAS,IAGL3N,YACJE,WAAY,OACZhI,OAAQ,WAGJqW,WACJZ,QAAS,IAGPa,OACF7d,MAAAC,cAAA,OACE4B,UAAWlE,KAAK3B,MAAM0E,YACtB8G,QAAS7J,KAAK3B,MAAMkgB,WAEnBve,KAAK3B,MAAM2E,cAmChB,OA9BIhD,MAAK3B,MAAMggB,OACbS,MACEzc,MAAAC,cAAA,OAAKW,MAAO8b,cAAelV,QAAS7J,KAAK3B,MAAMmgB,YAC7Cnc,MAAAC,cAAA,OACEW,MAAOqc,WACPzV,QAAS,SAAA+E,GACPA,EAAEuR,oBAGJ9d,MAAAC,cAAA,OACEW,MAAO2c,YAEN5f,KAAK3B,MAAMyE,MACZT,MAAAC,cAAA,QACEW,MAAOyO,WACP7H,QAAS7J,KAAK3B,MAAMmgB,YAFtB,MAOFnc,MAAAC,cAAA,OACEW,MAAOgd,WAENjgB,KAAK3B,MAAMmJ,aAQpBnF,MAAAC,cAAA,OAAKW,MAAOjD,KAAK3B,MAAM4E,OACpBid,OACApB,WhBmnJCD,OgBntJUxc,MAAM6D,UAsG1B2Y,OAAMhW,WACJ/F,MAAOT,MAAMyG,UAAUC,OACvBhG,YAAaV,MAAMyG,UAAUC,OAC7B6V,YAAavc,MAAMyG,UAAUG,OAC7BjG,cAAeX,MAAMyG,UAAUG,OAC/BoV,KAAMhc,MAAMyG,UAAUsX,QACtB5B,WAAYnc,MAAMyG,UAAUI,KAC5BqV,UAAWlc,MAAMyG,UAAUI,MAE7B2V,MAAMlW,cACJ5F,YAAa,mBhBmnJd7G,QAAQW,QgBhnJMgiB,OhBonJT,SAAS1iB,OAAQD,SAEtB,YAQA,SAASY,iBAAgBC,SAAUC,aAAe,KAAMD,mBAAoBC,cAAgB,KAAM,IAAIC,WAAU,qCAEhH,QAASC,4BAA2BC,KAAMb,MAAQ,IAAKa,KAAQ,KAAM,IAAIC,gBAAe,4DAAgE,QAAOd,MAAyB,gBAATA,OAAqC,kBAATA,MAA8Ba,KAAPb,KAElO,QAASe,WAAUC,SAAUC,YAAc,GAA0B,kBAAfA,aAA4C,OAAfA,WAAuB,KAAM,IAAIN,WAAU,iEAAoEM,YAAeD,UAASE,UAAYC,OAAOC,OAAOH,YAAcA,WAAWC,WAAaG,aAAeC,MAAON,SAAUO,YAAY,EAAOC,UAAU,EAAMC,cAAc,KAAeR,aAAYE,OAAOO,eAAiBP,OAAOO,eAAeV,SAAUC,YAAcD,SAASW,UAAYV,YAVjeE,OAAOgB,eAAevC,QAAS,cAC7B0B,OAAO,GAGT,IAAIM,cAAe,WAAc,QAASC,kBAAiBC,OAAQC,OAAS,IAAK,GAAIC,GAAI,EAAGA,EAAID,MAAME,OAAQD,IAAK,CAAE,GAAIE,YAAaH,MAAMC,EAAIE,YAAWX,WAAaW,WAAWX,aAAc,EAAOW,WAAWT,cAAe,EAAU,SAAWS,cAAYA,WAAWV,UAAW,GAAML,OAAOgB,eAAeL,OAAQI,WAAWE,IAAKF,aAAiB,MAAO,UAAUxB,YAAa2B,WAAYC,aAAiJ,MAA9HD,aAAYR,iBAAiBnB,YAAYQ,UAAWmB,YAAiBC,aAAaT,iBAAiBnB,YAAa4B,aAAqB5B,gBiBtvJ3hBqjB,OjBywJQ,SAAUtgB,kBiBvwJtB,QAAAsgB,QAAYhiB,OAAO,MAAAvB,iBAAAkD,KAAAqgB,QAAAnjB,2BAAA8C,MAAAqgB,OAAApiB,WAAAR,OAAAyC,eAAAmgB,SAAA/jB,KAAA0D,KACX3B,QjB2xJP,MApBAhB,WAAUgjB,OAAQtgB,kBAQlB7B,aAAamiB,SACX3hB,IAAK,SACLd,MAAO,WiB5wJR,MACEyE,OAAAC,cAAA,OAAK4B,UAAU,oBACb7B,MAAAC,cAAA,OAAK4B,UAAU,gBjBoxJbmc,QiB9xJWhe,MAAM6D,UjBiyJ1BhK,SAAQW,QiB/wJMwjB,QjBmxJT,SAASlkB,OAAQD,SAEtB,YkB1yJD,SAASokB,cAAa5J,OAAQ6J,KAAMC,QAASC,YAO3C,GAAI9J,OACJ8J,YAAWvZ,QAAQ,SAASwZ,OAAQC,OAClChK,IAAI+J,QAAUF,QAAQG,QACrB3gB,KAGH,IAAI4gB,WAMJ,IAHAA,QAAUA,QAAQlG,KAAK,KAGR,YAAXhE,OAAsB,CACxB,GAAImK,aAAcne,MAAMqB,QAAU,8BAAgC4S,IAAA,OAClE,OAAOtU,OAAAC,cAAA,MAAI4B,UAAY0c,SAASve,MAAAC,cAAA,KAAG8T,KAAMyK,aAAcN,OAGzD,GAAe,mBAAX7J,OAA6B,CAC/B,GAAImK,aAAcne,MAAMqB,QAAU,8BAAgC4S,IAAI,iBACtE,OAAOtU,OAAAC,cAAA,MAAI4B,UAAY0c,SAASve,MAAAC,cAAA,KAAG8T,KAAMyK,aAAcN,OAGzD,GAAe,sBAAX7J,OAAgC,CAClC,GAAIoK,cAAepe,MAAMqB,QAAU,+BAAiC4S,IAAI,oBACxE,OAAOtU,OAAAC,cAAA,MAAI4B,UAAY0c,SAASve,MAAAC,cAAA,KAAG8T,KAAM0K,cAAeP,OAgB1D,MAAOle,OAAAC,cAAA,MAAI4B,UAAW0c,SAAUL,MlB6vJjC9iB,OAAOgB,eAAevC,QAAS,cAC7B0B,OAAO,IAwFT1B,QAAQW,QkBn1JMyjB,clBu1JT,SAASnkB,OAAQD,SAEtB,YmB34JD,SAASokB,cAAa5J,OAAQ6J,KAAMC,QAASC,YAO3C,GAAI9J,OACJ8J,YAAWvZ,QAAQ,SAASwZ,OAAQC,OAClChK,IAAI+J,QAAUF,QAAQG,QACrB3gB,KAGH,IAAI4gB,WAMJ,IAHAA,QAAUA,QAAQlG,KAAK,KAGR,YAAXhE,OAAsB,CACxB,GAAIoK,cAAepe,MAAMqB,QAAU,+BAAiC4S,IAAA,OACpE,OAAOtU,OAAAC,cAAA,MAAI4B,UAAY0c,SAASve,MAAAC,cAAA,KAAG8T,KAAM0K,cAAeP,OAG1D,GAAe,mBAAX7J,OAA6B,CACbhU,MAAMqB,QAAU,+BAAiC4S,IAAI,iBACvE,OAAOtU,OAAAC,cAAA,MAAI4B,UAAY0c,SAASve,MAAAC,cAAA,KAAG8T,KAAM0K,cAAeP,OAgB1D,MAAOle,OAAAC,cAAA,MAAI4B,UAAW0c,SAAUL,MnBm2JjC9iB,OAAOgB,eAAevC,QAAS,cAC7B0B,OAAO,IA2ET1B,QAAQW,QmB56JMyjB","file":"./modules/biobank/js/biobankIndex.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _FilterForm = __webpack_require__(1);\n\t\n\tvar _FilterForm2 = _interopRequireDefault(_FilterForm);\n\t\n\tvar _specimenForm = __webpack_require__(3);\n\t\n\tvar _specimenForm2 = _interopRequireDefault(_specimenForm);\n\t\n\tvar _poolSpecimenForm = __webpack_require__(8);\n\t\n\tvar _poolSpecimenForm2 = _interopRequireDefault(_poolSpecimenForm);\n\t\n\tvar _containerForm = __webpack_require__(10);\n\t\n\tvar _containerForm2 = _interopRequireDefault(_containerForm);\n\t\n\tvar _Tabs = __webpack_require__(12);\n\t\n\tvar _FormModal = __webpack_require__(13);\n\t\n\tvar _FormModal2 = _interopRequireDefault(_FormModal);\n\t\n\tvar _Loader = __webpack_require__(15);\n\t\n\tvar _Loader2 = _interopRequireDefault(_Loader);\n\t\n\tvar _columnFormatterSpecimen = __webpack_require__(16);\n\t\n\tvar _columnFormatterSpecimen2 = _interopRequireDefault(_columnFormatterSpecimen);\n\t\n\tvar _columnFormatterContainer = __webpack_require__(17);\n\t\n\tvar _columnFormatterContainer2 = _interopRequireDefault(_columnFormatterContainer);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\tvar BiobankIndex = function (_React$Component) {\n\t  _inherits(BiobankIndex, _React$Component);\n\t\n\t  function BiobankIndex(props) {\n\t    _classCallCheck(this, BiobankIndex);\n\t\n\t    var _this = _possibleConstructorReturn(this, (BiobankIndex.__proto__ || Object.getPrototypeOf(BiobankIndex)).call(this, props));\n\t\n\t    _this.state = {\n\t      isLoaded: false,\n\t      specimenFilter: {},\n\t      containerFilter: {},\n\t      isOpen: false,\n\t      formOptions: {}\n\t    };\n\t\n\t    // Bind component instance to custom methods\n\t    _this.loadPage = _this.loadPage.bind(_this);\n\t    _this.fetchSpecimenData = _this.fetchSpecimenData.bind(_this);\n\t    _this.fetchFormOptions = _this.fetchFormOptions.bind(_this);\n\t    _this.fetchContainerData = _this.fetchContainerData.bind(_this);\n\t    _this.updateSpecimenFilter = _this.updateSpecimenFilter.bind(_this);\n\t    _this.updateContainerFilter = _this.updateContainerFilter.bind(_this);\n\t    _this.resetFilters = _this.resetFilters.bind(_this);\n\t    _this.mapFormOptions = _this.mapFormOptions.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(BiobankIndex, [{\n\t    key: 'componentDidMount',\n\t    value: function componentDidMount() {\n\t      this.loadPage();\n\t    }\n\t  }, {\n\t    key: 'loadPage',\n\t    value: function loadPage() {\n\t      this.fetchSpecimenData();\n\t      this.fetchFormOptions();\n\t      this.fetchContainerData();\n\t    }\n\t\n\t    /**\n\t     * Retrieve data from the provided URL and save it in state\n\t     * Additionaly add hiddenHeaders to global loris variable\n\t     * for easy access by columnFormatter.\n\t     */\n\t\n\t  }, {\n\t    key: 'fetchSpecimenData',\n\t    value: function fetchSpecimenData() {\n\t      $.ajax(this.props.specimenDataURL, {\n\t        method: \"GET\",\n\t        dataType: 'json',\n\t        success: function (data) {\n\t          this.setState({\n\t            specimenData: data,\n\t            isLoaded: true\n\t          });\n\t        }.bind(this),\n\t        error: function error(_error) {\n\t          console.error(_error);\n\t        }\n\t      });\n\t    }\n\t  }, {\n\t    key: 'fetchContainerData',\n\t    value: function fetchContainerData() {\n\t      $.ajax(this.props.containerDataURL, {\n\t        method: \"GET\",\n\t        dataType: 'json',\n\t        success: function (data) {\n\t          this.setState({\n\t            containerData: data,\n\t            isLoaded: true\n\t          });\n\t        }.bind(this),\n\t        error: function error(_error2) {\n\t          console.error(_error2);\n\t        }\n\t      });\n\t    }\n\t  }, {\n\t    key: 'fetchFormOptions',\n\t    value: function fetchFormOptions() {\n\t      $.ajax(this.props.formDataURL, {\n\t        method: \"GET\",\n\t        dataType: 'json',\n\t        success: function (data) {\n\t          this.setState({\n\t            formOptions: data,\n\t            isLoaded: true\n\t          });\n\t        }.bind(this),\n\t        error: function error(_error3) {\n\t          console.error(_error3);\n\t        }\n\t      });\n\t    }\n\t  }, {\n\t    key: 'updateSpecimenFilter',\n\t    value: function updateSpecimenFilter(specimenFilter) {\n\t      this.setState({ specimenFilter: specimenFilter });\n\t    }\n\t\n\t    // This works,\n\t    // but there must be a way to do this with just one updateFilter function\n\t\n\t  }, {\n\t    key: 'updateContainerFilter',\n\t    value: function updateContainerFilter(containerFilter) {\n\t      this.setState({ containerFilter: containerFilter });\n\t    }\n\t  }, {\n\t    key: 'resetFilters',\n\t    value: function resetFilters() {\n\t      this.refs.biobankFilter.clearFilter();\n\t    }\n\t\n\t    //map options for forms\n\t\n\t  }, {\n\t    key: 'mapFormOptions',\n\t    value: function mapFormOptions(rawObject, targetAttribute) {\n\t      var data = {};\n\t      for (var id in rawObject) {\n\t        data[id] = rawObject[id][targetAttribute];\n\t      }\n\t\n\t      return data;\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t      // Waiting for async data to load\n\t      if (!this.state.isLoaded) {\n\t        return React.createElement(_Loader2.default, null);\n\t      }\n\t\n\t      var addSpecimenButton = void 0;\n\t      var poolSpecimenButton = void 0;\n\t      var addContainerButton = void 0;\n\t      if (loris.userHasPermission('biobank_write')) {\n\t\n\t        /**\n\t         * Map Options for Form Select Elements of Specimen Form\n\t         */\n\t        var specimenTypes = this.mapFormOptions(this.state.formOptions.specimenTypes, 'type');\n\t        var containerTypesPrimary = this.mapFormOptions(this.state.formOptions.containerTypesPrimary, 'label');\n\t\n\t        addSpecimenButton = React.createElement(\n\t          _FormModal2.default,\n\t          {\n\t            title: 'Add New Specimen',\n\t            buttonClass: 'action-button add',\n\t            buttonContent: '+',\n\t            style: { display: 'inline-block' }\n\t          },\n\t          React.createElement(_specimenForm2.default, {\n\t            specimenTypes: specimenTypes,\n\t            containerTypesPrimary: containerTypesPrimary,\n\t            containersNonPrimary: this.state.formOptions.containersNonPrimary,\n\t            specimenTypeAttributes: this.state.formOptions.specimenTypeAttributes,\n\t            attributeDatatypes: this.state.formOptions.attributeDatatypes,\n\t            attributeOptions: this.state.formOptions.attributeOptions,\n\t            capacities: this.state.formOptions.capacities,\n\t            containerDimensions: this.state.formOptions.containerDimensions,\n\t            containerCoordinates: this.state.formOptions.containerCoordinates,\n\t            specimenTypeUnits: this.state.formOptions.specimenTypeUnits,\n\t            pSCIDs: this.state.formOptions.pSCIDs,\n\t            visits: this.state.formOptions.visits,\n\t            sessionData: this.state.formOptions.sessionData,\n\t            action: loris.BaseURL + '/biobank/ajax/submitData.php?action=submitSpecimenForm',\n\t            refreshParent: this.loadPage\n\t          })\n\t        );\n\t\n\t        var poolSpecimenButtonContent = React.createElement('span', { className: 'glyphicon glyphicon-resize-small' });\n\t\n\t        poolSpecimenButton = React.createElement(\n\t          _FormModal2.default,\n\t          {\n\t            title: 'Pool Specimens',\n\t            buttonClass: 'action-button pool',\n\t            buttonContent: poolSpecimenButtonContent,\n\t            style: { display: 'inline-block' }\n\t          },\n\t          React.createElement(_poolSpecimenForm2.default, {\n\t            specimenTypes: specimenTypes,\n\t            containerTypesPrimary: containerTypesPrimary,\n\t            containersNonPrimary: this.state.formOptions.containersNonPrimary,\n\t            specimenTypeAttributes: this.state.formOptions.specimenTypeAttributes,\n\t            specimenProtocols: this.state.formOptions.specimenProtocols,\n\t            specimenProtocolAttributes: this.state.formOptions.specimenProtocolAttributes,\n\t            attributeDatatypes: this.state.formOptions.attributeDatatypes,\n\t            attributeOptions: this.state.formOptions.attributeOptions,\n\t            capacities: this.state.formOptions.capacities,\n\t\n\t            containerDimensions: this.state.formOptions.containerDimensions,\n\t            containerCoordinates: this.state.formOptions.containerCoordinates,\n\t            specimenTypeUnits: this.state.formOptions.specimenTypeUnits,\n\t            specimenUnits: this.state.formOptions.specimenUnits,\n\t            pSCIDs: this.state.formOptions.pSCIDs,\n\t            sessionData: this.state.formOptions.sessionData,\n\t            specimenRequest: loris.BaseURL + '/biobank/ajax/requestData.php?action=getSpecimenDataFromBarcode',\n\t            refreshParent: this.loadPage,\n\t            action: loris.BaseURL + '/biobank/ajax/submitData.php?action=submitPoolForm'\n\t          })\n\t        );\n\t\n\t        var containerTypesNonPrimary = this.mapFormOptions(this.state.formOptions.containerTypesNonPrimary, 'label');\n\t\n\t        addContainerButton = React.createElement(\n\t          _FormModal2.default,\n\t          {\n\t            title: 'Add New Container',\n\t            buttonClass: 'action-button add',\n\t            buttonContent: '+',\n\t            style: { display: 'inline-block' }\n\t          },\n\t          React.createElement(_containerForm2.default, {\n\t            containerTypesNonPrimary: containerTypesNonPrimary,\n\t            sites: this.state.formOptions.sites,\n\t            action: loris.BaseURL + '/biobank/ajax/submitData.php?action=submitContainer',\n\t            refreshParent: this.loadPage\n\t          })\n\t        );\n\t      }\n\t\n\t      //Look at CCNA code from Zaliqa to modify this to be more streamline\n\t      var tabList = [{ id: \"specimens\", label: \"Specimens\" }, { id: \"containers\", label: \"Containers\" }];\n\t\n\t      return React.createElement(\n\t        'div',\n\t        { id: 'biobank-page' },\n\t        React.createElement(\n\t          _Tabs.Tabs,\n\t          { tabs: tabList, defaultTab: 'specimens', updateURL: true },\n\t          React.createElement(\n\t            _Tabs.TabPane,\n\t            { TabId: tabList[0].id },\n\t            React.createElement(\n\t              'div',\n\t              { className: 'row' },\n\t              React.createElement(\n\t                'div',\n\t                { className: 'col-lg-10' },\n\t                React.createElement(\n\t                  _FilterForm2.default,\n\t                  {\n\t                    Module: 'biobank',\n\t                    name: 'specimen_filter',\n\t                    id: 'specimen_filter',\n\t                    ref: 'specimenFilter',\n\t                    columns: 3,\n\t                    formElements: this.state.specimenData.form,\n\t                    onUpdate: this.updateSpecimenFilter,\n\t                    filter: this.state.specimenFilter\n\t                  },\n\t                  React.createElement('br', null),\n\t                  React.createElement(StaticElement, null),\n\t                  React.createElement(StaticElement, null),\n\t                  React.createElement(ButtonElement, { label: 'Clear Filters', type: 'reset', onUserInput: this.resetFilters })\n\t                )\n\t              ),\n\t              React.createElement(\n\t                'div',\n\t                { className: 'col-lg-2' },\n\t                React.createElement(\n\t                  'span',\n\t                  { className: 'action' },\n\t                  addSpecimenButton,\n\t                  React.createElement(\n\t                    'div',\n\t                    { className: 'action-title' },\n\t                    'Add Specimen'\n\t                  )\n\t                ),\n\t                React.createElement('br', null),\n\t                React.createElement('br', null),\n\t                React.createElement(\n\t                  'span',\n\t                  { className: 'action' },\n\t                  poolSpecimenButton,\n\t                  React.createElement(\n\t                    'div',\n\t                    { className: 'action-title' },\n\t                    'Pool Specimens'\n\t                  )\n\t                )\n\t              )\n\t            ),\n\t            React.createElement(StaticDataTable, {\n\t              Data: this.state.specimenData.Data,\n\t              Headers: this.state.specimenData.Headers,\n\t              Filter: this.state.specimenFilter,\n\t              getFormattedCell: _columnFormatterSpecimen2.default\n\t            })\n\t          ),\n\t          React.createElement(\n\t            _Tabs.TabPane,\n\t            { TabId: tabList[1].id },\n\t            React.createElement(\n\t              'div',\n\t              { className: 'row' },\n\t              React.createElement(\n\t                'div',\n\t                { className: 'col-lg-10' },\n\t                React.createElement(\n\t                  _FilterForm2.default,\n\t                  {\n\t                    Module: 'biobank',\n\t                    name: 'container_filter',\n\t                    id: 'container_filter',\n\t                    ref: 'containerFilter',\n\t                    columns: 3,\n\t                    formElements: this.state.containerData.form,\n\t                    onUpdate: this.updateContainerFilter,\n\t                    filter: this.state.containerFilter\n\t                  },\n\t                  React.createElement('br', null),\n\t                  React.createElement(StaticElement, null),\n\t                  React.createElement(StaticElement, null),\n\t                  React.createElement(ButtonElement, { label: 'Clear Filters', type: 'reset', onUserInput: this.resetFilters })\n\t                )\n\t              ),\n\t              React.createElement(\n\t                'div',\n\t                { className: 'col-lg-2' },\n\t                React.createElement(\n\t                  'span',\n\t                  { className: 'action' },\n\t                  addContainerButton,\n\t                  React.createElement(\n\t                    'div',\n\t                    { className: 'action-title' },\n\t                    'New Container'\n\t                  )\n\t                )\n\t              )\n\t            ),\n\t            React.createElement(StaticDataTable, {\n\t              Data: this.state.containerData.Data,\n\t              Headers: this.state.containerData.Headers,\n\t              Filter: this.state.containerFilter,\n\t              getFormattedCell: _columnFormatterContainer2.default\n\t            })\n\t          )\n\t        )\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return BiobankIndex;\n\t}(React.Component);\n\t\n\t$(function () {\n\t  var biobankIndex = React.createElement(\n\t    'div',\n\t    { className: 'page-biobank' },\n\t    React.createElement(BiobankIndex, {\n\t      specimenDataURL: loris.BaseURL + '/biobank/?format=json',\n\t      containerDataURL: loris.BaseURL + '/biobank/ajax/requestData.php?action=getContainerFilterData',\n\t      formDataURL: loris.BaseURL + '/biobank/ajax/requestData.php?action=getFormOptions'\n\t    })\n\t  );\n\t\n\t  ReactDOM.render(biobankIndex, document.getElementById(\"lorisworkspace\"));\n\t});\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _Panel = __webpack_require__(2);\n\t\n\tvar _Panel2 = _interopRequireDefault(_Panel);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * This file contains React component for FilterForm\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author Loris Team\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @version 1.1.0\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */\n\t\n\t/**\n\t * FilterForm component.\n\t * A wrapper for form elements inside a selection filter.\n\t *\n\t * Adds necessary filter callbacks to all children and passes them to FormElement\n\t * for proper rendering.\n\t *\n\t * Keeps track of filter object and sends it to parent on every update.\n\t *\n\t * //HACK/NOTE: Loris has special behaviour for `candID` attribute in the query string,\n\t * making it impossible to use it for selection filters. This components renames\n\t * all `candID` fields to `candidateID` automatically before appending them to URL.\n\t *\n\t */\n\tvar FilterForm = function (_React$Component) {\n\t  _inherits(FilterForm, _React$Component);\n\t\n\t  function FilterForm(props) {\n\t    _classCallCheck(this, FilterForm);\n\t\n\t    // Bind component instance to custom methods\n\t    var _this = _possibleConstructorReturn(this, (FilterForm.__proto__ || Object.getPrototypeOf(FilterForm)).call(this, props));\n\t\n\t    _this.clearFilter = _this.clearFilter.bind(_this);\n\t    _this.getFormChildren = _this.getFormChildren.bind(_this);\n\t    _this.setFilter = _this.setFilter.bind(_this);\n\t    _this.onElementUpdate = _this.onElementUpdate.bind(_this);\n\t\n\t    // Keeps track of querystring values\n\t    // Saved as class variable instead of keeping in state\n\t    _this.queryString = QueryString.get();\n\t    return _this;\n\t  }\n\t\n\t  _createClass(FilterForm, [{\n\t    key: 'componentDidMount',\n\t    value: function componentDidMount() {\n\t      var filter = {};\n\t      var queryString = this.queryString;\n\t\n\t      // Initiaze filter using querystring value\n\t      Object.keys(queryString).forEach(function (key) {\n\t        var filterKey = key === 'candidateID' ? 'candID' : key;\n\t        filter[filterKey] = {\n\t          value: queryString[key],\n\t          exactMatch: false\n\t        };\n\t      });\n\t\n\t      // Update parent component\n\t      this.props.onUpdate(filter);\n\t    }\n\t\n\t    /**\n\t     * Clear the filter object, querystring and input fields\n\t     */\n\t\n\t  }, {\n\t    key: 'clearFilter',\n\t    value: function clearFilter() {\n\t      this.queryString = QueryString.clear(this.props.Module);\n\t      this.props.onUpdate({});\n\t    }\n\t\n\t    /**\n\t     * Itterates through FilterForm children, sets necessary callback functions\n\t     * and initializes filterTable\n\t     *\n\t     * @return {Array} formChildren - array of children with necessary props\n\t     */\n\t\n\t  }, {\n\t    key: 'getFormChildren',\n\t    value: function getFormChildren() {\n\t      var formChildren = [];\n\t      React.Children.forEach(this.props.children, function (child, key) {\n\t        // If child is a React component (i.e not a simple DOM element)\n\t        if (React.isValidElement(child) && typeof child.type === \"function\" && child.props.onUserInput) {\n\t          var callbackFunc = child.props.onUserInput;\n\t          var callbackName = callbackFunc.name;\n\t          var elementName = child.type.displayName;\n\t          var queryFieldName = child.props.name === 'candID' ? 'candidateID' : child.props.name;\n\t          var filterValue = this.queryString[queryFieldName];\n\t          // If callback function was not set, set it to onElementUpdate() for form\n\t          // elements and to clearFilter() for <ButtonElement type='reset'/>.\n\t          if (callbackName === \"onUserInput\") {\n\t            if (elementName === \"ButtonElement\" && child.props.type === \"reset\") {\n\t              callbackFunc = this.clearFilter;\n\t            } else {\n\t              callbackFunc = this.onElementUpdate.bind(null, elementName);\n\t            }\n\t          }\n\t          // Pass onUserInput and value props to all children\n\t          formChildren.push(React.cloneElement(child, {\n\t            onUserInput: callbackFunc,\n\t            value: filterValue ? filterValue : '',\n\t            key: key\n\t          }));\n\t          // Initialize filter for StaticDataTable\n\t          this.setFilter(elementName, child.props.name, filterValue);\n\t        } else {\n\t          formChildren.push(React.cloneElement(child, { key: key }));\n\t        }\n\t      }.bind(this));\n\t\n\t      return formChildren;\n\t    }\n\t\n\t    /**\n\t     * Appends entry to filter object or deletes it if value is\n\t     * empty.\n\t     *\n\t     * Sets exactMatch to true for all SelectElements (i.e dropdowns)\n\t     * in order to force StaticDataTable to do exact comparaison\n\t     *\n\t     * @param {string} type - form element type (i.e component name)\n\t     * @param {string} key - the name of the form element\n\t     * @param {string} value - the value of the form element\n\t     *\n\t     * @return {{}} filter - filterData\n\t     */\n\t\n\t  }, {\n\t    key: 'setFilter',\n\t    value: function setFilter(type, key, value) {\n\t      var filter = {};\n\t      if (this.props.filter) {\n\t        filter = JSON.parse(JSON.stringify(this.props.filter));\n\t      }\n\t\n\t      if (key && value) {\n\t        filter[key] = {};\n\t        filter[key].value = value;\n\t        filter[key].exactMatch = type === \"SelectElement\";\n\t      } else if (filter && key && value === '') {\n\t        delete filter[key];\n\t      }\n\t\n\t      return filter;\n\t    }\n\t\n\t    /**\n\t     * Sets filter object and querystring to reflect values of input fields\n\t     *\n\t     * @param {string} type - form element type (i.e component name)\n\t     * @param {string} fieldName - the name of the form element\n\t     * @param {string} fieldValue - the value of the form element\n\t     */\n\t\n\t  }, {\n\t    key: 'onElementUpdate',\n\t    value: function onElementUpdate(type, fieldName, fieldValue) {\n\t      // Make sure both key/value are string before sending them to querystring\n\t      if (typeof fieldName !== \"string\" || typeof fieldValue !== \"string\") {\n\t        return;\n\t      }\n\t\n\t      // Update query string\n\t      var queryFieldName = fieldName === 'candID' ? 'candidateID' : fieldName;\n\t      this.queryString = QueryString.set(this.queryString, queryFieldName, fieldValue);\n\t\n\t      // Update filter and get new filter object\n\t      var filter = this.setFilter(type, fieldName, fieldValue);\n\t      this.props.onUpdate(filter);\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t      // Get formatted children\n\t      var formChildren = this.getFormChildren();\n\t      var formElements = this.props.formElements;\n\t\n\t      if (formElements) {\n\t        Object.keys(formElements).forEach(function (fieldName) {\n\t          var queryFieldName = fieldName === 'candID' ? 'candidateID' : fieldName;\n\t          formElements[fieldName].onUserInput = this.onElementUpdate.bind(null, fieldName);\n\t          formElements[fieldName].value = this.queryString[queryFieldName];\n\t        }.bind(this));\n\t      }\n\t\n\t      return React.createElement(\n\t        _Panel2.default,\n\t        {\n\t          id: this.props.id,\n\t          height: this.props.height,\n\t          title: this.props.title\n\t        },\n\t        React.createElement(\n\t          FormElement,\n\t          this.props,\n\t          formChildren\n\t        )\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return FilterForm;\n\t}(React.Component);\n\t\n\tFilterForm.defaultProps = {\n\t  id: 'selection-filter',\n\t  height: '100%',\n\t  title: 'Selection Filter',\n\t  onUpdate: function onUpdate() {\n\t    console.warn('onUpdate() callback is not set!');\n\t  }\n\t};\n\tFilterForm.propTypes = {\n\t  Module: React.PropTypes.string.isRequired,\n\t  filter: React.PropTypes.object.isRequired,\n\t  id: React.PropTypes.string,\n\t  height: React.PropTypes.string,\n\t  title: React.PropTypes.string,\n\t  onUpdate: React.PropTypes.func\n\t};\n\t\n\texports.default = FilterForm;\n\n/***/ },\n/* 2 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * This file contains React component for Panel\n\t *\n\t * @author Alex I.\n\t * @version 1.0.0\n\t *\n\t */\n\t\n\t/**\n\t * Panel component\n\t * Wraps children in a collapsible bootstrap panel\n\t */\n\tvar Panel = function (_React$Component) {\n\t  _inherits(Panel, _React$Component);\n\t\n\t  function Panel(props) {\n\t    _classCallCheck(this, Panel);\n\t\n\t    var _this = _possibleConstructorReturn(this, (Panel.__proto__ || Object.getPrototypeOf(Panel)).call(this, props));\n\t\n\t    _this.state = {\n\t      collapsed: _this.props.initCollapsed\n\t    };\n\t\n\t    // Initialize panel class based on collapsed status\n\t    _this.panelClass = _this.props.initCollapsed ? \"panel-collapse collapse\" : \"panel-collapse collapse in\";\n\t\n\t    _this.toggleCollapsed = _this.toggleCollapsed.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(Panel, [{\n\t    key: \"toggleCollapsed\",\n\t    value: function toggleCollapsed() {\n\t      this.setState({ collapsed: !this.state.collapsed });\n\t    }\n\t  }, {\n\t    key: \"render\",\n\t    value: function render() {\n\t      // Change arrow direction based on collapse status\n\t      var glyphClass = this.state.collapsed ? \"glyphicon pull-right glyphicon-chevron-down\" : \"glyphicon pull-right glyphicon-chevron-up\";\n\t\n\t      var pencilGlyph = void 0;\n\t      if (this.props.edit) {\n\t        pencilGlyph = React.createElement(\"span\", {\n\t          className: \"glyphicon pull-right glyphicon-pencil\",\n\t          style: { marginRight: '10px', cursor: 'pointer' },\n\t          onClick: this.props.edit\n\t        });\n\t      }\n\t\n\t      var plusGlyph = void 0;\n\t      if (this.props.add) {\n\t        plusGlyph = React.createElement(\"span\", {\n\t          className: \"glyphicon pull-right glyphicon-plus\",\n\t          style: { marginRight: '10px', cursor: 'pointer' },\n\t          onClick: this.props.add\n\t        });\n\t      }\n\t\n\t      var removeGlyph = void 0;\n\t      if (this.props.cancel) {\n\t        removeGlyph = React.createElement(\"span\", {\n\t          className: \"glyphicon pull-right glyphicon-remove\",\n\t          style: { marginRight: '10px', cursor: 'pointer' },\n\t          onClick: this.props.cancel\n\t        });\n\t      }\n\t\n\t      // Add panel header, if title is set\n\t      var panelHeading = this.props.title ? React.createElement(\n\t        \"div\",\n\t        {\n\t          className: \"panel-heading\"\n\t        },\n\t        React.createElement(\"span\", {\n\t          className: glyphClass,\n\t          onClick: this.toggleCollapsed,\n\t          \"data-toggle\": \"collapse\",\n\t          \"data-target\": '#' + this.props.id,\n\t          style: { cursor: 'pointer' }\n\t        }),\n\t        pencilGlyph,\n\t        plusGlyph,\n\t        removeGlyph,\n\t        this.props.title\n\t      ) : '';\n\t\n\t      return React.createElement(\n\t        \"div\",\n\t        { className: \"panel panel-primary\" },\n\t        panelHeading,\n\t        React.createElement(\n\t          \"div\",\n\t          { id: this.props.id, className: this.panelClass, role: \"tabpanel\" },\n\t          React.createElement(\n\t            \"div\",\n\t            { className: \"panel-body\", style: { height: this.props.height } },\n\t            this.props.children\n\t          )\n\t        )\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return Panel;\n\t}(React.Component);\n\t\n\tPanel.propTypes = {\n\t  id: React.PropTypes.string,\n\t  height: React.PropTypes.string,\n\t  title: React.PropTypes.string,\n\t  edit: React.PropTypes.func,\n\t  add: React.PropTypes.func\n\t};\n\tPanel.defaultProps = {\n\t  initCollapsed: false,\n\t  id: 'default-panel',\n\t  height: '100%'\n\t};\n\t\n\texports.default = Panel;\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _barcodeForm = __webpack_require__(4);\n\t\n\tvar _barcodeForm2 = _interopRequireDefault(_barcodeForm);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * Biobank Collection Form\n\t *\n\t * Fetches data from Loris backend and displays a form allowing\n\t * to specimen a biobank file attached to a specific instrument\n\t *\n\t * @author Henri Rabalais\n\t * @version 1.0.0\n\t *\n\t * */\n\tvar BiobankSpecimenForm = function (_React$Component) {\n\t  _inherits(BiobankSpecimenForm, _React$Component);\n\t\n\t  function BiobankSpecimenForm(props) {\n\t    _classCallCheck(this, BiobankSpecimenForm);\n\t\n\t    var _this = _possibleConstructorReturn(this, (BiobankSpecimenForm.__proto__ || Object.getPrototypeOf(BiobankSpecimenForm)).call(this, props));\n\t\n\t    _this.state = {\n\t      formData: {},\n\t      errorMessage: null,\n\t      formErrors: {},\n\t      barcodeFormList: { 1: {} },\n\t      countBarcodeForms: 1\n\t    };\n\t\n\t    _this.handleSubmit = _this.handleSubmit.bind(_this);\n\t    _this.validateForm = _this.validateForm.bind(_this);\n\t    _this.setFormData = _this.setFormData.bind(_this);\n\t    _this.setParentFormData = _this.setParentFormData.bind(_this);\n\t    _this.specimenSubmit = _this.specimenSubmit.bind(_this);\n\t    _this.addBarcodeForm = _this.addBarcodeForm.bind(_this);\n\t    _this.setBarcodeFormData = _this.setBarcodeFormData.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(BiobankSpecimenForm, [{\n\t    key: 'componentDidMount',\n\t    value: function componentDidMount() {\n\t\n\t      // Sets formData to formData passed from parent component\n\t      // or else it is set to an empty object\n\t      // TODO: this should be moved to the constructor.\n\t      var formData = this.props.formData || this.state.formData;\n\t\n\t      //if this is a child specimen form then certain formData is set when component mount\n\t      //TODO: there is a better way of doing this.\n\t      //This solution assumes too much about the props being passed\n\t      if (this.props.parentSpecimenIds) {\n\t        formData['parentSpecimenIds'] = this.props.parentSpecimenIds;\n\t        formData['pscid'] = this.props.candidateId;\n\t        formData['visitLabel'] = this.props.sessionId;\n\t        formData['unitId'] = this.props.unitId;\n\t      }\n\t\n\t      this.setState({ formData: formData });\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t      var _this2 = this;\n\t\n\t      //Generates new Barcode Form everytime the addBarcodeForm button is pressed\n\t      var barcodeListArray = Object.keys(this.state.barcodeFormList);\n\t      var barcodeForms = [];\n\t      var i = 1;\n\t      var _iteratorNormalCompletion = true;\n\t      var _didIteratorError = false;\n\t      var _iteratorError = undefined;\n\t\n\t      try {\n\t        var _loop = function _loop() {\n\t          var key = _step.value;\n\t\n\t          barcodeForms.push(React.createElement(_barcodeForm2.default, {\n\t            key: key,\n\t            barcodeKey: key,\n\t            id: i,\n\t            formData: _this2.state.barcodeFormList[key] ? _this2.state.barcodeFormList[key] : null,\n\t            removeBarcodeForm: barcodeListArray.length !== 1 ? function () {\n\t              return _this2.removeBarcodeForm(key);\n\t            } : null,\n\t            addBarcodeForm: i == barcodeListArray.length ? _this2.addBarcodeForm : null,\n\t            copyBarcodeForm: i == barcodeListArray.length && _this2.state.barcodeFormList[key] ? _this2.copyBarcodeForm.bind(_this2, key) : null,\n\t            setParentFormData: _this2.setBarcodeFormData,\n\t            onChange: _this2.props.onChange,\n\t            specimenTypes: _this2.props.specimenTypes,\n\t            containerTypesPrimary: _this2.props.containerTypesPrimary,\n\t            containersNonPrimary: _this2.props.containersNonPrimary,\n\t            specimenTypeAttributes: _this2.props.specimenTypeAttributes,\n\t            attributeDatatypes: _this2.props.attributeDatatypes,\n\t            attributeOptions: _this2.props.attributeOptions,\n\t            capacities: _this2.props.capacities,\n\t            containerDimensions: _this2.props.containerDimensions,\n\t            containerCoordinates: _this2.props.containerCoordinates,\n\t            specimenTypeUnits: _this2.props.specimenTypeUnits,\n\t            units: _this2.props.units\n\t          }));\n\t\n\t          i++;\n\t        };\n\t\n\t        for (var _iterator = barcodeListArray[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n\t          _loop();\n\t        }\n\t      } catch (err) {\n\t        _didIteratorError = true;\n\t        _iteratorError = err;\n\t      } finally {\n\t        try {\n\t          if (!_iteratorNormalCompletion && _iterator.return) {\n\t            _iterator.return();\n\t          }\n\t        } finally {\n\t          if (_didIteratorError) {\n\t            throw _iteratorError;\n\t          }\n\t        }\n\t      }\n\t\n\t      var globalFields = void 0;\n\t      var remainingQuantityFields = void 0;\n\t      if (this.props.parentSpecimenIds) {\n\t        globalFields = React.createElement(\n\t          'div',\n\t          null,\n\t          React.createElement(StaticElement, {\n\t            label: 'Parent Specimen',\n\t            text: this.props.parentSpecimenBarcodes\n\t          }),\n\t          React.createElement(StaticElement, {\n\t            label: 'PSCID',\n\t            text: this.props.pscid\n\t          }),\n\t          React.createElement(StaticElement, {\n\t            label: 'Visit Label',\n\t            text: this.props.visit\n\t          })\n\t        );\n\t\n\t        //TODO: It may be wise to make unit static and forced, or atleast prepopulated --\n\t        remainingQuantityFields = React.createElement(\n\t          'div',\n\t          null,\n\t          React.createElement(TextboxElement, {\n\t            name: 'quantity',\n\t            label: 'Remaining Quantity',\n\t            onUserInput: this.setFormData,\n\t            required: true,\n\t            value: this.state.formData.quantity\n\t          }),\n\t          React.createElement(SelectElement, {\n\t            name: 'unitId',\n\t            label: 'Unit',\n\t            options: this.props.specimenUnits,\n\t            onUserInput: this.setFormData,\n\t            emptyOption: false,\n\t            required: true,\n\t            value: this.state.formData.unitId\n\t          })\n\t        );\n\t      } else {\n\t        globalFields = React.createElement(\n\t          'div',\n\t          null,\n\t          React.createElement(SearchableDropdown, {\n\t            name: 'pscid',\n\t            label: 'PSCID',\n\t            options: this.props.pSCIDs,\n\t            onUserInput: this.setFormData,\n\t            ref: 'pscid',\n\t            required: true,\n\t            value: this.state.formData.pscid,\n\t            placeHolder: 'Search for a PSCID'\n\t          }),\n\t          React.createElement(SelectElement, {\n\t            name: 'visitLabel',\n\t            label: 'Visit Label',\n\t            options: this.state.visits,\n\t            onUserInput: this.setFormData,\n\t            ref: 'visitLabel',\n\t            required: true,\n\t            value: this.state.formData.visitLabel,\n\t            disabled: this.state.formData.pscid ? false : true\n\t          })\n\t        );\n\t      }\n\t\n\t      //TODO: {barcodeForms} should eventually be moved to be after {remainingQuantityFields}\n\t      return React.createElement(\n\t        FormElement,\n\t        {\n\t          name: 'specimenForm',\n\t          id: 'specimenForm',\n\t          onSubmit: this.handleSubmit,\n\t          ref: 'form'\n\t        },\n\t        React.createElement(\n\t          'div',\n\t          { className: 'row' },\n\t          React.createElement(\n\t            'div',\n\t            { className: 'col-xs-9 col-xs-offset-1' },\n\t            globalFields,\n\t            remainingQuantityFields\n\t          )\n\t        ),\n\t        barcodeForms,\n\t        React.createElement(ButtonElement, {\n\t          label: 'Submit',\n\t          columnSize: 'col-sm-2 col-sm-offset-10'\n\t        })\n\t      );\n\t    }\n\t\n\t    /** *******************************************************************************\n\t     *                      ******     Helper methods     *******\n\t     *********************************************************************************/\n\t\n\t    /**\n\t     * Returns a valid name for the file to be specimened\n\t     *\n\t     * @param {string} pscid - PSCID selected from the dropdown\n\t     * @param {string} visitLabel - Visit label selected from the dropdown\n\t     * @param {string} instrument - Instrument selected from the dropdown\n\t     * @return {string} - Generated valid filename for the current selection\n\t     */\n\t    //  getValidFileName(pscid, visitLabel, instrument) {\n\t    //    var fileName = pscid + \"_\" + visitLabel;\n\t    //    if (instrument) fileName += \"_\" + instrument;\n\t    //\n\t    //    return fileName;\n\t    //  }\n\t\n\t\n\t  }, {\n\t    key: 'validateForm',\n\t    value: function validateForm(formElement, value) {\n\t      var _this3 = this;\n\t\n\t      var formErrors = this.state.formErrors;\n\t\n\t      //validate barcode regex\n\t      if (formElement === \"barcode\" && value !== \"\") {\n\t        if (!/^hello/.test(this.state.formData.barcode)) {\n\t          formErrors.barcode = true;\n\t        } else {\n\t          formErrors.barcode = false;\n\t        }\n\t      }\n\t\n\t      //validate that quantity is a number and less than capacity\n\t      if (formElement === \"quantity\" && value !== \"\") {\n\t        if (isNaN(value) || value > this.props.capacities[this.state.currentContainerType]) {\n\t          formErrors.quantity = true;\n\t        } else {\n\t          formErrors.quantity = false;\n\t        }\n\t      }\n\t\n\t      //validate datatypes and regex of generated type attributes\n\t      var specimenTypeFieldsObject = this.props.specimenTypeAttributes[this.state.currentSpecimenType];\n\t      var specimenTypeFields = Object.keys(specimenTypeFieldsObject).map(function (attribute) {\n\t\n\t        var datatype = _this3.props.attributeDatatypes[specimenTypeFieldsObject[attribute]['datatypeId']].datatype;\n\t        if (datatype === \"number\") {\n\t          if (formElement === attribute) {\n\t            if (isNaN(value) && value !== \"\") {\n\t              formErrors[attribute] = true;\n\t            } else {\n\t              formErrors[attribute] = false;\n\t            }\n\t          }\n\t        }\n\t      });\n\t\n\t      this.setState({\n\t        formErrors: formErrors\n\t      });\n\t    }\n\t\n\t    /**\n\t     * Handle form submission\n\t     * @param {object} e - Form submission event\n\t     */\n\t\n\t  }, {\n\t    key: 'handleSubmit',\n\t    value: function handleSubmit(e) {\n\t      e.preventDefault();\n\t\n\t      var formData = this.state.formData;\n\t      var barcodeFormList = this.state.barcodeFormList;\n\t      var formRefs = this.refs;\n\t      //let biobankFiles = this.state.Data.biobankFiles ? this.state.Data.biobankFiles : [];\n\t\n\t      // Validate the form\n\t      if (!this.isValidForm(formRefs, formData)) {\n\t        return;\n\t      }\n\t\n\t      this.specimenSubmit();\n\t    }\n\t\n\t    /*\n\t     * Uploads the file to the server\n\t     */\n\t\n\t  }, {\n\t    key: 'specimenSubmit',\n\t    value: function specimenSubmit() {\n\t      // Set form data and specimen the biobank file\n\t      var formData = this.state.formData;\n\t      var barcodeFormList = this.state.barcodeFormList;\n\t      formData['barcodeFormList'] = JSON.stringify(barcodeFormList);\n\t      var formObj = new FormData();\n\t      for (var _key in formData) {\n\t        if (formData[_key] !== \"\") {\n\t          formObj.append(_key, formData[_key]);\n\t        }\n\t      }\n\t\n\t      $.ajax({\n\t        type: 'POST',\n\t        url: this.props.action,\n\t        data: formObj,\n\t        cache: false,\n\t        contentType: false,\n\t        processData: false,\n\t        xhr: function () {\n\t          var xhr = new window.XMLHttpRequest();\n\t          return xhr;\n\t        }.bind(this),\n\t        success: function () {\n\t\n\t          this.props.refreshParent();\n\t          swal(\"Specimen Submission Successful!\", \"\", \"success\");\n\t          this.props.onSuccess();\n\t        }.bind(this),\n\t        error: function (err) {\n\t          console.error(err);\n\t          var msg = err.responseJSON ? err.responseJSON.message : \"Specimen error!\";\n\t          this.setState({\n\t            errorMessage: msg\n\t          });\n\t          swal(msg, \"\", \"error\");\n\t        }.bind(this)\n\t      });\n\t    }\n\t\n\t    /**\n\t     * Validate the form\n\t     *\n\t     * @param {object} formRefs - Object containing references to React form elements\n\t     * @param {object} formData - Object containing form data inputed by user\n\t     * @return {boolean} - true if all required fields are filled, false otherwise\n\t     */\n\t    //TODO: check media for the basis for validation\n\t\n\t  }, {\n\t    key: 'isValidForm',\n\t    value: function isValidForm(formRefs, formData) {\n\t      var isValidForm = true;\n\t\n\t      var requiredFields = {\n\t        pscid: null,\n\t        visitLabel: null\n\t      };\n\t\n\t      Object.keys(requiredFields).map(function (field) {\n\t        if (formData[field]) {\n\t          requiredFields[field] = formData[field];\n\t        } else if (formRefs[field]) {\n\t          formRefs[field].props.hasError = true;\n\t          isValidForm = false;\n\t        }\n\t      });\n\t      this.forceUpdate();\n\t\n\t      return isValidForm;\n\t    }\n\t\n\t    /**\n\t     * Set the form data based on state values of child elements/componenets\n\t     *\n\t     * @param {string} formElement - name of the selected element\n\t     * @param {string} value - selected value for corresponding form element\n\t     */\n\t\n\t  }, {\n\t    key: 'setFormData',\n\t    value: function setFormData(formElement, value) {\n\t      // This lets the modal window know that there is formData\n\t      // and will cause a warning to be thrown of the modal window\n\t      // is exited\n\t      this.props.onChange instanceof Function && this.props.onChange();\n\t\n\t      if (formElement === \"pscid\" && value !== \"\" && value !== undefined) {\n\t        this.state.visits = this.props.sessionData[this.props.pSCIDs[value]].visits;\n\t      }\n\t\n\t      var formData = this.state.formData;\n\t      formData[formElement] = value;\n\t\n\t      this.setState({ formData: formData }, this.setParentFormData());\n\t    }\n\t  }, {\n\t    key: 'setBarcodeFormData',\n\t    value: function setBarcodeFormData(barcodeFormData, barcodeKey) {\n\t      var formData = this.state.formData;\n\t      var barcodeFormList = this.state.barcodeFormList;\n\t      barcodeFormList[barcodeKey] = barcodeFormData;\n\t      formData['barcodeFormList'] = barcodeFormList;\n\t\n\t      this.setState({ formData: formData }, this.setParentFormData());\n\t    }\n\t  }, {\n\t    key: 'addBarcodeForm',\n\t    value: function addBarcodeForm() {\n\t      var barcodeFormList = this.state.barcodeFormList;\n\t      var count = this.state.countBarcodeForms;\n\t\n\t      barcodeFormList[count + 1] = {};\n\t\n\t      this.setState({\n\t        barcodeFormList: barcodeFormList,\n\t        countBarcodeForms: count + 1\n\t      });\n\t    }\n\t  }, {\n\t    key: 'copyBarcodeForm',\n\t    value: function copyBarcodeForm(key, multiplier) {\n\t      var count = this.state.countBarcodeForms;\n\t      var nextKey = count + 1;\n\t      var barcodeFormList = this.state.barcodeFormList;\n\t\n\t      for (var i = 1; i <= multiplier; i++) {\n\t        barcodeFormList[nextKey] = JSON.parse(JSON.stringify(barcodeFormList[key]));\n\t        delete barcodeFormList[nextKey].barcode;\n\t        nextKey++;\n\t      }\n\t\n\t      this.setState({\n\t        barcodeFormList: barcodeFormList,\n\t        countBarcodeForms: nextKey\n\t      });\n\t    }\n\t  }, {\n\t    key: 'removeBarcodeForm',\n\t    value: function removeBarcodeForm(key) {\n\t      var barcodeFormList = this.state.barcodeFormList;\n\t      delete barcodeFormList[key];\n\t\n\t      this.setState({\n\t        barcodeFormList: barcodeFormList\n\t      });\n\t    }\n\t  }, {\n\t    key: 'setParentFormData',\n\t    value: function setParentFormData() {\n\t      if (this.props.setParentFormData) {\n\t        var formData = this.state.formData;\n\t        this.props.setParentFormData(formData);\n\t      }\n\t    }\n\t  }]);\n\t\n\t  return BiobankSpecimenForm;\n\t}(React.Component);\n\t\n\tBiobankSpecimenForm.propTypes = {\n\t  DataURL: React.PropTypes.string.isRequired,\n\t  action: React.PropTypes.string.isRequired,\n\t  barcode: React.PropTypes.string,\n\t  refreshTable: React.PropTypes.func\n\t};\n\t\n\texports.default = BiobankSpecimenForm;\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _collectionForm = __webpack_require__(5);\n\t\n\tvar _collectionForm2 = _interopRequireDefault(_collectionForm);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * Biobank Barcode Form\n\t *\n\t * Acts a subform for BiobankSpecimenForm\n\t *\n\t * @author Henri Rabalais\n\t * @version 1.0.0\n\t *\n\t **/\n\t\n\tvar SpecimenBarcodeForm = function (_React$Component) {\n\t  _inherits(SpecimenBarcodeForm, _React$Component);\n\t\n\t  function SpecimenBarcodeForm(props) {\n\t    _classCallCheck(this, SpecimenBarcodeForm);\n\t\n\t    var _this = _possibleConstructorReturn(this, (SpecimenBarcodeForm.__proto__ || Object.getPrototypeOf(SpecimenBarcodeForm)).call(this, props));\n\t\n\t    _this.state = {\n\t      formData: {},\n\t      formErrors: {},\n\t      collapsed: true,\n\t      copyMultiplier: 1\n\t    };\n\t\n\t    _this.setFormData = _this.setFormData.bind(_this);\n\t    _this.setChildFormData = _this.setChildFormData.bind(_this);\n\t    _this.setParentFormData = _this.setParentFormData.bind(_this);\n\t    _this.toggleCollapse = _this.toggleCollapse.bind(_this);\n\t    _this.setCopyMultiplier = _this.setCopyMultiplier.bind(_this);\n\t    _this.copy = _this.copy.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(SpecimenBarcodeForm, [{\n\t    key: 'componentDidMount',\n\t    value: function componentDidMount() {\n\t      if (this.props.formData) {\n\t        var formData = this.props.formData;\n\t\n\t        this.setState({\n\t          formData: formData\n\t        });\n\t      }\n\t    }\n\t  }, {\n\t    key: 'toggleCollapse',\n\t    value: function toggleCollapse() {\n\t      this.setState({ collapsed: !this.state.collapsed });\n\t    }\n\t  }, {\n\t    key: 'setCopyMultiplier',\n\t    value: function setCopyMultiplier(e) {\n\t      var copyMultiplier = e.target.value;\n\t\n\t      this.setState({\n\t        copyMultiplier: copyMultiplier\n\t      });\n\t    }\n\t  }, {\n\t    key: 'copy',\n\t    value: function copy() {\n\t      this.props.copyBarcodeForm(this.state.copyMultiplier);\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t      var addBarcodeFormButton = void 0;\n\t      var addBarcodeFormText = void 0;\n\t      var copyBarcodeFormButton = void 0;\n\t      var copyBarcodeFormText = void 0;\n\t      if (this.props.addBarcodeForm) {\n\t        addBarcodeFormButton = React.createElement(\n\t          'span',\n\t          { className: 'action' },\n\t          React.createElement(\n\t            'div',\n\t            {\n\t              className: 'action-button add',\n\t              onClick: this.props.addBarcodeForm\n\t            },\n\t            '+'\n\t          )\n\t        );\n\t\n\t        addBarcodeFormText = React.createElement(\n\t          'span',\n\t          { className: 'action-title' },\n\t          'New Entry'\n\t        );\n\t      }\n\t\n\t      if (this.props.copyBarcodeForm) {\n\t        copyBarcodeFormButton = React.createElement(\n\t          'span',\n\t          { className: 'action' },\n\t          React.createElement(\n\t            'div',\n\t            {\n\t              className: 'action-button add',\n\t              onClick: this.copy\n\t            },\n\t            React.createElement('span', { className: 'glyphicon glyphicon-duplicate' })\n\t          )\n\t        );\n\t        copyBarcodeFormText = React.createElement(\n\t          'span',\n\t          { className: 'action-title' },\n\t          React.createElement('input', {\n\t            className: 'form-control input-sm',\n\t            type: 'number',\n\t            min: '1',\n\t            max: '50',\n\t            style: { width: 50, display: 'inline' },\n\t            onChange: this.setCopyMultiplier,\n\t            value: this.state.copyMultiplier\n\t          }),\n\t          'Copies'\n\t        );\n\t      }\n\t\n\t      var removeBarcodeFormButton = void 0;\n\t      if (this.props.removeBarcodeForm) {\n\t        var glyphStyle = {\n\t          color: '#DDDDDD',\n\t          marginLeft: 10,\n\t          cursor: 'pointer',\n\t          fontSize: 15\n\t        };\n\t\n\t        removeBarcodeFormButton = React.createElement('span', {\n\t          className: 'glyphicon glyphicon-remove',\n\t          onClick: this.props.removeBarcodeForm,\n\t          style: glyphStyle\n\t        });\n\t      }\n\t\n\t      return React.createElement(\n\t        FormElement,\n\t        {\n\t          name: 'biobankBarcode'\n\t        },\n\t        React.createElement(\n\t          'div',\n\t          { className: 'row' },\n\t          React.createElement(\n\t            'div',\n\t            { className: 'col-xs-9 col-xs-offset-1' },\n\t            React.createElement(\n\t              'div',\n\t              null,\n\t              React.createElement(TextboxElement, {\n\t                name: 'barcode',\n\t                label: 'Barcode ' + this.props.id,\n\t                onUserInput: this.setFormData,\n\t                ref: 'barcode',\n\t                required: true,\n\t                value: this.state.formData.barcode\n\t              })\n\t            )\n\t          ),\n\t          React.createElement(\n\t            'div',\n\t            { className: 'col-xs-1', style: { paddingLeft: 0, marginTop: 10 } },\n\t            React.createElement('span', {\n\t              className: this.state.collapsed ? 'glyphicon glyphicon-chevron-down' : 'glyphicon glyphicon-chevron-up',\n\t              style: { cursor: 'pointer', fontSize: 15, position: 'relative', right: 40 },\n\t              'data-toggle': 'collapse',\n\t              'data-target': '#item-' + this.props.id,\n\t              onClick: this.toggleCollapse\n\t            }),\n\t            removeBarcodeFormButton\n\t          )\n\t        ),\n\t        React.createElement(\n\t          'div',\n\t          { className: 'row' },\n\t          React.createElement('div', { className: 'col-xs-2' }),\n\t          React.createElement(\n\t            'div',\n\t            { className: 'col-xs-8' },\n\t            React.createElement(\n\t              'div',\n\t              { id: 'item-' + this.props.id, className: 'collapse' },\n\t              React.createElement(_collectionForm2.default, {\n\t                formData: this.props.formData,\n\t                setParentFormData: this.setChildFormData,\n\t                onChange: this.props.onChange,\n\t                specimenTypes: this.props.specimenTypes,\n\t                specimenTypeAttributes: this.props.specimenTypeAttributes,\n\t                attributeDatatypes: this.props.attributeDatatypes,\n\t                attributeOptions: this.props.attributeOptions,\n\t                containerTypesPrimary: this.props.containerTypesPrimary,\n\t                containersNonPrimary: this.props.containersNonPrimary,\n\t                containerDimensions: this.props.containerDimensions,\n\t                containerCoordinates: this.props.containerCoordinates,\n\t                specimenTypeUnits: this.props.specimenTypeUnits,\n\t                stati: this.props.stati\n\t              })\n\t            )\n\t          )\n\t        ),\n\t        React.createElement(\n\t          'div',\n\t          { className: 'row' },\n\t          React.createElement(\n\t            'div',\n\t            { className: 'col-xs-11' },\n\t            React.createElement('div', { className: 'col-xs-4' }),\n\t            React.createElement(\n\t              'div',\n\t              { className: 'col-xs-3 action' },\n\t              addBarcodeFormButton,\n\t              addBarcodeFormText\n\t            ),\n\t            React.createElement(\n\t              'div',\n\t              { className: 'col-xs-3 action' },\n\t              copyBarcodeFormButton,\n\t              copyBarcodeFormText\n\t            )\n\t          )\n\t        )\n\t      );\n\t    }\n\t\n\t    /**\n\t     * Set the form data based on state values of child elements/componenets\n\t     *\n\t     * @param {string} formElement - name of the selected element\n\t     * @param {string} value - selected value for corresponding form element\n\t     */\n\t\n\t  }, {\n\t    key: 'setFormData',\n\t    value: function setFormData(formElement, value) {\n\t      this.props.onChange instanceof Function && this.props.onChange();\n\t\n\t      var formData = this.state.formData;\n\t      formData[formElement] = value;\n\t\n\t      this.setState({\n\t        formData: formData\n\t      }, this.setParentFormData);\n\t    }\n\t  }, {\n\t    key: 'setChildFormData',\n\t    value: function setChildFormData(collectionFormData) {\n\t      var formData = this.state.formData;\n\t\n\t      for (var field in collectionFormData) {\n\t        formData[field] = collectionFormData[field];\n\t      }\n\t\n\t      this.setState({\n\t        formData: formData\n\t      }, this.setParentFormData);\n\t    }\n\t  }, {\n\t    key: 'setParentFormData',\n\t    value: function setParentFormData() {\n\t      this.props.setParentFormData(this.state.formData, this.props.barcodeKey);\n\t    }\n\t  }]);\n\t\n\t  return SpecimenBarcodeForm;\n\t}(React.Component);\n\t\n\tSpecimenBarcodeForm.propTypes = {\n\t  id: React.PropTypes.string,\n\t  specimenTypes: React.PropTypes.object.isRequired,\n\t  containerTypesPrimary: React.PropTypes.object.isRequired,\n\t  specimenTypeAttributes: React.PropTypes.object.isRequired,\n\t  attributeDatatypes: React.PropTypes.object.isRequired,\n\t  capacities: React.PropTypes.object.isRequired\n\t};\n\t\n\texports.default = SpecimenBarcodeForm;\n\n/***/ },\n/* 5 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _containerParentForm = __webpack_require__(6);\n\t\n\tvar _containerParentForm2 = _interopRequireDefault(_containerParentForm);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * Biobank Specimen Form\n\t *\n\t * Acts a subform for BiobankCollectionForm\n\t *\n\t * @author Henri Rabalais\n\t * @version 1.0.0\n\t *\n\t **/\n\t\n\tvar SpecimenCollectionForm = function (_React$Component) {\n\t  _inherits(SpecimenCollectionForm, _React$Component);\n\t\n\t  function SpecimenCollectionForm(props) {\n\t    _classCallCheck(this, SpecimenCollectionForm);\n\t\n\t    var _this = _possibleConstructorReturn(this, (SpecimenCollectionForm.__proto__ || Object.getPrototypeOf(SpecimenCollectionForm)).call(this, props));\n\t\n\t    _this.state = {\n\t      formData: { data: {} },\n\t      currentSpecimenType: _this.props.edit ? _this.props.specimenType : null,\n\t      currentContainerType: _this.props.edit ? _this.props.containerType : null\n\t    };\n\t\n\t    _this.setFormData = _this.setFormData.bind(_this);\n\t    _this.setSpecimenTypeFieldFormData = _this.setSpecimenTypeFieldFormData.bind(_this);\n\t    _this.setParentFormData = _this.setParentFormData.bind(_this);\n\t    _this.setContainerParentFormData = _this.setContainerParentFormData.bind(_this);\n\t    _this.getSpecimenTypeFields = _this.getSpecimenTypeFields.bind(_this);\n\t    _this.handleUpdate = _this.handleUpdate.bind(_this);\n\t    _this.updateSpecimen = _this.updateSpecimen.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(SpecimenCollectionForm, [{\n\t    key: 'componentDidMount',\n\t    value: function componentDidMount() {\n\t      var _this2 = this;\n\t\n\t      var formData = this.state.formData;\n\t\n\t      if (this.props.formData) {\n\t        formData = this.props.formData;\n\t        var currentSpecimenType = this.state.currentSpecimenType;\n\t\n\t        this.setState({\n\t          currentSpecimenType: formData.specimenType\n\t        });\n\t      }\n\t\n\t      if (this.props.edit) {\n\t        formData['specimenId'] = this.props.specimenId;\n\t        formData['containerId'] = this.props.containerId;\n\t        formData['specimenType'] = this.props.specimenType;\n\t        formData['containerType'] = this.props.containerType;\n\t        formData['quantity'] = this.props.collection.quantity;\n\t        formData['unitId'] = this.props.collection.unitId;\n\t        formData['date'] = this.props.collection.date;\n\t        formData['time'] = this.props.collection.time;\n\t        formData['comments'] = this.props.collection.comments;\n\t\n\t        var specimenTypeFieldsObject = this.props.specimenTypeAttributes[this.state.currentSpecimenType];\n\t        if (specimenTypeFieldsObject) {\n\t          var specimenTypeFields = Object.keys(specimenTypeFieldsObject).map(function (attribute) {\n\t            formData.data[attribute] = _this2.props.collection.data[attribute];\n\t          });\n\t        }\n\t      }\n\t\n\t      this.setState({\n\t        formData: formData\n\t      });\n\t    }\n\t  }, {\n\t    key: 'mapFormOptions',\n\t    value: function mapFormOptions(rawObject, targetAttribute) {\n\t      var data = {};\n\t      for (var id in rawObject) {\n\t        data[id] = rawObject[id][targetAttribute];\n\t      }\n\t\n\t      return data;\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t      var containerParentForm;\n\t      if (!this.props.edit) {\n\t        containerParentForm = React.createElement(_containerParentForm2.default, {\n\t          setParentFormData: this.setContainerParentFormData,\n\t          containersNonPrimary: this.props.containersNonPrimary,\n\t          containerDimensions: this.props.containerDimensions,\n\t          containerCoordinates: this.props.containerCoordinates\n\t        });\n\t      }\n\t\n\t      var updateButton;\n\t      if (this.props.edit) {\n\t        updateButton = React.createElement(ButtonElement, { label: 'Update' });\n\t      }\n\t\n\t      //This block of code should potentially be moved to setFormData();\n\t      //Consider Refactoring...\n\t      var specimenTypeUnits = {};\n\t      if (this.state.currentSpecimenType) {\n\t\n\t        //This modifies the selections for unit drop down based on the chosend specimen type \n\t        for (var id in this.props.specimenTypeUnits[this.state.currentSpecimenType]) {\n\t          specimenTypeUnits[id] = this.props.specimenTypeUnits[this.state.currentSpecimenType][id].unit;\n\t        }\n\t\n\t        var specimenTypeFieldsObject = this.props.specimenTypeAttributes[this.state.currentSpecimenType];\n\t        if (specimenTypeFieldsObject) {\n\t          var specimenTypeFields = this.getSpecimenTypeFields(specimenTypeFieldsObject);\n\t        }\n\t      }\n\t\n\t      var specimenFields;\n\t      if (this.state.currentSpecimenType) {\n\t        specimenFields = React.createElement(\n\t          'div',\n\t          null,\n\t          React.createElement(SelectElement, {\n\t            name: 'containerType',\n\t            label: 'Container Type',\n\t            options: this.props.containerTypesPrimary,\n\t            onUserInput: this.setFormData,\n\t            ref: 'containerType',\n\t            required: true,\n\t            value: this.state.formData.containerType\n\t          }),\n\t          React.createElement(TextboxElement, {\n\t            name: 'quantity',\n\t            label: 'Quantity',\n\t            onUserInput: this.setFormData,\n\t            ref: 'quantity',\n\t            required: true,\n\t            value: this.state.formData.quantity\n\t          }),\n\t          React.createElement(SelectElement, {\n\t            name: 'unitId',\n\t            label: 'Unit',\n\t            options: specimenTypeUnits,\n\t            onUserInput: this.setFormData,\n\t            required: true,\n\t            value: this.state.formData.unitId\n\t          }),\n\t          specimenTypeFields,\n\t          React.createElement(DateElement, {\n\t            name: 'date',\n\t            label: 'Date',\n\t            minYear: '2000',\n\t            maxYear: '2018',\n\t            onUserInput: this.setFormData,\n\t            required: true,\n\t            value: this.state.formData.date\n\t          }),\n\t          React.createElement(TimeElement, {\n\t            name: 'time',\n\t            label: 'Time',\n\t            onUserInput: this.setFormData,\n\t            required: true,\n\t            value: this.state.formData.time\n\t          }),\n\t          React.createElement(TextareaElement, {\n\t            name: 'comments',\n\t            label: 'Comments',\n\t            onUserInput: this.setFormData,\n\t            ref: 'comments',\n\t            value: this.state.formData.comments\n\t          }),\n\t          containerParentForm\n\t        );\n\t      }\n\t\n\t      return React.createElement(\n\t        FormElement,\n\t        {\n\t          name: 'biobankSpecimen',\n\t          onSubmit: this.handleUpdate,\n\t          ref: 'form'\n\t        },\n\t        React.createElement(SelectElement, {\n\t          name: 'specimenType',\n\t          label: 'Specimen Type',\n\t          options: this.props.specimenTypes,\n\t          onUserInput: this.setFormData,\n\t          ref: 'specimenType',\n\t          required: true,\n\t          value: this.state.formData.specimenType\n\t        }),\n\t        specimenFields,\n\t        updateButton\n\t      );\n\t    }\n\t\n\t    /**\n\t     * Set the form data based on state values of child elements/componenets\n\t     *\n\t     * @param {string} formElement - name of the selected element\n\t     * @param {string} value - selected value for corresponding form element\n\t     */\n\t\n\t  }, {\n\t    key: 'setFormData',\n\t    value: function setFormData(formElement, value) {\n\t\n\t      this.props.onChange instanceof Function && this.props.onChange();\n\t\n\t      var formData = this.state.formData;\n\t      formData[formElement] = value;\n\t\n\t      if (formElement === \"specimenType\" && value !== \"\") {\n\t        //This throws a warning if the specimen type is changed because of the cascading effects this \n\t        //would cause.\n\t        if (this.props.edit) {\n\t          swal({\n\t            title: \"Warning\",\n\t            text: \"Changing the specimen type will result in the loss of any preparation or anaylsis \" + \"data for this specimen. You will also need to manually change the specimen type of any \" + \"aliquots derived from this specimen. Proceed with caution.\",\n\t            type: \"warning\",\n\t            showCancelButton: true,\n\t            confirmButtonText: 'Cancel Change',\n\t            cancelButtonText: 'Proceed'\n\t          }, function (isConfirm) {\n\t            if (isConfirm) {\n\t              this.props.toggleEdit();\n\t            } else {}\n\t          }.bind(this));\n\t        }\n\t\n\t        //This is to eliminate the values for the specimen type fields\n\t        //TODO: This could potentially be improved later to retain the values\n\t        //for the fields that are common across specimen types\n\t        formData.data = {};\n\t        this.setState({\n\t          currentSpecimenType: value\n\t        });\n\t      }\n\t\n\t      if (formElement === \"containerType\" && value !== \"\") {\n\t        this.setState({\n\t          currentContainerType: value\n\t        });\n\t      }\n\t\n\t      this.setState({\n\t        formData: formData\n\t      }, this.setParentFormData);\n\t    }\n\t  }, {\n\t    key: 'setSpecimenTypeFieldFormData',\n\t    value: function setSpecimenTypeFieldFormData(formElement, value) {\n\t      var formData = this.state.formData;\n\t      formData.data[formElement] = value;\n\t\n\t      this.setState({\n\t        formData: formData\n\t      }, this.setParentFormData);\n\t    }\n\t  }, {\n\t    key: 'setContainerParentFormData',\n\t    value: function setContainerParentFormData(containerParentFormData) {\n\t      var formData = this.state.formData;\n\t\n\t      for (var field in containerParentFormData) {\n\t        formData[field] = containerParentFormData[field];\n\t      }\n\t\n\t      this.setState({\n\t        formData: formData\n\t      }, this.setParentFormData);\n\t    }\n\t  }, {\n\t    key: 'setParentFormData',\n\t    value: function setParentFormData() {\n\t      // TODO: This should potentially be changed to if (this.props.setParentFormData)\n\t      if (!this.props.edit) {\n\t        var formData = this.state.formData;\n\t        this.props.setParentFormData(formData);\n\t      }\n\t    }\n\t\n\t    // TODO: decouple this code from the preaprationForm by making it a React Component\n\t    // This generates all the form fields for a given specimen type\n\t\n\t  }, {\n\t    key: 'getSpecimenTypeFields',\n\t    value: function getSpecimenTypeFields(fieldsObject) {\n\t      var _this3 = this;\n\t\n\t      var specimenTypeFields = Object.keys(fieldsObject).map(function (attribute) {\n\t        var datatype = _this3.props.attributeDatatypes[fieldsObject[attribute]['datatypeId']].datatype;\n\t        if (datatype === \"text\" || datatype === \"number\") {\n\t\n\t          if (fieldsObject[attribute]['refTableId'] == null) {\n\t            return React.createElement(TextboxElement, {\n\t              name: attribute,\n\t              label: fieldsObject[attribute]['name'],\n\t              onUserInput: _this3.setSpecimenTypeFieldFormData,\n\t              ref: attribute,\n\t              required: fieldsObject[attribute]['required'],\n\t              value: _this3.state.formData.data[attribute]\n\t            });\n\t          }\n\t\n\t          if (fieldsObject[attribute]['refTableId'] !== null) {\n\t            return React.createElement(SelectElement, {\n\t              name: attribute,\n\t              label: fieldsObject[attribute]['name'],\n\t              options: _this3.props.attributeOptions[fieldsObject[attribute]['refTableId']],\n\t              onUserInput: _this3.setSpecimenTypeFieldFormData,\n\t              ref: attribute,\n\t              required: fieldsObject[attribute]['required'],\n\t              value: _this3.state.formData.data[attribute]\n\t            });\n\t          }\n\t        }\n\t\n\t        if (datatype === \"datetime\") {\n\t          return React.createElement(DateElement, {\n\t            name: attribute,\n\t            label: fieldsObject[attribute]['name'],\n\t            onUserInput: _this3.setSpecimenTypeFieldFormData,\n\t            ref: attribute,\n\t            required: fieldsObject[attribute]['required'],\n\t            value: _this3.state.formData.data[attribute]\n\t          });\n\t        }\n\t\n\t        if (datatype === \"boolean\") {\n\t          // There is currently no CheckboxElement or RadioElement in loris/jsx/Form.js and therefore\n\t          // this is not possible.     \n\t        }\n\t      });\n\t\n\t      return specimenTypeFields;\n\t    }\n\t  }, {\n\t    key: 'handleUpdate',\n\t    value: function handleUpdate(e) {\n\t      // TODO: Validate Form Here\n\t\n\t      this.updateSpecimen();\n\t    }\n\t  }, {\n\t    key: 'updateSpecimen',\n\t    value: function updateSpecimen() {\n\t      var _$$ajax;\n\t\n\t      var formData = this.state.formData;\n\t      formData['data'] = JSON.stringify(formData['data']);\n\t\n\t      var formObj = new FormData();\n\t      for (var key in formData) {\n\t        if (formData[key] !== \"\") {\n\t          formObj.append(key, formData[key]);\n\t        }\n\t      }\n\t\n\t      $.ajax((_$$ajax = {\n\t        type: 'POST',\n\t        url: this.props.action,\n\t        data: formObj,\n\t        cache: false,\n\t        contentType: false,\n\t        processData: false\n\t      }, _defineProperty(_$$ajax, 'processData', false), _defineProperty(_$$ajax, 'xhr', function () {\n\t        var xhr = new window.XMLHttpRequest();\n\t        return xhr;\n\t      }.bind(this)), _defineProperty(_$$ajax, 'success', function () {\n\t        //Update Parent Specimen Page Here\n\t        formData.data = JSON.parse(formData.data);\n\t        this.props.refreshParent();\n\t      }.bind(this)), _defineProperty(_$$ajax, 'error', function (err) {\n\t        console.error(err);\n\t        var msg = err.responseJSON ? err.responseJSON.message : \"Specimen error!\";\n\t        this.setState({\n\t          errorMessage: msg\n\t        });\n\t        swal(msg, \"\", \"error\");\n\t      }.bind(this)), _$$ajax));\n\t    }\n\t  }]);\n\t\n\t  return SpecimenCollectionForm;\n\t}(React.Component);\n\t\n\tSpecimenCollectionForm.propTypes = {\n\t  setParentFormData: React.PropTypes.func,\n\t  specimenTypes: React.PropTypes.object.isRequired,\n\t  containerTypesPrimary: React.PropTypes.object.isRequired,\n\t  specimenTypeAttributes: React.PropTypes.object.isRequired,\n\t  attributeDatatypes: React.PropTypes.object.isRequired,\n\t  capacities: React.PropTypes.object.isRequired\n\t};\n\t\n\texports.default = SpecimenCollectionForm;\n\n/***/ },\n/* 6 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _containerDisplay = __webpack_require__(7);\n\t\n\tvar _containerDisplay2 = _interopRequireDefault(_containerDisplay);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Biobank Container Parent Form\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Fetches data from Loris backend and displays a form allowing\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * to specimen a biobank file attached to a specific instrument\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author Henri Rabalais\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @version 1.0.0\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\n\tn\t\n\tvar ContainerParentForm = function (_React$Component) {\n\t  _inherits(ContainerParentForm, _React$Component);\n\t\n\t  function ContainerParentForm(props) {\n\t    _classCallCheck(this, ContainerParentForm);\n\t\n\t    var _this = _possibleConstructorReturn(this, (ContainerParentForm.__proto__ || Object.getPrototypeOf(ContainerParentForm)).call(this, props));\n\t\n\t    _this.state = {\n\t      formData: {},\n\t      formErrors: {},\n\t      errorMessage: null\n\t    };\n\t\n\t    _this.mapFormOptions = _this.mapFormOptions.bind(_this);\n\t    _this.handleSubmit = _this.handleSubmit.bind(_this);\n\t    _this.setFormData = _this.setFormData.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(ContainerParentForm, [{\n\t    key: 'componentDidMount',\n\t    value: function componentDidMount() {\n\t      // This is where we will pass a parentContainerId if it already exists\n\t      // These are simply to provide 'Defaults' to the page. I am not sure that in\n\t      // if they are entirely necessary.\n\t      if (this.props.container) {\n\t        var formData = this.state.formData;\n\t        formData['container'] = JSON.stringify(this.props.container);\n\t        formData['parentContainerId'] = this.props.container.parentContainerId;\n\t\n\t        this.setState({\n\t          formData: formData\n\t        });\n\t      }\n\t    }\n\t\n\t    //map options for forms\n\t\n\t  }, {\n\t    key: 'mapFormOptions',\n\t    value: function mapFormOptions(rawObject, targetAttribute) {\n\t      var data = {};\n\t      for (var id in rawObject) {\n\t        data[id] = rawObject[id][targetAttribute];\n\t      }\n\t\n\t      return data;\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t\n\t      var parentContainerField;\n\t      var coordinateField;\n\t      var containerDisplay;\n\t      var containerBarcodesNonPrimary = this.mapFormOptions(this.props.containersNonPrimary, 'barcode');\n\t\n\t      parentContainerField = React.createElement(SelectElement, {\n\t        name: 'parentContainerId',\n\t        label: 'Parent Container Barcode',\n\t        options: containerBarcodesNonPrimary,\n\t        onUserInput: this.setFormData,\n\t        ref: 'parentContainerId',\n\t        required: true,\n\t        value: this.state.formData.parentContainerId\n\t      });\n\t\n\t      // THIS IS VERY POORLY DONE AND NEEDS REFACTORING\n\t      // this should be a 'currentParentContainerId' state\n\t      if (this.state.formData.parentContainerId) {\n\t\n\t        var dimensionId = this.props.containersNonPrimary[this.state.formData.parentContainerId].dimensionId;\n\t\n\t        if (dimensionId) {\n\t          //This will eventually become unecessary\n\t          ///////////////////////////////////////////////////\n\t          var dimensions = this.props.containerDimensions[dimensionId];\n\t\n\t          // Total coordinates is determined by the product of the dimensions\n\t          var coordinatesTotal = 1;\n\t          for (var dimension in dimensions) {\n\t            coordinatesTotal = coordinatesTotal * dimensions[dimension];\n\t          }\n\t\n\t          // Mapping of options for the SelectElement\n\t          var coordinates = {};\n\t          for (var i = 1; i <= coordinatesTotal; i++) {\n\t\n\t            // If the coordinate is already taken, skip it.\n\t            // this doubling of if statements seems unnecessary\n\t            if (this.props.containerCoordinates[this.state.formData.parentContainerId]) {\n\t              if (this.props.containerCoordinates[this.state.formData.parentContainerId][i]) {\n\t                continue;\n\t              }\n\t            }\n\t\n\t            coordinates[i] = i;\n\t          }\n\t\n\t          // coordinateField = ( \n\t          //   <SelectElement\n\t          //     name=\"coordinate\"\n\t          //     label=\"Coordinate\"\n\t          //     options={coordinates}\n\t          //     onUserInput={this.setFormData}\n\t          //     ref=\"coordinate\"\n\t          //     required={false}\n\t          //     value={this.state.formData.coordinate}\n\t          //   />  \n\t          // );  \n\t          ///////////////////////////////////////////////////\n\t\n\t          containerDisplay = React.createElement(_containerDisplay2.default, {\n\t            dimensions: this.props.containerDimensions[this.props.containersNonPrimary[this.state.formData.parentContainerId].dimensionId],\n\t            coordinates: this.props.containerCoordinates[this.state.formData.parentContainerId],\n\t            containerTypes: this.props.containerTypes,\n\t            containerStati: this.props.containerStati,\n\t            select: true,\n\t            selectedCoordinate: this.state.formData.coordinate,\n\t            updateParent: this.setFormData\n\t          });\n\t        }\n\t      }\n\t\n\t      var updateButton;\n\t      if (this.props.container) {\n\t        updateButton = React.createElement(ButtonElement, { label: 'Update' });\n\t      }\n\t\n\t      return React.createElement(\n\t        FormElement,\n\t        {\n\t          onSubmit: this.handleSubmit\n\t        },\n\t        parentContainerField,\n\t        coordinateField,\n\t        containerDisplay,\n\t        React.createElement('br', null),\n\t        updateButton\n\t      );\n\t    }\n\t\n\t    /** *******************************************************************************\n\t     *                      ******     Helper methods     *******\n\t     *********************************************************************************/\n\t\n\t    // Validation functions will go here later...\n\t\n\t    /*\n\t     * Uploads the file to the server\n\t     */\n\t\n\t  }, {\n\t    key: 'handleSubmit',\n\t    value: function handleSubmit() {\n\t      // Set form data and specimen the biobank file\n\t      var formData = this.state.formData;\n\t      var formObj = new FormData();\n\t      for (var key in formData) {\n\t        if (formData[key] !== \"\") {\n\t          formObj.append(key, formData[key]);\n\t        }\n\t      }\n\t\n\t      $.ajax({\n\t        type: 'POST',\n\t        url: this.props.action,\n\t        data: formObj,\n\t        cache: false,\n\t        contentType: false,\n\t        processData: false,\n\t        xhr: function () {\n\t          var xhr = new window.XMLHttpRequest();\n\t          return xhr;\n\t        }.bind(this),\n\t        success: function () {\n\t          this.props.refreshParent();\n\t          swal(\"Parent Container Update Successful!\", \"\", \"success\");\n\t          this.props.onSuccess();\n\t        }.bind(this),\n\t        error: function (err) {\n\t          console.error(err);\n\t          var msg = err.responseJSON ? err.responseJSON.message : \"Specimen error!\";\n\t          this.setState({\n\t            errorMessage: msg\n\t          });\n\t          swal(msg, '', \"error\");\n\t        }.bind(this)\n\t      });\n\t    }\n\t\n\t    /**\n\t     * Set the form data based on state values of child elements/componenets\n\t     *\n\t     * @param {string} formElement - name of the selected element\n\t     * @param {string} value - selected value for corresponding form element\n\t     */\n\t\n\t  }, {\n\t    key: 'setFormData',\n\t    value: function setFormData(formElement, value) {\n\t\n\t      var formData = this.state.formData;\n\t      formData[formElement] = value;\n\t\n\t      if (formElement === 'parentContainerId') {\n\t        formData['coordinate'] = \"\";\n\t      }\n\t\n\t      this.setState({\n\t        formData: formData\n\t      }, this.setParentFormData);\n\t    }\n\t  }, {\n\t    key: 'setParentFormData',\n\t    value: function setParentFormData() {\n\t      if (!this.props.container) {\n\t        var formData = this.state.formData;\n\t        this.props.setParentFormData(formData);\n\t      }\n\t    }\n\t  }]);\n\t\n\t  return ContainerParentForm;\n\t}(React.Component);\n\t\n\tContainerParentForm.propTypes = {\n\t  DataURL: React.PropTypes.string,\n\t  action: React.PropTypes.string,\n\t  barcode: React.PropTypes.string,\n\t  refreshTable: React.PropTypes.func,\n\t  onSuccess: React.PropTypes.func\n\t};\n\t\n\texports.default = ContainerParentForm;\n\n/***/ },\n/* 7 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * ContainerDisplay\n\t *\n\t * @author Henri Rabalais\n\t * @version 1.0.0\n\t *\n\t **/\n\t\n\tvar ContainerDisplay = function (_React$Component) {\n\t  _inherits(ContainerDisplay, _React$Component);\n\t\n\t  function ContainerDisplay() {\n\t    _classCallCheck(this, ContainerDisplay);\n\t\n\t    var _this = _possibleConstructorReturn(this, (ContainerDisplay.__proto__ || Object.getPrototypeOf(ContainerDisplay)).call(this));\n\t\n\t    _this.redirectURL = _this.redirectURL.bind(_this);\n\t    _this.drag = _this.drag.bind(_this);\n\t    _this.drop = _this.drop.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(ContainerDisplay, [{\n\t    key: 'componentDidMount',\n\t    value: function componentDidMount() {\n\t      $('[data-toggle=\"tooltip\"]').tooltip();\n\t    }\n\t  }, {\n\t    key: 'componenDidUpdate',\n\t    value: function componenDidUpdate() {\n\t      $('[data-toggle=\"tooltip\"]').tooltip();\n\t    }\n\t  }, {\n\t    key: 'redirectURL',\n\t    value: function redirectURL(e) {\n\t      var coordinate = e.target.id;\n\t      if (this.props.coordinates[coordinate]) {\n\t        var type = this.props.types[this.props.children[this.props.coordinates[coordinate]].typeId].primary ? 'specimen' : 'container';\n\t        var url = loris.BaseURL + '/biobank/' + type + '/?barcode=' + this.props.children[this.props.coordinates[coordinate]].barcode;\n\t\n\t        window.location.href = url;\n\t      }\n\t    }\n\t  }, {\n\t    key: 'allowDrop',\n\t    value: function allowDrop(e) {\n\t      e.preventDefault();\n\t    }\n\t  }, {\n\t    key: 'drag',\n\t    value: function drag(e) {\n\t      var container = JSON.stringify(this.props.children[this.props.coordinates[e.target.id]]);\n\t      e.dataTransfer.setData(\"text/plain\", container);\n\t    }\n\t  }, {\n\t    key: 'drop',\n\t    value: function drop(e) {\n\t      e.preventDefault();\n\t\n\t      var container = e.dataTransfer.getData(\"text/plain\");\n\t      var newCoordinate = parseInt(e.target.id);\n\t\n\t      this.props.updateParent(container, newCoordinate);\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t      var _this2 = this;\n\t\n\t      // This is eventually need to be reworked and cleaned up\n\t      var column = [];\n\t      var row = [];\n\t      var display = void 0;\n\t      var coordinate = 1;\n\t      if (this.props.dimensions) {\n\t        for (var y = 0; y < this.props.dimensions.y; y++) {\n\t          column = [];\n\t          for (var x = 1; x <= this.props.dimensions.x; x++) {\n\t\n\t            var nodeWidth = 500 / this.props.dimensions.x - 500 / this.props.dimensions.x * 0.08;\n\t            var nodeStyle = { width: nodeWidth };\n\t            var nodeClass = 'node';\n\t            var tooltipTitle = null;\n\t            var dataHtml = 'false';\n\t            var dataToggle = null;\n\t            var dataPlacement = null;\n\t            var draggable = 'false';\n\t            var onDragStart = null;\n\t            var onDragOver = this.allowDrop;\n\t            var onDrop = this.drop;\n\t            var onClick = null;\n\t\n\t            if (!this.props.select) {\n\t              // This double if statement doesn't sound great\n\t              if (this.props.coordinates) {\n\t                if (this.props.coordinates[coordinate]) {\n\t                  nodeClass = 'node occupied';\n\t                  dataHtml = 'true';\n\t                  dataToggle = 'tooltip';\n\t                  dataPlacement = 'top';\n\t                  tooltipTitle = '<h5>' + this.props.children[this.props.coordinates[coordinate]].barcode + '</h5>' + '<h5>' + this.props.containerTypes[this.props.children[this.props.coordinates[coordinate]].typeId].label + '</h5>' + '<h5>' + this.props.containerStati[this.props.children[this.props.coordinates[coordinate]].statusId].status + '</h5>';\n\t                  draggable = 'true';\n\t                  onDragStart = this.drag;\n\t                  onDragOver = null;\n\t                  onDrop = null;\n\t                  onClick = this.redirectURL;\n\t                }\n\t              }\n\t            }\n\t\n\t            if (this.props.select) {\n\t              if (coordinate == this.props.selectedCoordinate) {\n\t                nodeClass = 'node occupied';\n\t              } else if (!this.props.coordinates) {\n\t                nodeClass = 'node available';\n\t                onClick = function onClick(e) {\n\t                  return _this2.props.updateParent('coordinate', e.target.id);\n\t                };\n\t              } else if (this.props.coordinates) {\n\t                if (!this.props.coordinates[coordinate]) {\n\t                  nodeClass = 'node available';\n\t                  onClick = function onClick(e) {\n\t                    return _this2.props.updateParent('coordinate', e.target.id);\n\t                  };\n\t                } else if (this.props.coordinates[coordinate]) {\n\t                  // --- This is currently not working ---\n\t                  //  dataHtml = 'true';\n\t                  //  dataToggle = 'tooltip';\n\t                  //  dataPlacement = 'top';\n\t                  //  tooltipTitle = \n\t                  //'<h5>' + this.props.children[this.props.coordinates[coordinate]].barcode + '</h5>' + \n\t                  //'<h5>' + this.props.containerTypes[this.props.children[this.props.coordinates[coordinate]].typeId].label + '</h5>' + \n\t                  //'<h5>' + this.props.containerStati[this.props.children[this.props.coordinates[coordinate]].statusId].status + '</h5>';\n\t                }\n\t              }\n\t            }\n\t\n\t            var coordinateDisplay = void 0;\n\t            if (true) {\n\t              coordinateDisplay = x + this.props.dimensions.x * y;\n\t            } else if (false) {\n\t              coordinateDisplay = String.fromCharCode(65 + y) + '' + x;\n\t            }\n\t\n\t            column.push(React.createElement(\n\t              'div',\n\t              {\n\t                id: coordinate,\n\t                className: nodeClass,\n\t                'data-html': dataHtml,\n\t                'data-toggle': dataToggle,\n\t                'data-placement': dataPlacement,\n\t                'data-original-title': tooltipTitle,\n\t                style: nodeStyle,\n\t                onClick: onClick,\n\t                draggable: draggable,\n\t                onDragStart: onDragStart,\n\t                onDragOver: onDragOver,\n\t                onDrop: onDrop\n\t              },\n\t              coordinateDisplay\n\t            ));\n\t\n\t            coordinate++;\n\t          }\n\t\n\t          var rowHeight = 500 / this.props.dimensions.y - 500 / this.props.dimensions.y * 0.08;\n\t          var rowMargin = 500 / this.props.dimensions.y * 0.04;\n\t          var rowStyle = {\n\t            height: rowHeight\n\t          };\n\t\n\t          row.push(React.createElement(\n\t            'div',\n\t            {\n\t              className: 'row',\n\t              style: rowStyle\n\t            },\n\t            column\n\t          ));\n\t        }\n\t\n\t        display = row;\n\t      }\n\t\n\t      return React.createElement(\n\t        'div',\n\t        { className: 'display' },\n\t        display\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return ContainerDisplay;\n\t}(React.Component);\n\t\n\tContainerDisplay.propTypes = {};\n\t\n\texports.default = ContainerDisplay;\n\n/***/ },\n/* 8 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _barcodeForm = __webpack_require__(4);\n\t\n\tvar _barcodeForm2 = _interopRequireDefault(_barcodeForm);\n\t\n\tvar _specimenForm = __webpack_require__(3);\n\t\n\tvar _specimenForm2 = _interopRequireDefault(_specimenForm);\n\t\n\tvar _preparationForm = __webpack_require__(9);\n\t\n\tvar _preparationForm2 = _interopRequireDefault(_preparationForm);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * Biobank Collection Form\n\t *\n\t * Fetches data from Loris backend and displays a form allowing\n\t * to specimen a biobank file attached to a specific instrument\n\t *\n\t * @author Henri Rabalais\n\t * @version 1.0.0\n\t *\n\t **/\n\tvar PoolSpecimenForm = function (_React$Component) {\n\t  _inherits(PoolSpecimenForm, _React$Component);\n\t\n\t  function PoolSpecimenForm(props) {\n\t    _classCallCheck(this, PoolSpecimenForm);\n\t\n\t    var _this = _possibleConstructorReturn(this, (PoolSpecimenForm.__proto__ || Object.getPrototypeOf(PoolSpecimenForm)).call(this, props));\n\t\n\t    _this.state = {\n\t      formData: {},\n\t      barcodeList: {},\n\t      errorMessage: null,\n\t      formErrors: {},\n\t      barcodeCount: 2,\n\t      preparation: false,\n\t      step: 1\n\t    };\n\t\n\t    _this.handleSubmit = _this.handleSubmit.bind(_this);\n\t    _this.validateForm = _this.validateForm.bind(_this);\n\t    _this.setFormData = _this.setFormData.bind(_this);\n\t    _this.setPreparationFormData = _this.setPreparationFormData.bind(_this);\n\t    _this.setSpecimenFormData = _this.setSpecimenFormData.bind(_this);\n\t    _this.submitForm = _this.submitForm.bind(_this);\n\t    _this.mapFormOptions = _this.mapFormOptions.bind(_this);\n\t    _this.setBarcodeCount = _this.setBarcodeCount.bind(_this);\n\t    _this.next = _this.next.bind(_this);\n\t    _this.previous = _this.previous.bind(_this);\n\t    _this.addPreparation = _this.addPreparation.bind(_this);\n\t    _this.removePreparation = _this.removePreparation.bind(_this);\n\t    _this.validate = _this.validate.bind(_this);\n\t    _this.formSwitch = _this.formSwitch.bind(_this);\n\t    _this.preparationSwitch = _this.preparationSwitch.bind(_this);\n\t    _this.runAjax = _this.runAjax.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  //TODO: map options for forms - this is used frequently and may need to be moved to a more global place\n\t\n\t\n\t  _createClass(PoolSpecimenForm, [{\n\t    key: 'mapFormOptions',\n\t    value: function mapFormOptions(originalObject, targetAttribute) {\n\t      var mappedObject = {};\n\t      for (var i in originalObject) {\n\t        mappedObject[i] = originalObject[i][targetAttribute];\n\t      }\n\t\n\t      return mappedObject;\n\t    }\n\t  }, {\n\t    key: 'next',\n\t    value: function next() {\n\t      var _this2 = this;\n\t\n\t      this.validate().then(function (data) {\n\t        _this2.setState({\n\t          poolData: data,\n\t          step: _this2.state.step + 1\n\t        });\n\t      }, function (error) {\n\t        swal(\"Oops!\", error.responseText, \"error\");\n\t      });\n\t    }\n\t  }, {\n\t    key: 'previous',\n\t    value: function previous() {\n\t      this.setState({\n\t        step: this.state.step - 1\n\t      });\n\t    }\n\t  }, {\n\t    key: 'validate',\n\t    value: function validate() {\n\t      return this.runAjax(this.props.specimenRequest, { barcodeList: this.state.barcodeList });\n\t    }\n\t  }, {\n\t    key: 'runAjax',\n\t    value: function runAjax(url, inputData) {\n\t      var _this3 = this;\n\t\n\t      return new Promise(function (resolve, reject) {\n\t        $.ajax(url, {\n\t          method: \"GET\",\n\t          dataType: 'json',\n\t          data: inputData,\n\t          success: function (data) {\n\t            resolve(data);\n\t          }.bind(_this3),\n\t          error: function error(_error, textStatus, errorThrown) {\n\t            reject(_error);\n\t            console.error(_error);\n\t          }\n\t        });\n\t      });\n\t    }\n\t  }, {\n\t    key: 'setBarcodeCount',\n\t    value: function setBarcodeCount(field, value) {\n\t      var barcodeCount = value;\n\t      var barcodeList = this.state.barcodeList;\n\t      for (var barcode in barcodeList) {\n\t        if (barcode > barcodeCount) {\n\t          delete barcodeList[barcode];\n\t        }\n\t      }\n\t\n\t      this.setState({ barcodeCount: barcodeCount, barcodeList: barcodeList });\n\t    }\n\t  }, {\n\t    key: 'formSwitch',\n\t    value: function formSwitch(inputForm, specimenForm) {\n\t      switch (this.state.step) {\n\t        case 1:\n\t          return inputForm;\n\t        case 2:\n\t          return specimenForm;\n\t      }\n\t    }\n\t  }, {\n\t    key: 'preparationSwitch',\n\t    value: function preparationSwitch(preparationButton, preparationForm) {\n\t      switch (this.state.preparation) {\n\t        case false:\n\t          return preparationButton;\n\t        case true:\n\t          return preparationForm;\n\t      }\n\t    }\n\t  }, {\n\t    key: 'addPreparation',\n\t    value: function addPreparation() {\n\t      var _this4 = this;\n\t\n\t      this.validate().then(function (data) {\n\t        _this4.setState({\n\t          poolData: data,\n\t          preparation: true\n\t        });\n\t      }, function (error) {\n\t        swal('Oh no!', error.responseText, 'error');\n\t      });\n\t    }\n\t  }, {\n\t    key: 'removePreparation',\n\t    value: function removePreparation() {\n\t      var formData = this.state.formData;\n\t      //TODO: is it better to set it to empty, or delete it?\n\t      formData.preparationForm = {};\n\t      this.setState({\n\t        preparation: false,\n\t        formData: formData\n\t      });\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t      //Generates barcodes\n\t      var barcodes = [];\n\t      for (var i = 1; i <= this.state.barcodeCount; i++) {\n\t        barcodes.push(React.createElement(TextboxElement, {\n\t          name: i,\n\t          label: 'Barcode ' + i,\n\t          onUserInput: this.setFormData,\n\t          required: true,\n\t          value: this.state.barcodeList[i],\n\t          errorMessage: this.state.formErrors[i]\n\t        }));\n\t      }\n\t\n\t      var preparationButton = React.createElement(\n\t        'div',\n\t        { className: 'row' },\n\t        React.createElement('div', { className: 'col-xs-4' }),\n\t        React.createElement(\n\t          'div',\n\t          { className: 'col-xs 4 action' },\n\t          React.createElement(\n\t            'span',\n\t            { className: 'action' },\n\t            React.createElement(\n\t              'div',\n\t              {\n\t                className: 'action-button add',\n\t                onClick: this.addPreparation\n\t              },\n\t              '+'\n\t            )\n\t          ),\n\t          React.createElement(\n\t            'div',\n\t            { className: 'action-title' },\n\t            'Add Preparation'\n\t          )\n\t        )\n\t      );\n\t\n\t      var preparationForm = void 0;\n\t      if (this.state.poolData) {\n\t\n\t        var specimenProtocolAttributes = this.props.specimenProtocolAttributes[this.state.poolData.typeId];\n\t\n\t        var specimenProtocols = {};\n\t        for (var id in specimenProtocolAttributes) {\n\t          specimenProtocols[id] = this.props.specimenProtocols[id];\n\t        }\n\t        specimenProtocols = this.mapFormOptions(specimenProtocols, 'protocol');\n\t\n\t        preparationForm = React.createElement(\n\t          'div',\n\t          { className: 'row' },\n\t          React.createElement(\n\t            'div',\n\t            { className: 'col-sm-9 col-sm-offset-1' },\n\t            React.createElement(_preparationForm2.default, {\n\t              formData: this.state.formData.preparationForm,\n\t              specimenProtocols: specimenProtocols,\n\t              specimenProtocolAttributes: specimenProtocolAttributes,\n\t              attributeDatatypes: this.props.attributeDatatypes,\n\t              attributeOptions: this.props.attributeOptions,\n\t              setParentFormData: this.setPreparationFormData,\n\t              insertAction: loris.BaseURL + '/biobank/ajax/submitData.php?action=insertSpecimenPreparation'\n\t            }),\n\t            React.createElement(\n\t              'a',\n\t              { className: 'pull-right', style: { cursor: 'pointer' }, onClick: this.removePreparation },\n\t              'Cancel Preparation'\n\t            )\n\t          )\n\t        );\n\t      }\n\t\n\t      var inputForm = React.createElement(\n\t        'div',\n\t        null,\n\t        React.createElement(\n\t          'div',\n\t          { className: 'row' },\n\t          React.createElement(\n\t            'div',\n\t            { className: 'col-sm-9 col-sm-offset-1' },\n\t            React.createElement(StaticElement, {\n\t              label: 'Pooling Note',\n\t              text: 'Select or Scan the specimens to be pooled. Please ensure that they are the same type, and share the same PSCID and Visit Label'\n\t            }),\n\t            React.createElement(NumericElement, {\n\t              label: '\\u2116 of Specimens',\n\t              min: '2',\n\t              max: '100',\n\t              value: this.state.barcodeCount,\n\t              onUserInput: this.setBarcodeCount\n\t            }),\n\t            barcodes\n\t          )\n\t        ),\n\t        this.preparationSwitch(preparationButton, preparationForm),\n\t        React.createElement(\n\t          'div',\n\t          { className: 'col-sm-3 col-xs-offset-9 action' },\n\t          React.createElement(\n\t            'div',\n\t            { className: 'action-title' },\n\t            'Next'\n\t          ),\n\t          React.createElement(\n\t            'span',\n\t            { className: 'action' },\n\t            React.createElement(\n\t              'div',\n\t              {\n\t                className: 'action-button update',\n\t                onClick: this.next\n\t              },\n\t              React.createElement('span', { className: 'glyphicon glyphicon-chevron-right' })\n\t            )\n\t          )\n\t        )\n\t      );\n\t\n\t      //TODO: Things here need to be in the proper order!!!\n\t      var specimenForm = void 0;\n\t      if (this.state.poolData) {\n\t\n\t        // This is to provide the options for the output specimens\n\t        var specimenTypes = {};\n\t        if (this.state.poolData.typeId) {\n\t          specimenTypes[this.state.poolData.typeId] = this.props.specimenTypes[this.state.poolData.typeId];\n\t        }\n\t\n\t        var pscid = this.props.pSCIDs[this.state.poolData.candidateId];\n\t        var visit = this.props.sessionData[pscid].visits[this.state.poolData.sessionId];\n\t\n\t        var barcodesArray = Object.values(this.state.barcodeList);\n\t        var barcodesString = barcodesArray.join(', ');\n\t\n\t        // TODO: rather than all specimen units this should really be specific to the\n\t        // type\n\t        var specimenUnits = this.mapFormOptions(this.props.specimenUnits, 'unit');\n\t\n\t        specimenForm = React.createElement(\n\t          'div',\n\t          { className: 'row' },\n\t          React.createElement(\n\t            'div',\n\t            { className: 'col-xs-12' },\n\t            React.createElement(_specimenForm2.default, {\n\t              formData: this.state.formData.specimenForm,\n\t              candidateId: this.state.poolData.candidateId,\n\t              pscid: pscid,\n\t              sessionId: this.state.poolData.sessionId,\n\t              visit: visit,\n\t              parentSpecimenBarcodes: barcodesString,\n\t              parentSpecimenIds: this.state.poolData.specimenIds,\n\t              specimenTypes: specimenTypes,\n\t              specimenTypeUnits: this.props.specimenTypeUnits,\n\t              specimenUnits: specimenUnits,\n\t              containerTypesPrimary: this.props.containerTypesPrimary,\n\t              containersNonPrimary: this.props.containersNonPrimary,\n\t              specimenTypeAttributes: this.props.specimenTypeAttributes,\n\t              attributeDatatypes: this.props.attributeDatatypes,\n\t              attributeOptions: this.props.attributeOptions,\n\t              capacities: this.props.capacities,\n\t              containerDimensions: this.props.containerDimensions,\n\t              containerCoordinates: this.props.containerCoordinates,\n\t              setParentFormData: this.setSpecimenFormData,\n\t              action: loris.BaseURL + '/biobank/ajax/submitData.php?action=submitSpecimen',\n\t              refreshParent: this.props.refreshParent\n\t            }),\n\t            React.createElement(ButtonElement, {\n\t              label: 'Submit'\n\t            })\n\t          ),\n\t          React.createElement(\n\t            'div',\n\t            { className: 'col-sm-3 col-xs-offset-2 action' },\n\t            React.createElement(\n\t              'span',\n\t              { className: 'action' },\n\t              React.createElement(\n\t                'div',\n\t                {\n\t                  className: 'action-button update',\n\t                  onClick: this.previous\n\t                },\n\t                React.createElement('span', { className: 'glyphicon glyphicon-chevron-left' })\n\t              )\n\t            ),\n\t            React.createElement(\n\t              'div',\n\t              { className: 'action-title' },\n\t              'Previous'\n\t            )\n\t          )\n\t        );\n\t      }\n\t\n\t      return React.createElement(\n\t        FormElement,\n\t        {\n\t          name: 'poolSpecimenForm',\n\t          id: 'poolSpecimenForm',\n\t          onSubmit: this.handleSubmit,\n\t          ref: 'form'\n\t        },\n\t        this.formSwitch(inputForm, specimenForm)\n\t      );\n\t    }\n\t\n\t    /** *******************************************************************************\n\t     *                      ******     Helper methods     *******\n\t     *********************************************************************************/\n\t\n\t  }, {\n\t    key: 'validateForm',\n\t    value: function validateForm(formElement, value) {\n\t      var _this5 = this;\n\t\n\t      var formErrors = this.state.formErrors;\n\t\n\t      //validate barcode regex\n\t      if (formElement === \"barcode\" && value !== \"\") {\n\t        if (!/^hello/.test(this.state.formData.barcode)) {\n\t          formErrors.barcode = true;\n\t        } else {\n\t          formErrors.barcode = false;\n\t        }\n\t      }\n\t\n\t      //validate that quantity is a number and less than capacity\n\t      if (formElement === \"quantity\" && value !== \"\") {\n\t        if (isNaN(value) || value > this.props.capacities[this.state.currentContainerType]) {\n\t          formErrors.quantity = true;\n\t        } else {\n\t          formErrors.quantity = false;\n\t        }\n\t      }\n\t\n\t      //validate datatypes and regex of generated type attributes\n\t      var specimenTypeFieldsObject = this.props.specimenTypeAttributes[this.state.currentSpecimenType];\n\t      var specimenTypeFields = Object.keys(specimenTypeFieldsObject).map(function (attribute) {\n\t\n\t        var datatype = _this5.props.attributeDatatypes[specimenTypeFieldsObject[attribute]['datatypeId']].datatype;\n\t        if (datatype === \"number\") {\n\t          if (formElement === attribute) {\n\t            if (isNaN(value) && value !== \"\") {\n\t              formErrors[attribute] = true;\n\t            } else {\n\t              formErrors[attribute] = false;\n\t            }\n\t          }\n\t        }\n\t      });\n\t\n\t      this.setState({\n\t        formErrors: formErrors\n\t      });\n\t    }\n\t\n\t    /**\n\t     * Handle form submission\n\t     * @param {object} e - Form submission event\n\t     */\n\t\n\t  }, {\n\t    key: 'handleSubmit',\n\t    value: function handleSubmit(e) {\n\t      e.preventDefault();\n\t\n\t      this.submitForm();\n\t    }\n\t\n\t    /*\n\t     * Uploads the file to the server\n\t     */\n\t\n\t  }, {\n\t    key: 'submitForm',\n\t    value: function submitForm() {\n\t      // Set form data and specimen the biobank file\n\t      var formData = this.state.formData;\n\t      var preparationForm = this.state.formData.preparationForm;\n\t      var specimenForm = this.state.formData.specimenForm;\n\t      formData['preparationForm'] = JSON.stringify(preparationForm);\n\t      formData['specimenForm'] = JSON.stringify(specimenForm);\n\t\n\t      console.log(formData.specimenForm);\n\t      console.log(formData.preparationForm);\n\t\n\t      var formObj = new FormData();\n\t      for (var key in formData) {\n\t        if (formData[key] !== \"\") {\n\t          formObj.append(key, formData[key]);\n\t        }\n\t      }\n\t\n\t      $.ajax({\n\t        type: 'POST',\n\t        url: this.props.action,\n\t        data: formObj,\n\t        cache: false,\n\t        contentType: false,\n\t        processData: false,\n\t        xhr: function () {\n\t          var xhr = new window.XMLHttpRequest();\n\t          return xhr;\n\t        }.bind(this),\n\t        success: function () {\n\t          //this.props.refreshParent();\n\t          swal(\"Specimens Pooled Successful!\", \"\", \"success\");\n\t          this.props.onSuccess();\n\t        }.bind(this),\n\t        error: function (err) {\n\t          console.error(err);\n\t          var msg = err.responseJSON ? err.responseJSON.message : \"Specimen error!\";\n\t          this.setState({\n\t            errorMessage: msg\n\t          });\n\t          swal(msg, \"\", \"error\");\n\t        }.bind(this)\n\t      });\n\t    }\n\t\n\t    /**\n\t     * Checks if the inputted file name is valid\n\t     *\n\t     * @param {string} requiredFileName - Required file name\n\t     * @param {string} fileName - Provided file name\n\t     * @return {boolean} - true if fileName starts with requiredFileName, false\n\t     *   otherwise\n\t     */\n\t    //  isValidFileName(requiredFileName, fileName) {\n\t    //    if (fileName === null || requiredFileName === null) {\n\t    //      return false;\n\t    //    }\n\t    //\n\t    //    return (fileName.indexOf(requiredFileName) === 0);\n\t    //  }\n\t\n\t    /**\n\t     * Validate the form\n\t     *\n\t     * @param {object} formRefs - Object containing references to React form elements\n\t     * @param {object} formData - Object containing form data inputed by user\n\t     * @return {boolean} - true if all required fields are filled, false otherwise\n\t     */\n\t\n\t  }, {\n\t    key: 'isValidForm',\n\t    value: function isValidForm(formRefs, formData) {\n\t      var isValidForm = true;\n\t\n\t      var requiredFields = {\n\t        pscid: null,\n\t        visitLabel: null\n\t      };\n\t\n\t      Object.keys(requiredFields).map(function (field) {\n\t        if (formData[field]) {\n\t          requiredFields[field] = formData[field];\n\t        } else if (formRefs[field]) {\n\t          formRefs[field].props.hasError = true;\n\t          isValidForm = false;\n\t        }\n\t      });\n\t      this.forceUpdate();\n\t\n\t      return isValidForm;\n\t    }\n\t\n\t    /**\n\t     * Set the form data based on state values of child elements/componenets\n\t     *\n\t     * @param {string} formElement - name of the selected element\n\t     * @param {string} value - selected value for corresponding form element\n\t     */\n\t\n\t  }, {\n\t    key: 'setFormData',\n\t    value: function setFormData(formElement, value) {\n\t      // This lets the modal window know that there is formData\n\t      // and will cause a warning to be thrown of the modal window\n\t      // is exited\n\t      this.props.onChange instanceof Function && this.props.onChange();\n\t\n\t      if (formElement === \"pscid\" && value !== \"\" && value !== undefined) {\n\t        this.state.visits = this.props.sessionData[this.props.pSCIDs[value]].visits;\n\t      }\n\t\n\t      var formData = this.state.formData;\n\t      var barcodeList = this.state.barcodeList;\n\t\n\t      //TODO: there must be a better way to do this\n\t      if (isNaN(formElement)) {\n\t        formData[formElement] = value;\n\t      } else {\n\t        barcodeList[formElement] = value;\n\t      }\n\t\n\t      this.setState({\n\t        formData: formData,\n\t        barcodeList: barcodeList\n\t      });\n\t    }\n\t  }, {\n\t    key: 'setPreparationFormData',\n\t    value: function setPreparationFormData(preparationFormData) {\n\t      var formData = this.state.formData;\n\t      formData.preparationForm = preparationFormData;\n\t\n\t      this.setState({ formData: formData });\n\t    }\n\t  }, {\n\t    key: 'setSpecimenFormData',\n\t    value: function setSpecimenFormData(specimenFormData) {\n\t      var formData = this.state.formData;\n\t      formData.specimenForm = specimenFormData;\n\t\n\t      this.setState({ formData: formData });\n\t    }\n\t  }]);\n\t\n\t  return PoolSpecimenForm;\n\t}(React.Component);\n\t\n\tPoolSpecimenForm.propTypes = {\n\t  DataURL: React.PropTypes.string.isRequired,\n\t  action: React.PropTypes.string.isRequired,\n\t  refreshTable: React.PropTypes.func\n\t};\n\t\n\texports.default = PoolSpecimenForm;\n\n/***/ },\n/* 9 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * Biobank Specimen Form\n\t *\n\t * Acts a subform for BiobankCollectionForm\n\t *\n\t * @author Henri Rabalais\n\t * @version 1.0.0\n\t *\n\t **/\n\t\n\tvar SpecimenPreparationForm = function (_React$Component) {\n\t  _inherits(SpecimenPreparationForm, _React$Component);\n\t\n\t  function SpecimenPreparationForm(props) {\n\t    _classCallCheck(this, SpecimenPreparationForm);\n\t\n\t    var _this = _possibleConstructorReturn(this, (SpecimenPreparationForm.__proto__ || Object.getPrototypeOf(SpecimenPreparationForm)).call(this, props));\n\t\n\t    _this.state = {\n\t      formData: { data: {} },\n\t      currentProtocol: _this.props.preparation ? _this.props.preparation.protocolId : null,\n\t      formErrors: {}\n\t    };\n\t\n\t    _this.setFormData = _this.setFormData.bind(_this);\n\t    _this.setParentFormData = _this.setParentFormData.bind(_this);\n\t    _this.setSpecimenProtocolFieldFormData = _this.setSpecimenProtocolFieldFormData.bind(_this);\n\t    _this.getSpecimenProtocolFields = _this.getSpecimenProtocolFields.bind(_this);\n\t    _this.handleSave = _this.handleSave.bind(_this);\n\t    _this.savePreparation = _this.savePreparation.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(SpecimenPreparationForm, [{\n\t    key: 'componentDidMount',\n\t    value: function componentDidMount() {\n\t      var _this2 = this;\n\t\n\t      var formData = this.state.formData;\n\t\n\t      // if (this.props.specimenId) ??\n\t      formData['specimenId'] = this.props.specimenId;\n\t\n\t      //TODO: this is a shitty fix to the problem, do better.\n\t      // Actually, this may be less shitty than I thought\n\t      if (this.props.formData) {\n\t        formData = this.props.formData;\n\t\n\t        var currentProtocol = void 0;\n\t        currentProtocol = this.props.formData.protocolId || null;\n\t        this.setState({ currentProtocol: currentProtocol });\n\t      }\n\t\n\t      // This for autoloading data and will be used later\n\t      if (this.props.preparation) {\n\t        formData['protocolId'] = this.props.preparation.protocolId;\n\t        formData['locationId'] = this.props.preparation.locationId;\n\t        formData['date'] = this.props.preparation.date;\n\t        formData['time'] = this.props.preparation.time;\n\t        formData['comments'] = this.props.preparation.comments;\n\t\n\t        var specimenProtocolFieldsObject = this.props.specimenProtocolAttributes[this.state.currentProtocol];\n\t        if (specimenProtocolFieldsObject) {\n\t          var specimenProtocolFields = Object.keys(specimenProtocolFieldsObject).map(function (attribute) {\n\t            formData.data[attribute] = _this2.props.preparation.data[attribute];\n\t          });\n\t        }\n\t      }\n\t      this.setState({\n\t        formData: formData\n\t      });\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t\n\t      var submitButton;\n\t      //TODO: fix this second check (!this.props.specimenId) -- it's not great\n\t      // All it does is signal that we are in the pool specimen form. There must be\n\t      // a better way!!\n\t      if (this.props.preparation || !this.props.specimenId) {\n\t        submitButton = null;\n\t      } else if (!this.props.preparation) {\n\t        submitButton = React.createElement(ButtonElement, { label: 'Submit' });\n\t      }\n\t\n\t      var updateButton;\n\t      var locationField;\n\t      if (this.props.preparation) {\n\t        updateButton = React.createElement(ButtonElement, { label: 'Update' });\n\t\n\t        locationField = React.createElement(SelectElement, {\n\t          name: 'locationId',\n\t          label: 'Location',\n\t          options: this.props.sites,\n\t          onUserInput: this.setFormData,\n\t          required: true,\n\t          value: this.state.formData.locationId\n\t        });\n\t      }\n\t\n\t      var specimenProtocolFields = void 0;\n\t      if (this.state.currentProtocol) {\n\t        var specimenProtocolFieldsObject = this.props.specimenProtocolAttributes[this.state.currentProtocol];\n\t\n\t        if (specimenProtocolFieldsObject) {\n\t          specimenProtocolFields = this.getSpecimenProtocolFields(specimenProtocolFieldsObject);\n\t        }\n\t      }\n\t\n\t      //This will be for default fields, if there are any eventually\n\t      if (this.state.currentSpecimenProtocol) {\n\t        preparationFields = React.createElement('div', null);\n\t      }\n\t\n\t      return React.createElement(\n\t        FormElement,\n\t        {\n\t          name: 'specimenPreparation',\n\t          onSubmit: this.handleSave,\n\t          ref: 'form'\n\t        },\n\t        React.createElement(SelectElement, {\n\t          name: 'protocolId',\n\t          label: 'Protocol',\n\t          options: this.props.specimenProtocols,\n\t          onUserInput: this.setFormData,\n\t          required: true,\n\t          value: this.state.formData.protocolId\n\t        }),\n\t        locationField,\n\t        specimenProtocolFields,\n\t        React.createElement(DateElement, {\n\t          name: 'date',\n\t          label: 'Date',\n\t          onUserInput: this.setFormData,\n\t          required: true,\n\t          value: this.state.formData.date\n\t        }),\n\t        React.createElement(TimeElement, {\n\t          name: 'time',\n\t          label: 'Time',\n\t          onUserInput: this.setFormData,\n\t          required: true,\n\t          value: this.state.formData.time\n\t        }),\n\t        React.createElement(TextareaElement, {\n\t          name: 'comments',\n\t          label: 'Comments',\n\t          onUserInput: this.setFormData,\n\t          value: this.state.formData.comments\n\t        }),\n\t        submitButton,\n\t        updateButton\n\t      );\n\t    }\n\t\n\t    /**\n\t     * Set the form data based on state values of child elements/componenets\n\t     *\n\t     * @param {string} formElement - name of the selected element\n\t     * @param {string} value - selected value for corresponding form element\n\t     */\n\t\n\t  }, {\n\t    key: 'setFormData',\n\t    value: function setFormData(formElement, value) {\n\t\n\t      var formData = this.state.formData;\n\t\n\t      if (formElement === \"protocolId\" && value !== \"\") {\n\t        //This is to eliminate the values for the specimen protocol fields\n\t        //TODO: This could potentially be improved later to retain the values\n\t        //for the fields that are common accross protocols\n\t        formData.data = {};\n\t        this.setState({\n\t          currentProtocol: value\n\t        });\n\t      }\n\t\n\t      formData[formElement] = value;\n\t\n\t      this.setState({ formData: formData }, this.setParentFormData);\n\t    }\n\t  }, {\n\t    key: 'setSpecimenProtocolFieldFormData',\n\t    value: function setSpecimenProtocolFieldFormData(formElement, value) {\n\t      var formData = this.state.formData;\n\t      formData.data[formElement] = value;\n\t\n\t      this.setState({ formData: formData }, this.setParentFormData);\n\t    }\n\t  }, {\n\t    key: 'setParentFormData',\n\t    value: function setParentFormData() {\n\t      if (this.props.setParentFormData) {\n\t        var formData = this.state.formData;\n\t        this.props.setParentFormData(formData);\n\t      }\n\t    }\n\t\n\t    // TODO: decouple this code from the collectionForm by make it a React Component\n\t    // This generates all the form fields for a given specimen protocol\n\t\n\t  }, {\n\t    key: 'getSpecimenProtocolFields',\n\t    value: function getSpecimenProtocolFields(fieldsObject) {\n\t      var _this3 = this;\n\t\n\t      var specimenProtocolFields = Object.keys(fieldsObject).map(function (attribute) {\n\t        var datatype = _this3.props.attributeDatatypes[fieldsObject[attribute]['datatypeId']].datatype;\n\t\n\t        if (datatype === \"text\" || datatype === \"number\") {\n\t          if (fieldsObject[attribute]['refTableId'] == null) {\n\t            return React.createElement(TextboxElement, {\n\t              name: attribute,\n\t              label: fieldsObject[attribute]['name'],\n\t              onUserInput: _this3.setSpecimenProtocolFieldFormData,\n\t              ref: attribute,\n\t              required: fieldsObject[attribute]['required'],\n\t              value: _this3.state.formData.data[attribute],\n\t              errorMessage: _this3.state.formErrors[attribute] ? 'This is a ' + datatype + ' field.' : null\n\t            });\n\t          }\n\t\n\t          if (fieldsObject[attribute]['refTableId'] !== null) {\n\t            return React.createElement(SelectElement, {\n\t              name: attribute,\n\t              label: fieldsObject[attribute]['name'],\n\t              options: _this3.props.attributeOptions[fieldsObject[attribute]['refTableId']],\n\t              onUserInput: _this3.setSpecimenProtocolFieldFormData,\n\t              ref: attribute,\n\t              required: fieldsObject[attribute]['required'],\n\t              value: _this3.state.formData.data[attribute]\n\t            });\n\t          }\n\t        }\n\t\n\t        if (datatype === \"datetime\") {\n\t          return React.createElement(DateElement, {\n\t            name: attribute,\n\t            label: fieldsObject[attribute]['name'],\n\t            onUserInput: _this3.setSpecimenProtocolFieldFormData,\n\t            ref: attribute,\n\t            required: fieldsObject[attribute]['required'],\n\t            value: _this3.state.formData.data[attribute]\n\t          });\n\t        }\n\t\n\t        if (datatype === \"boolean\") {}\n\t      });\n\t\n\t      return specimenProtocolFields;\n\t    }\n\t  }, {\n\t    key: 'handleSave',\n\t    value: function handleSave(e) {\n\t      //more things will go here later\n\t      if (!this.props.preparation) {\n\t        this.savePreparation(this.props.insertAction);\n\t      }\n\t      if (this.props.preparation) {\n\t        this.savePreparation(this.props.updateAction);\n\t      }\n\t    }\n\t  }, {\n\t    key: 'savePreparation',\n\t    value: function savePreparation(action) {\n\t      var formData = this.state.formData;\n\t      formData['data'] = JSON.stringify(formData['data']);\n\t\n\t      console.log(formData);\n\t      var formObj = new FormData();\n\t      for (var key in formData) {\n\t        if (formData[key] !== \"\") {\n\t          formObj.append(key, formData[key]);\n\t        }\n\t      }\n\t\n\t      $.ajax({\n\t        type: 'POST',\n\t        url: action,\n\t        data: formObj,\n\t        cache: false,\n\t        contentType: false,\n\t        processData: false,\n\t        xhr: function () {\n\t          var xhr = new window.XMLHttpRequest();\n\t          return xhr;\n\t        }.bind(this),\n\t        success: function () {\n\t          //Update Parent Specimen Page Here\n\t          //formData.data = JSON.parse(formData.data);\n\t          this.props.refreshParent();\n\t          //swal(\"Specimen Preparation Update Successful!\", \"\", \"success\");\n\t          //this.props.onSuccess();\n\t        }.bind(this),\n\t        error: function (err) {\n\t          console.error(err);\n\t          var msg = err.responseJSON ? err.responseJSON.message : \"Specimen error!\";\n\t\n\t          this.setState({\n\t            errorMessage: msg\n\t          });\n\t          swal(msg, \"\", \"error\");\n\t        }.bind(this)\n\t      });\n\t    }\n\t  }]);\n\t\n\t  return SpecimenPreparationForm;\n\t}(React.Component);\n\t\n\tSpecimenPreparationForm.propTypes = {\n\t  containerTypesPrimary: React.PropTypes.object.isRequired,\n\t  specimenTypeAttributes: React.PropTypes.object.isRequired,\n\t  attributeDatatypes: React.PropTypes.object.isRequired,\n\t  capacities: React.PropTypes.object.isRequired,\n\t  units: React.PropTypes.object.isRequired\n\t};\n\t\n\texports.default = SpecimenPreparationForm;\n\n/***/ },\n/* 10 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _containerBarcodeForm = __webpack_require__(11);\n\t\n\tvar _containerBarcodeForm2 = _interopRequireDefault(_containerBarcodeForm);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * Biobank Collection Form\n\t *\n\t * Fetches data from Loris backend and displays a form allowing\n\t * to specimen a biobank file attached to a specific instrument\n\t *\n\t * @author Henri Rabalais\n\t * @version 1.0.0\n\t *\n\t * */\n\tvar BiobankContainerForm = function (_React$Component) {\n\t  _inherits(BiobankContainerForm, _React$Component);\n\t\n\t  function BiobankContainerForm(props) {\n\t    _classCallCheck(this, BiobankContainerForm);\n\t\n\t    var _this = _possibleConstructorReturn(this, (BiobankContainerForm.__proto__ || Object.getPrototypeOf(BiobankContainerForm)).call(this, props));\n\t\n\t    _this.state = {\n\t      formData: {},\n\t      formErrors: {},\n\t      errorMessage: null,\n\t      barcodeFormList: { 1: {} },\n\t      countBarcodeForms: 1\n\t    };\n\t\n\t    _this.handleSubmit = _this.handleSubmit.bind(_this);\n\t    _this.validateForm = _this.validateForm.bind(_this);\n\t    _this.setFormData = _this.setFormData.bind(_this);\n\t    _this.containerSubmit = _this.containerSubmit.bind(_this);\n\t    _this.addBarcodeForm = _this.addBarcodeForm.bind(_this);\n\t    _this.setBarcodeFormData = _this.setBarcodeFormData.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(BiobankContainerForm, [{\n\t    key: \"render\",\n\t    value: function render() {\n\t      var _this2 = this;\n\t\n\t      //Generates new Barcode Form everytime the addBarcodeForm button is pressed\n\t      var barcodeListArray = Object.keys(this.state.barcodeFormList);\n\t      var barcodeForms = [];\n\t      var i = 1;\n\t      var _iteratorNormalCompletion = true;\n\t      var _didIteratorError = false;\n\t      var _iteratorError = undefined;\n\t\n\t      try {\n\t        var _loop = function _loop() {\n\t          var key = _step.value;\n\t\n\t          barcodeForms.push(React.createElement(_containerBarcodeForm2.default, {\n\t            key: key,\n\t            barcodeKey: key,\n\t            id: i,\n\t            formData: _this2.state.barcodeFormList[key] ? _this2.state.barcodeFormList[key] : null,\n\t            removeBarcodeForm: barcodeListArray.length !== 1 ? function () {\n\t              return _this2.removeBarcodeForm(key);\n\t            } : null,\n\t            addBarcodeForm: i == barcodeListArray.length ? _this2.addBarcodeForm : null,\n\t            copyBarcodeForm: i == barcodeListArray.length && _this2.state.barcodeFormList[key] ? _this2.copyBarcodeForm.bind(_this2, key) : null,\n\t            setParentFormData: _this2.setBarcodeFormData,\n\t            onChange: _this2.props.onChange,\n\t            containerTypesNonPrimary: _this2.props.containerTypesNonPrimary,\n\t            containerBarcodesNonPrimary: _this2.props.containerBarcodesNonPrimary\n\t          }));\n\t\n\t          i++;\n\t        };\n\t\n\t        for (var _iterator = barcodeListArray[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n\t          _loop();\n\t        }\n\t\n\t        //ALLOW THEM TO CANCEL THE FORM AND DELETE BARCODE FORMS\n\t      } catch (err) {\n\t        _didIteratorError = true;\n\t        _iteratorError = err;\n\t      } finally {\n\t        try {\n\t          if (!_iteratorNormalCompletion && _iterator.return) {\n\t            _iterator.return();\n\t          }\n\t        } finally {\n\t          if (_didIteratorError) {\n\t            throw _iteratorError;\n\t          }\n\t        }\n\t      }\n\t\n\t      return React.createElement(\n\t        FormElement,\n\t        {\n\t          name: \"specimenForm\",\n\t          onSubmit: this.handleSubmit,\n\t          ref: \"form\"\n\t        },\n\t        React.createElement(\"br\", null),\n\t        React.createElement(\n\t          \"div\",\n\t          { className: \"row\" },\n\t          React.createElement(\n\t            \"div\",\n\t            { className: \"col-xs-11\" },\n\t            React.createElement(SelectElement, {\n\t              name: \"site\",\n\t              label: \"Site\",\n\t              options: this.props.sites,\n\t              onUserInput: this.setFormData,\n\t              ref: \"site\",\n\t              required: true,\n\t              value: this.state.formData.site\n\t            })\n\t          )\n\t        ),\n\t        barcodeForms,\n\t        React.createElement(\n\t          \"div\",\n\t          { className: \"col-xs-3 col-xs-offset-9\" },\n\t          React.createElement(ButtonElement, { label: \"Submit\" })\n\t        )\n\t      );\n\t    }\n\t\n\t    /** *******************************************************************************\n\t     *                      ******     Helper methods     *******\n\t     *********************************************************************************/\n\t\n\t    /**\n\t     * Returns a valid name for the file to be specimened\n\t     *\n\t     * @param {string} visitLabel - Visit label selected from the dropdown\n\t     * @param {string} instrument - Instrument selected from the dropdown\n\t     * @return {string} - Generated valid filename for the current selection\n\t     */\n\t\n\t  }, {\n\t    key: \"validateForm\",\n\t    value: function validateForm(formElement, value) {\n\t      var _this3 = this;\n\t\n\t      var formErrors = this.state.formErrors;\n\t\n\t      //validate barcode regex\n\t      if (formElement === \"barcode\" && value !== \"\") {\n\t        if (!/^hello/.test(this.state.formData.barcode)) {\n\t          formErrors.barcode = true;\n\t        } else {\n\t          formErrors.barcode = false;\n\t        }\n\t      }\n\t\n\t      //validate that quantity is a number and less than capacity\n\t      if (formElement === \"quantity\" && value !== \"\") {\n\t        if (isNaN(value) || value > this.props.capacities[this.state.currentContainerType]) {\n\t          formErrors.quantity = true;\n\t        } else {\n\t          formErrors.quantity = false;\n\t        }\n\t      }\n\t\n\t      //validate datatypes and regex of generated type attributes\n\t      var specimenTypeFieldsObject = this.props.specimenTypeAttributes[this.state.currentSpecimenType];\n\t      var specimenTypeFields = Object.keys(specimenTypeFieldsObject).map(function (attribute) {\n\t\n\t        var datatype = _this3.props.attributeDatatypes[specimenTypeFieldsObject[attribute]['datatypeId']].datatype;\n\t        if (datatype === \"number\") {\n\t          if (formElement === attribute) {\n\t            if (isNaN(value) && value !== \"\") {\n\t              formErrors[attribute] = true;\n\t            } else {\n\t              formErrors[attribute] = false;\n\t            }\n\t          }\n\t        }\n\t      });\n\t\n\t      this.setState({\n\t        formErrors: formErrors\n\t      });\n\t    }\n\t\n\t    /**\n\t     * Handle form submission\n\t     * @param {object} e - Form submission event\n\t     */\n\t\n\t  }, {\n\t    key: \"handleSubmit\",\n\t    value: function handleSubmit(e) {\n\t\n\t      this.containerSubmit();\n\t    }\n\t  }, {\n\t    key: \"containerSubmit\",\n\t    value: function containerSubmit() {\n\t      // Set form data\n\t      var formData = this.state.formData;\n\t      var barcodeFormList = this.state.barcodeFormList;\n\t      formData['barcodeFormList'] = JSON.stringify(barcodeFormList);\n\t      var formObj = new FormData();\n\t      for (var _key in formData) {\n\t        if (formData[_key] !== \"\") {\n\t          formObj.append(_key, formData[_key]);\n\t        }\n\t      }\n\t\n\t      $.ajax({\n\t        type: 'POST',\n\t        url: this.props.action,\n\t        data: formObj,\n\t        cache: false,\n\t        contentType: false,\n\t        processData: false,\n\t        xhr: function () {\n\t          var xhr = new window.XMLHttpRequest();\n\t          return xhr;\n\t        }.bind(this),\n\t        success: function () {\n\t\n\t          //refreshes table \n\t          this.props.refreshParent();\n\t\n\t          //provide success message\n\t          swal(\"Container Submission Successful!\", \"\", \"success\");\n\t\n\t          //close modal window\n\t          this.props.onSuccess();\n\t        }.bind(this),\n\t        error: function (err) {\n\t          console.error(err);\n\t          var msg = err.responseJSON ? err.responseJSON.message : \"Specimen error!\";\n\t          this.setState({\n\t            errorMessage: msg\n\t          });\n\t          swal(msg, \"\", \"error\");\n\t        }.bind(this)\n\t      });\n\t    }\n\t\n\t    /**\n\t     * Set the form data based on state values of child elements/componenets\n\t     *\n\t     * @param {string} formElement - name of the selected element\n\t     * @param {string} value - selected value for corresponding form element\n\t     */\n\t\n\t  }, {\n\t    key: \"setFormData\",\n\t    value: function setFormData(formElement, value) {\n\t      this.props.onChange instanceof Function && this.props.onChange();\n\t\n\t      //LOOK AT THIS LATER - THE SWITCH TO PROPS MESSED THIS ALL UP \n\t      var formData = this.state.formData;\n\t      formData[formElement] = value;\n\t\n\t      this.setState({\n\t        formData: formData\n\t      });\n\t    }\n\t  }, {\n\t    key: \"setBarcodeFormData\",\n\t    value: function setBarcodeFormData(barcodeFormData, barcodeKey) {\n\t      var formData = this.state.formData;\n\t      var barcodeFormList = this.state.barcodeFormList;\n\t      barcodeFormList[barcodeKey] = barcodeFormData;\n\t      formData['barcodeFormList'] = barcodeFormList;\n\t\n\t      this.setState({\n\t        formData: formData\n\t      });\n\t    }\n\t  }, {\n\t    key: \"addBarcodeForm\",\n\t    value: function addBarcodeForm() {\n\t      var barcodeFormList = this.state.barcodeFormList;\n\t      var count = this.state.countBarcodeForms;\n\t\n\t      barcodeFormList[count + 1] = {};\n\t\n\t      this.setState({\n\t        barcodeFormList: barcodeFormList,\n\t        countBarcodeForms: count + 1\n\t      });\n\t    }\n\t  }, {\n\t    key: \"copyBarcodeForm\",\n\t    value: function copyBarcodeForm(key, multiplier) {\n\t      var count = this.state.countBarcodeForms;\n\t      var nextKey = count + 1;\n\t      var barcodeFormList = this.state.barcodeFormList;\n\t\n\t      for (var i = 1; i <= multiplier; i++) {\n\t        barcodeFormList[nextKey] = JSON.parse(JSON.stringify(barcodeFormList[key]));\n\t        delete barcodeFormList[nextKey].barcode;\n\t        nextKey++;\n\t      }\n\t\n\t      this.setState({\n\t        barcodeFormList: barcodeFormList,\n\t        countBarcodeForms: nextKey\n\t      });\n\t    }\n\t  }, {\n\t    key: \"removeBarcodeForm\",\n\t    value: function removeBarcodeForm(key) {\n\t      var barcodeFormList = this.state.barcodeFormList;\n\t      delete barcodeFormList[key];\n\t\n\t      this.setState({\n\t        barcodeFormList: barcodeFormList\n\t      });\n\t    }\n\t  }]);\n\t\n\t  return BiobankContainerForm;\n\t}(React.Component);\n\t\n\tBiobankContainerForm.propTypes = {\n\t  DataURL: React.PropTypes.string.isRequired,\n\t  action: React.PropTypes.string.isRequired,\n\t  barcode: React.PropTypes.string,\n\t  refreshTable: React.PropTypes.func\n\t};\n\t\n\texports.default = BiobankContainerForm;\n\n/***/ },\n/* 11 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * Container Barcode Form\n\t *\n\t * Acts a subform for ContainerForm\n\t *\n\t * @author Henri Rabalais\n\t * @version 1.0.0\n\t *\n\t **/\n\t\n\tvar ContainerBarcodeForm = function (_React$Component) {\n\t  _inherits(ContainerBarcodeForm, _React$Component);\n\t\n\t  function ContainerBarcodeForm(props) {\n\t    _classCallCheck(this, ContainerBarcodeForm);\n\t\n\t    var _this = _possibleConstructorReturn(this, (ContainerBarcodeForm.__proto__ || Object.getPrototypeOf(ContainerBarcodeForm)).call(this, props));\n\t\n\t    _this.state = {\n\t      formData: {},\n\t      formErrors: {},\n\t      collapsed: true,\n\t      copyMultiplier: 1\n\t    };\n\t\n\t    _this.setFormData = _this.setFormData.bind(_this);\n\t    _this.setParentFormData = _this.setParentFormData.bind(_this);\n\t    _this.toggleCollapse = _this.toggleCollapse.bind(_this);\n\t    _this.setCopyMultiplier = _this.setCopyMultiplier.bind(_this);\n\t    _this.copy = _this.copy.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(ContainerBarcodeForm, [{\n\t    key: 'componentDidMount',\n\t    value: function componentDidMount() {\n\t      if (this.props.formData) {\n\t        var formData = this.props.formData;\n\t\n\t        this.setState({\n\t          formData: formData\n\t        });\n\t      }\n\t    }\n\t  }, {\n\t    key: 'toggleCollapse',\n\t    value: function toggleCollapse() {\n\t      this.setState({ collapsed: !this.state.collapsed });\n\t    }\n\t  }, {\n\t    key: 'setCopyMultiplier',\n\t    value: function setCopyMultiplier(e) {\n\t      var copyMultiplier = e.target.value;\n\t\n\t      this.setState({\n\t        copyMultiplier: copyMultiplier\n\t      });\n\t    }\n\t  }, {\n\t    key: 'copy',\n\t    value: function copy() {\n\t      this.props.copyBarcodeForm(this.state.copyMultiplier);\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t      // HR TODO: All this CSS should eventually be moved\n\t      var addBarcodeFormButton = void 0;\n\t      var addBarcodeFormText = void 0;\n\t      var copyBarcodeFormButton = void 0;\n\t      var copyBarcodeFormText = void 0;\n\t      if (this.props.addBarcodeForm) {\n\t        addBarcodeFormButton = React.createElement(\n\t          'span',\n\t          { className: 'action' },\n\t          React.createElement(\n\t            'div',\n\t            {\n\t              className: 'action-button add',\n\t              onClick: this.props.addBarcodeForm\n\t            },\n\t            '+'\n\t          )\n\t        );\n\t\n\t        addBarcodeFormText = React.createElement(\n\t          'span',\n\t          { className: 'action-title' },\n\t          'New Entry'\n\t        );\n\t      }\n\t\n\t      if (this.props.copyBarcodeForm) {\n\t        copyBarcodeFormButton = React.createElement(\n\t          'span',\n\t          { className: 'action' },\n\t          React.createElement(\n\t            'div',\n\t            {\n\t              className: 'action-button add',\n\t              onClick: this.copy\n\t            },\n\t            React.createElement('span', { className: 'glyphicon glyphicon-duplicate' })\n\t          )\n\t        );\n\t        copyBarcodeFormText = React.createElement(\n\t          'span',\n\t          { className: 'action-title' },\n\t          React.createElement('input', {\n\t            className: 'form-control input-sm',\n\t            type: 'number',\n\t            min: '1',\n\t            max: '50',\n\t            style: { width: 50, display: 'inline' },\n\t            onChange: this.setCopyMultiplier,\n\t            value: this.state.copyMultiplier\n\t          }),\n\t          'Copies'\n\t        );\n\t      }\n\t\n\t      var removeBarcodeFormButton = void 0;\n\t      if (this.props.removeBarcodeForm) {\n\t        var glyphStyle = {\n\t          color: '#DDDDDD',\n\t          marginLeft: 10,\n\t          cursor: 'pointer',\n\t          fontSize: 15\n\t        };\n\t\n\t        removeBarcodeFormButton = React.createElement('span', {\n\t          className: 'glyphicon glyphicon-remove',\n\t          onClick: this.props.removeBarcodeForm,\n\t          style: glyphStyle\n\t        });\n\t      }\n\t\n\t      return React.createElement(\n\t        FormElement,\n\t        {\n\t          name: 'biobankBarcode'\n\t        },\n\t        React.createElement(\n\t          'div',\n\t          { className: 'row' },\n\t          React.createElement(\n\t            'div',\n\t            { className: 'col-xs-11' },\n\t            React.createElement(\n\t              'div',\n\t              null,\n\t              React.createElement(TextboxElement, {\n\t                name: 'barcode',\n\t                label: 'Barcode ' + this.props.id,\n\t                onUserInput: this.setFormData,\n\t                ref: 'barcode',\n\t                required: true,\n\t                value: this.state.formData.barcode\n\t              })\n\t            )\n\t          ),\n\t          React.createElement(\n\t            'div',\n\t            { className: 'col-xs-1', style: { paddingLeft: 0, marginTop: 10 } },\n\t            React.createElement('span', {\n\t              className: this.state.collapsed ? 'glyphicon glyphicon-chevron-down' : 'glyphicon glyphicon-chevron-up',\n\t              style: { cursor: 'pointer', fontSize: 15, position: 'relative', right: 40 },\n\t              'data-toggle': 'collapse',\n\t              'data-target': '#item-' + this.props.id,\n\t              onClick: this.toggleCollapse\n\t            }),\n\t            removeBarcodeFormButton\n\t          )\n\t        ),\n\t        React.createElement(\n\t          'div',\n\t          { className: 'row' },\n\t          React.createElement('div', { className: 'col-xs-2' }),\n\t          React.createElement(\n\t            'div',\n\t            { className: 'col-xs-9' },\n\t            React.createElement(\n\t              'div',\n\t              { id: 'item-' + this.props.id, className: 'collapse' },\n\t              React.createElement(SelectElement, {\n\t                name: 'containerType',\n\t                label: 'Container Type',\n\t                options: this.props.containerTypesNonPrimary,\n\t                onUserInput: this.setFormData,\n\t                required: true,\n\t                value: this.state.formData.containerType\n\t              })\n\t            )\n\t          )\n\t        ),\n\t        React.createElement(\n\t          'div',\n\t          { className: 'row' },\n\t          React.createElement(\n\t            'div',\n\t            { className: 'col-xs-11' },\n\t            React.createElement('div', { className: 'col-xs-3' }),\n\t            React.createElement(\n\t              'div',\n\t              { className: 'col-xs-4 action' },\n\t              addBarcodeFormButton,\n\t              addBarcodeFormText\n\t            ),\n\t            React.createElement(\n\t              'div',\n\t              { className: 'col-xs-4 action' },\n\t              copyBarcodeFormButton,\n\t              copyBarcodeFormText\n\t            )\n\t          )\n\t        )\n\t      );\n\t    }\n\t\n\t    /**\n\t     * Set the form data based on state values of child elements/componenets\n\t     *\n\t     * @param {string} formElement - name of the selected element\n\t     * @param {string} value - selected value for corresponding form element\n\t     */\n\t\n\t  }, {\n\t    key: 'setFormData',\n\t    value: function setFormData(formElement, value) {\n\t      this.props.onChange instanceof Function && this.props.onChange();\n\t\n\t      var formData = this.state.formData;\n\t      formData[formElement] = value;\n\t\n\t      this.setState({\n\t        formData: formData\n\t      }, this.setParentFormData);\n\t    }\n\t  }, {\n\t    key: 'setParentFormData',\n\t    value: function setParentFormData() {\n\t      this.props.setParentFormData(this.state.formData, this.props.id);\n\t    }\n\t  }]);\n\t\n\t  return ContainerBarcodeForm;\n\t}(React.Component);\n\t\n\tContainerBarcodeForm.propTypes = {\n\t  id: React.PropTypes.string,\n\t  specimenTypes: React.PropTypes.object.isRequired,\n\t  containerTypesPrimary: React.PropTypes.object.isRequired,\n\t  specimenTypeAttributes: React.PropTypes.object.isRequired,\n\t  attributeDatatypes: React.PropTypes.object.isRequired,\n\t  capacities: React.PropTypes.object.isRequired\n\t};\n\t\n\texports.default = ContainerBarcodeForm;\n\n/***/ },\n/* 12 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * This file contains React components for Tabs component.\n\t *\n\t * @author Loris Team\n\t * @version 1.1.0\n\t *\n\t */\n\t\n\t/**\n\t * Tabs Component.\n\t * React wrapper for Bootstrap tabs. Allows to dynamically render tabs\n\t * and corresponding tab panes.\n\t *\n\t * ================================================\n\t * Usage:\n\t *\n\t * 1. Define an array of tabs with IDs and labels\n\t *\n\t * `let tabList = [{id: \"tab1\", label: \"This is tab title\"}];`\n\t *\n\t * 2. Pass tabList as <Tab> property and <TabPane> as child\n\t *  ```\n\t * <Tabs tabs={tabList} defaultTab=\"tab1\">\n\t *   <TabPane TabId={tabList[0].id}>\n\t *     // Tab content goes here\n\t *   </TabPane>\n\t * </Tabs>\n\t * ```\n\t * =================================================\n\t *\n\t */\n\tvar Tabs = function (_React$Component) {\n\t  _inherits(Tabs, _React$Component);\n\t\n\t  function Tabs(props) {\n\t    _classCallCheck(this, Tabs);\n\t\n\t    var _this = _possibleConstructorReturn(this, (Tabs.__proto__ || Object.getPrototypeOf(Tabs)).call(this, props));\n\t\n\t    var hash = window.location.hash;\n\t    var activeTab = \"\";\n\t\n\t    /**\n\t     * Determine the initial active tab in this order\n\t     * 1. Try to infer from the URL, otherwise\n\t     * 2. Try to infer from the defaultTab prop, otherwise\n\t     * 3. Set to be the first tab of the list\n\t     */\n\t    if (_this.props.updateURL && hash) {\n\t      activeTab = hash.substr(1);\n\t    } else if (_this.props.defaultTab) {\n\t      activeTab = _this.props.defaultTab;\n\t    } else if (_this.props.tabs.length > 0) {\n\t      activeTab = _this.props.tabs[0].id;\n\t    }\n\t\n\t    _this.state = {\n\t      activeTab: activeTab\n\t    };\n\t\n\t    _this.handleClick = _this.handleClick.bind(_this);\n\t    _this.getTabs = _this.getTabs.bind(_this);\n\t    _this.getTabPanes = _this.getTabPanes.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(Tabs, [{\n\t    key: 'handleClick',\n\t    value: function handleClick(tabId, e) {\n\t      this.setState({ activeTab: tabId });\n\t      this.props.onTabChange(tabId);\n\t\n\t      // Add tab href to URL querystring and scroll the page to top\n\t      if (this.props.updateURL) {\n\t        var scrollDistance = $('body').scrollTop() || $('html').scrollTop();\n\t        window.location.hash = e.target.hash;\n\t        $('html,body').scrollTop(scrollDistance);\n\t      }\n\t    }\n\t  }, {\n\t    key: 'getTabs',\n\t    value: function getTabs() {\n\t      var tabs = this.props.tabs.map(function (tab) {\n\t        var tabClass = this.state.activeTab === tab.id ? 'active' : null;\n\t        var href = \"#\" + tab.id;\n\t        var tabID = \"tab-\" + tab.id;\n\t        return React.createElement(\n\t          'li',\n\t          {\n\t            role: 'presentation',\n\t            className: tabClass,\n\t            key: tab.id\n\t          },\n\t          React.createElement(\n\t            'a',\n\t            { id: tabID,\n\t              href: href,\n\t              role: 'tab',\n\t              'data-toggle': 'tab',\n\t              onClick: this.handleClick.bind(null, tab.id)\n\t            },\n\t            tab.label\n\t          )\n\t        );\n\t      }.bind(this));\n\t\n\t      return tabs;\n\t    }\n\t  }, {\n\t    key: 'getTabPanes',\n\t    value: function getTabPanes() {\n\t      var tabPanes = React.Children.map(this.props.children, function (child, key) {\n\t        if (child) {\n\t          return React.cloneElement(child, {\n\t            activeTab: this.state.activeTab,\n\t            key: key\n\t          });\n\t        }\n\t      }.bind(this));\n\t\n\t      return tabPanes;\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t      var tabs = this.getTabs();\n\t      var tabPanes = this.getTabPanes();\n\t      var tabStyle = {\n\t        marginLeft: 0,\n\t        marginBottom: '5px'\n\t      };\n\t\n\t      return React.createElement(\n\t        'div',\n\t        null,\n\t        React.createElement(\n\t          'ul',\n\t          { className: 'nav nav-tabs', role: 'tablist', style: tabStyle },\n\t          tabs\n\t        ),\n\t        React.createElement(\n\t          'div',\n\t          { className: 'tab-content' },\n\t          tabPanes\n\t        )\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return Tabs;\n\t}(React.Component);\n\t\n\tTabs.propTypes = {\n\t  tabs: React.PropTypes.array.isRequired,\n\t  defaultTab: React.PropTypes.string,\n\t  updateURL: React.PropTypes.bool\n\t};\n\tTabs.defaultProps = {\n\t  onTabChange: function onTabChange() {},\n\t  // Set updateURL to default to true but allow for change\n\t  // Nested tabs should set this variable to false\n\t  updateURL: true\n\t};\n\t\n\t/**\n\t * Allows to dynamically render vertical tabs corresponding to tab panes.\n\t */\n\t\n\tvar VerticalTabs = function (_React$Component2) {\n\t  _inherits(VerticalTabs, _React$Component2);\n\t\n\t  function VerticalTabs(props) {\n\t    _classCallCheck(this, VerticalTabs);\n\t\n\t    var _this2 = _possibleConstructorReturn(this, (VerticalTabs.__proto__ || Object.getPrototypeOf(VerticalTabs)).call(this, props));\n\t\n\t    var hash = window.location.hash;\n\t    var activeTab = \"\";\n\t\n\t    /**\n\t     * Determine the initial active tab in this order\n\t     * 1. Try to infer from the URL, otherwise\n\t     * 2. Try to infer from the defaultTab prop, otherwise\n\t     * 3. Set to be the first tab of the list\n\t     */\n\t    if (_this2.props.updateURL && hash) {\n\t      activeTab = hash.substr(1);\n\t    } else if (_this2.props.defaultTab) {\n\t      activeTab = _this2.props.defaultTab;\n\t    } else if (_this2.props.tabs.length > 0) {\n\t      activeTab = _this2.props.tabs[0].id;\n\t    }\n\t\n\t    _this2.state = {\n\t      activeTab: activeTab\n\t    };\n\t\n\t    _this2.handleClick = _this2.handleClick.bind(_this2);\n\t    _this2.getTabs = _this2.getTabs.bind(_this2);\n\t    _this2.getTabPanes = _this2.getTabPanes.bind(_this2);\n\t    return _this2;\n\t  }\n\t\n\t  _createClass(VerticalTabs, [{\n\t    key: 'handleClick',\n\t    value: function handleClick(tabId, e) {\n\t      this.setState({ activeTab: tabId });\n\t      this.props.onTabChange(tabId);\n\t\n\t      // Add tab href to URL querystring and scroll the page to top\n\t      if (this.props.updateURL) {\n\t        var scrollDistance = $('body').scrollTop() || $('html').scrollTop();\n\t        window.location.hash = e.target.hash;\n\t        $('html,body').scrollTop(scrollDistance);\n\t      }\n\t    }\n\t  }, {\n\t    key: 'getTabs',\n\t    value: function getTabs() {\n\t      var tabs = this.props.tabs.map(function (tab) {\n\t        var tabClass = this.state.activeTab === tab.id ? 'active' : null;\n\t        var href = \"#\" + tab.id;\n\t        var tabID = \"tab-\" + tab.id;\n\t        return React.createElement(\n\t          'li',\n\t          {\n\t            role: 'presentation',\n\t            className: tabClass,\n\t            key: tab.id\n\t          },\n\t          React.createElement(\n\t            'a',\n\t            { id: tabID,\n\t              href: href,\n\t              role: 'tab',\n\t              'data-toggle': 'tab',\n\t              onClick: this.handleClick.bind(null, tab.id)\n\t            },\n\t            tab.label\n\t          )\n\t        );\n\t      }.bind(this));\n\t\n\t      return tabs;\n\t    }\n\t  }, {\n\t    key: 'getTabPanes',\n\t    value: function getTabPanes() {\n\t      var tabPanes = React.Children.map(this.props.children, function (child, key) {\n\t        if (child) {\n\t          return React.cloneElement(child, {\n\t            activeTab: this.state.activeTab,\n\t            key: key\n\t          });\n\t        }\n\t      }.bind(this));\n\t\n\t      return tabPanes;\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t      var tabs = this.getTabs();\n\t      var tabPanes = this.getTabPanes();\n\t      var tabStyle = {\n\t        marginLeft: 0,\n\t        marginBottom: '5px'\n\t      };\n\t\n\t      return React.createElement(\n\t        'div',\n\t        null,\n\t        React.createElement(\n\t          'div',\n\t          { className: 'tabbable col-md-3 col-sm-3' },\n\t          React.createElement(\n\t            'ul',\n\t            { className: 'nav nav-pills nav-stacked', role: 'tablist', style: tabStyle },\n\t            tabs\n\t          )\n\t        ),\n\t        React.createElement(\n\t          'div',\n\t          { className: 'tab-content col-md-9 col-sm-9' },\n\t          tabPanes\n\t        )\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return VerticalTabs;\n\t}(React.Component);\n\t\n\tVerticalTabs.propTypes = {\n\t  tabs: React.PropTypes.array.isRequired,\n\t  defaultTab: React.PropTypes.string,\n\t  updateURL: React.PropTypes.bool\n\t};\n\tVerticalTabs.defaultProps = {\n\t  onTabChange: function onTabChange() {},\n\t  // Set updateURL to default to true but allow for change\n\t  // Nested tabs should set this variable to false\n\t  updateURL: true\n\t};\n\t\n\t/*\n\t * TabPane component.\n\t * Used to wrap content for every tab.\n\t */\n\t\n\tvar TabPane = function (_React$Component3) {\n\t  _inherits(TabPane, _React$Component3);\n\t\n\t  function TabPane() {\n\t    _classCallCheck(this, TabPane);\n\t\n\t    return _possibleConstructorReturn(this, (TabPane.__proto__ || Object.getPrototypeOf(TabPane)).apply(this, arguments));\n\t  }\n\t\n\t  _createClass(TabPane, [{\n\t    key: 'render',\n\t    value: function render() {\n\t      var classList = \"tab-pane\";\n\t      var title = void 0;\n\t\n\t      if (this.props.TabId === this.props.activeTab) {\n\t        classList += \" active\";\n\t      }\n\t      if (this.props.Title) {\n\t        title = React.createElement(\n\t          'h1',\n\t          null,\n\t          this.props.Title\n\t        );\n\t      }\n\t\n\t      return React.createElement(\n\t        'div',\n\t        { role: 'tabpanel', className: classList, id: this.props.TabId },\n\t        title,\n\t        this.props.children\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return TabPane;\n\t}(React.Component);\n\t\n\tTabPane.propTypes = {\n\t  TabId: React.PropTypes.string.isRequired,\n\t  Title: React.PropTypes.string,\n\t  activeTab: React.PropTypes.string\n\t};\n\t\n\texports.Tabs = Tabs;\n\texports.VerticalTabs = VerticalTabs;\n\texports.TabPane = TabPane;\n\n/***/ },\n/* 13 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _Modal = __webpack_require__(14);\n\t\n\tvar _Modal2 = _interopRequireDefault(_Modal);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * This file contains React components for Modal component.\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author Henri Rabalais\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @version 1.1.0\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */\n\t\n\t/**\n\t * Modal Component.\n\t * React wrapper for a Modal Window. Allows to dynamically toggle a Modal window.\n\t *\n\t * ================================================\n\t * Usage:\n\t *\n\t * =================================================\n\t *\n\t */\n\t\n\tvar FormModal = function (_React$Component) {\n\t  _inherits(FormModal, _React$Component);\n\t\n\t  function FormModal(props) {\n\t    _classCallCheck(this, FormModal);\n\t\n\t    var _this = _possibleConstructorReturn(this, (FormModal.__proto__ || Object.getPrototypeOf(FormModal)).call(this, props));\n\t\n\t    _this.state = { show: false, throwWarning: false };\n\t\n\t    _this.openModal = _this.openModal.bind(_this);\n\t    _this.closeModal = _this.closeModal.bind(_this);\n\t    _this.confirmClose = _this.confirmClose.bind(_this);\n\t    _this.setWarning = _this.setWarning.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(FormModal, [{\n\t    key: \"renderChildren\",\n\t    value: function renderChildren() {\n\t      var _this2 = this;\n\t\n\t      return React.Children.map(this.props.children, function (child) {\n\t        return React.cloneElement(child, { onSuccess: _this2.closeModal, onChange: _this2.setWarning });\n\t      });\n\t    }\n\t  }, {\n\t    key: \"openModal\",\n\t    value: function openModal() {\n\t      this.setState({\n\t        show: true\n\t      });\n\t    }\n\t  }, {\n\t    key: \"setWarning\",\n\t    value: function setWarning() {\n\t      this.setState({\n\t        throwWarning: true\n\t      });\n\t    }\n\t  }, {\n\t    key: \"confirmClose\",\n\t    value: function confirmClose() {\n\t      if (this.state.throwWarning) {\n\t        swal({\n\t          title: \"Are You Sure?\",\n\t          text: \"Leaving the form will result in the loss of any information entered.\",\n\t          type: \"warning\",\n\t          showCancelButton: true,\n\t          confirmButtonText: 'Proceed',\n\t          cancelButtonText: 'Cancel'\n\t        }, function () {\n\t          this.closeModal();\n\t        }.bind(this));\n\t      } else {\n\t        this.closeModal();\n\t      }\n\t    }\n\t  }, {\n\t    key: \"closeModal\",\n\t    value: function closeModal() {\n\t      this.setState({\n\t        show: false,\n\t        throwWarning: false\n\t      });\n\t    }\n\t  }, {\n\t    key: \"render\",\n\t    value: function render() {\n\t      return React.createElement(\n\t        _Modal2.default,\n\t        _extends({\n\t          closeModal: this.confirmClose,\n\t          openModal: this.openModal,\n\t          show: this.state.show\n\t        }, this.props),\n\t        this.renderChildren()\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return FormModal;\n\t}(React.Component);\n\t\n\tFormModal.propTypes = {\n\t  title: React.PropTypes.string,\n\t  buttonClass: React.PropTypes.string,\n\t  buttonStyle: React.PropTypes.object,\n\t  buttonContent: React.PropTypes.object\n\t};\n\tFormModal.defaultProps = {\n\t  buttonClass: 'btn btn-primary'\n\t};\n\t\n\texports.default = FormModal;\n\n/***/ },\n/* 14 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * This file contains React components for Modal component.\n\t *\n\t * @author Henri Rabalais\n\t * @version 1.1.0\n\t *\n\t */\n\t\n\t/**\n\t * Modal Component.\n\t * React wrapper for a Modal Window. Allows to dynamically toggle a Modal window.\n\t *\n\t * ================================================\n\t * Usage:\n\t *\n\t * =================================================\n\t *\n\t */\n\tvar Modal = function (_React$Component) {\n\t  _inherits(Modal, _React$Component);\n\t\n\t  function Modal(props) {\n\t    _classCallCheck(this, Modal);\n\t\n\t    return _possibleConstructorReturn(this, (Modal.__proto__ || Object.getPrototypeOf(Modal)).call(this, props));\n\t  }\n\t\n\t  _createClass(Modal, [{\n\t    key: 'render',\n\t    value: function render() {\n\t      // Black Background with Alpha Channel\n\t      var backdropStyle = {\n\t        position: 'fixed',\n\t        zIndex: 9998,\n\t        top: 0,\n\t        bottom: 0,\n\t        left: 0,\n\t        right: 0,\n\t        backgroundColor: 'rgba(0,0,0,0.3)',\n\t        padding: 50\n\t      };\n\t\n\t      // White Modal Window\n\t      var modalStyle = {\n\t        position: 'relative',\n\t        maxWidth: 1000,\n\t        maxHeight: '100%',\n\t        margin: '0 auto',\n\t        backgroundColor: '#fff',\n\t        borderRadius: 10,\n\t        overflowY: 'auto',\n\t        zIndex: 9999\n\t      };\n\t\n\t      var titleStyle = {\n\t        display: 'flex',\n\t        flexDirection: 'row',\n\t        alignItems: 'center',\n\t        background: '#093782',\n\t        height: '70px',\n\t        borderTopRightRadius: '10',\n\t        color: '#FFFFFF',\n\t        fontSize: 24,\n\t        padding: 20\n\t      };\n\t\n\t      var glyphStyle = {\n\t        marginLeft: 'auto',\n\t        cursor: 'pointer'\n\t      };\n\t\n\t      var bodyStyle = {\n\t        padding: 15\n\t      };\n\t\n\t      var button = React.createElement(\n\t        'div',\n\t        {\n\t          className: this.props.buttonClass,\n\t          onClick: this.props.openModal\n\t        },\n\t        this.props.buttonContent\n\t      );\n\t\n\t      var modal;\n\t      if (this.props.show) {\n\t        modal = React.createElement(\n\t          'div',\n\t          { style: backdropStyle, onClick: this.props.closeModal },\n\t          React.createElement(\n\t            'div',\n\t            {\n\t              style: modalStyle,\n\t              onClick: function onClick(e) {\n\t                e.stopPropagation();\n\t              }\n\t            },\n\t            React.createElement(\n\t              'div',\n\t              {\n\t                style: titleStyle\n\t              },\n\t              this.props.title,\n\t              React.createElement(\n\t                'span',\n\t                {\n\t                  style: glyphStyle,\n\t                  onClick: this.props.closeModal\n\t                },\n\t                '\\xD7'\n\t              )\n\t            ),\n\t            React.createElement(\n\t              'div',\n\t              {\n\t                style: bodyStyle\n\t              },\n\t              this.props.children\n\t            )\n\t          )\n\t        );\n\t      }\n\t\n\t      return React.createElement(\n\t        'div',\n\t        { style: this.props.style },\n\t        button,\n\t        modal\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return Modal;\n\t}(React.Component);\n\t\n\tModal.propTypes = {\n\t  title: React.PropTypes.string,\n\t  buttonClass: React.PropTypes.string,\n\t  buttonStyle: React.PropTypes.object,\n\t  buttonContent: React.PropTypes.object,\n\t  show: React.PropTypes.boolean,\n\t  closeModal: React.PropTypes.func,\n\t  openModal: React.PropTypes.func\n\t};\n\tModal.defaultProps = {\n\t  buttonClass: 'btn btn-primary'\n\t};\n\t\n\texports.default = Modal;\n\n/***/ },\n/* 15 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * This file contains React component for Loader\n\t *\n\t * @author Henri Rabalais\n\t * @version 1.0.0\n\t *\n\t */\n\t\n\t/**\n\t * Loader component\n\t */\n\tvar Loader = function (_React$Component) {\n\t  _inherits(Loader, _React$Component);\n\t\n\t  function Loader(props) {\n\t    _classCallCheck(this, Loader);\n\t\n\t    return _possibleConstructorReturn(this, (Loader.__proto__ || Object.getPrototypeOf(Loader)).call(this, props));\n\t  }\n\t\n\t  _createClass(Loader, [{\n\t    key: \"render\",\n\t    value: function render() {\n\t\n\t      return React.createElement(\n\t        \"div\",\n\t        { className: \"loader-container\" },\n\t        React.createElement(\"div\", { className: \"loader\" })\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return Loader;\n\t}(React.Component);\n\t\n\texports.default = Loader;\n\n/***/ },\n/* 16 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t/**\n\t * Modify behaviour of specified column cells in the Data Table component\n\t * @param {string} column - column name\n\t * @param {string} cell - cell content\n\t * @param {arrray} rowData - array of cell contents for a specific row\n\t * @param {arrray} rowHeaders - array of table headers (column names)\n\t * @return {*} a formated table cell for a given column\n\t */\n\tfunction formatColumn(column, cell, rowData, rowHeaders) {\n\t  // If a column if set as hidden, don't display it\n\t  //if (loris.hiddenHeaders.indexOf(column) > -1) {\n\t  //  return null;\n\t  //}\n\t\n\t  // Create the mapping between rowHeaders and rowData in a row object.\n\t  var row = {};\n\t  rowHeaders.forEach(function (header, index) {\n\t    row[header] = rowData[index];\n\t  }, this);\n\t\n\t  // create array of classes to be added to td tag\n\t  var classes = [];\n\t\n\t  // convert array to string, with blank space separator\n\t  classes = classes.join(\" \");\n\t\n\t  //const hasWritePermission = loris.userHasPermission('media_read');\n\t  if (column === 'Barcode') {\n\t    var specimenURL = loris.BaseURL + \"/biobank/specimen/?barcode=\" + row['Barcode'];\n\t    return React.createElement(\n\t      \"td\",\n\t      { className: classes },\n\t      React.createElement(\n\t        \"a\",\n\t        { href: specimenURL },\n\t        cell\n\t      )\n\t    );\n\t  }\n\t\n\t  if (column === 'Parent Barcode') {\n\t    var specimenURL = loris.BaseURL + \"/biobank/specimen/?barcode=\" + row['Parent Barcode'];\n\t    return React.createElement(\n\t      \"td\",\n\t      { className: classes },\n\t      React.createElement(\n\t        \"a\",\n\t        { href: specimenURL },\n\t        cell\n\t      )\n\t    );\n\t  }\n\t\n\t  if (column === 'Container Barcode') {\n\t    var containerURL = loris.BaseURL + \"/biobank/container/?barcode=\" + row['Container Barcode'];\n\t    return React.createElement(\n\t      \"td\",\n\t      { className: classes },\n\t      React.createElement(\n\t        \"a\",\n\t        { href: containerURL },\n\t        cell\n\t      )\n\t    );\n\t  }\n\t\n\t  // if (column === 'Visit Label') {\n\t  //   if (row[\"Cand ID\"] !== null && row[\"Session ID\"]) {\n\t  //     var sessionURL = loris.BaseURL + \"/instrument_list/?candID=\" +\n\t  //       row[\"Cand ID\"] + \"&sessionID=\" + row[\"Session ID\"];\n\t  //     return <td className={classes}><a href={sessionURL}>{cell}</a></td>;\n\t  //   }\n\t  // }\n\t\n\t  // if (column === 'Edit Metadata') {\n\t  //   var editURL = loris.BaseURL + \"/biobank/edit/?id=\" + row['Edit Metadata'];\n\t  //   return <td className={classes}><a href={editURL}>Edit</a></td>;\n\t  // }\n\t\n\t  return React.createElement(\n\t    \"td\",\n\t    { className: classes },\n\t    cell\n\t  );\n\t}\n\t\n\texports.default = formatColumn;\n\n/***/ },\n/* 17 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t/**\n\t * Modify behaviour of specified column cells in the Data Table component\n\t * @param {string} column - column name\n\t * @param {string} cell - cell content\n\t * @param {arrray} rowData - array of cell contents for a specific row\n\t * @param {arrray} rowHeaders - array of table headers (column names)\n\t * @return {*} a formated table cell for a given column\n\t */\n\tfunction formatColumn(column, cell, rowData, rowHeaders) {\n\t  // If a column if set as hidden, don't display it\n\t  //if (loris.hiddenHeaders.indexOf(column) > -1) {\n\t  //  return null;\n\t  //}\n\t\n\t  // Create the mapping between rowHeaders and rowData in a row object.\n\t  var row = {};\n\t  rowHeaders.forEach(function (header, index) {\n\t    row[header] = rowData[index];\n\t  }, this);\n\t\n\t  // create array of classes to be added to td tag\n\t  var classes = [];\n\t\n\t  // convert array to string, with blank space separator\n\t  classes = classes.join(\" \");\n\t\n\t  //const hasWritePermission = loris.userHasPermission('media_read');\n\t  if (column === 'Barcode') {\n\t    var containerURL = loris.BaseURL + \"/biobank/container/?barcode=\" + row['Barcode'];\n\t    return React.createElement(\n\t      \"td\",\n\t      { className: classes },\n\t      React.createElement(\n\t        \"a\",\n\t        { href: containerURL },\n\t        cell\n\t      )\n\t    );\n\t  }\n\t\n\t  if (column === 'Parent Barcode') {\n\t    var specimenURL = loris.BaseURL + \"/biobank/container/?barcode=\" + row['Parent Barcode'];\n\t    return React.createElement(\n\t      \"td\",\n\t      { className: classes },\n\t      React.createElement(\n\t        \"a\",\n\t        { href: containerURL },\n\t        cell\n\t      )\n\t    );\n\t  }\n\t\n\t  // if (column === 'Visit Label') {\n\t  //   if (row[\"Cand ID\"] !== null && row[\"Session ID\"]) {\n\t  //     var sessionURL = loris.BaseURL + \"/instrument_list/?candID=\" +\n\t  //       row[\"Cand ID\"] + \"&sessionID=\" + row[\"Session ID\"];\n\t  //     return <td className={classes}><a href={sessionURL}>{cell}</a></td>;\n\t  //   }\n\t  // }\n\t\n\t  // if (column === 'Edit Metadata') {\n\t  //   var editURL = loris.BaseURL + \"/biobank/edit/?id=\" + row['Edit Metadata'];\n\t  //   return <td className={classes}><a href={editURL}>Edit</a></td>;\n\t  // }\n\t\n\t  return React.createElement(\n\t    \"td\",\n\t    { className: classes },\n\t    cell\n\t  );\n\t}\n\t\n\texports.default = formatColumn;\n\n/***/ }\n/******/ ]);\n\n\n// WEBPACK FOOTER //\n// modules/biobank/js/biobankIndex.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap ef16559463564537b05e","import FilterForm from 'FilterForm';\nimport BiobankSpecimenForm from './specimenForm';\nimport PoolSpecimenForm from './poolSpecimenForm';\nimport BiobankContainerForm from './containerForm';\nimport {Tabs, TabPane} from 'Tabs';\nimport FormModal from 'FormModal';\nimport Loader from 'Loader';\nimport formatColumnSpecimen from './columnFormatterSpecimen';\nimport formatColumnContainer from './columnFormatterContainer';\n\nclass BiobankIndex extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isLoaded: false,\n      specimenFilter: {},\n      containerFilter: {},\n      isOpen: false,\n      formOptions: {},\n    };\n\n    // Bind component instance to custom methods\n    this.loadPage = this.loadPage.bind(this);\n    this.fetchSpecimenData = this.fetchSpecimenData.bind(this);\n    this.fetchFormOptions = this.fetchFormOptions.bind(this);\n    this.fetchContainerData = this.fetchContainerData.bind(this);\n    this.updateSpecimenFilter = this.updateSpecimenFilter.bind(this);\n    this.updateContainerFilter = this.updateContainerFilter.bind(this);\n    this.resetFilters = this.resetFilters.bind(this);\n    this.mapFormOptions = this.mapFormOptions.bind(this);\n  }\n\n  componentDidMount() {\n    this.loadPage();\n  }\n\n  loadPage() {\n    this.fetchSpecimenData();\n    this.fetchFormOptions();\n    this.fetchContainerData();\n  }\n\n  /**\n   * Retrieve data from the provided URL and save it in state\n   * Additionaly add hiddenHeaders to global loris variable\n   * for easy access by columnFormatter.\n   */\n  fetchSpecimenData() {\n    $.ajax(this.props.specimenDataURL, {\n      method: \"GET\",\n      dataType: 'json',\n      success: function(data) {\n        this.setState({\n          specimenData: data,\n          isLoaded: true\n        });\n      }.bind(this),\n      error: function(error) {\n        console.error(error);\n      }\n    });\n  }\n\n  fetchContainerData() {\n    $.ajax(this.props.containerDataURL, {\n      method: \"GET\",\n      dataType: 'json',\n      success: function(data) {\n        this.setState({\n          containerData: data,\n          isLoaded: true\n        });\n      }.bind(this),\n      error: function(error) {\n        console.error(error);\n      }\n    });\n  }\n\n  fetchFormOptions() {\n    $.ajax(this.props.formDataURL, {\n      method: \"GET\",\n      dataType: 'json',\n      success: function(data) {\n        this.setState({\n          formOptions: data,\n          isLoaded: true\n        });\n      }.bind(this),\n      error: function(error) {\n        console.error(error);\n      }\n    });\n  }\n\n  updateSpecimenFilter(specimenFilter) {\n    this.setState({specimenFilter});\n  }\n\n  // This works,\n  // but there must be a way to do this with just one updateFilter function\n  updateContainerFilter(containerFilter) {\n    this.setState({containerFilter});\n  }\n\n  resetFilters() {\n    this.refs.biobankFilter.clearFilter();\n  }\n\n //map options for forms\n  mapFormOptions(rawObject, targetAttribute) {\n    var data = {}; \n    for (var id in rawObject) {\n      data[id] = rawObject[id][targetAttribute];\n    }   \n\n    return data;\n  }\n\n  render() {\n    // Waiting for async data to load\n    if (!this.state.isLoaded) {\n      return (\n        <Loader/>\n      );\n    }\n\n    let addSpecimenButton;\n    let poolSpecimenButton;\n    let addContainerButton;\n    if (loris.userHasPermission('biobank_write')) {\n\n       /**\n        * Map Options for Form Select Elements of Specimen Form\n        */\n       let specimenTypes = this.mapFormOptions(this.state.formOptions.specimenTypes, 'type');\n       let containerTypesPrimary = this.mapFormOptions(this.state.formOptions.containerTypesPrimary, 'label');\n        \n       addSpecimenButton = (\n         <FormModal\n           title='Add New Specimen'\n           buttonClass='action-button add'\n           buttonContent='+'\n           style={{display:'inline-block'}}\n         >\n           <BiobankSpecimenForm\n             specimenTypes={specimenTypes}\n             containerTypesPrimary={containerTypesPrimary}\n             containersNonPrimary={this.state.formOptions.containersNonPrimary}\n             specimenTypeAttributes={this.state.formOptions.specimenTypeAttributes}\n             attributeDatatypes={this.state.formOptions.attributeDatatypes}\n             attributeOptions={this.state.formOptions.attributeOptions}\n             capacities={this.state.formOptions.capacities}\n             containerDimensions={this.state.formOptions.containerDimensions}\n             containerCoordinates={this.state.formOptions.containerCoordinates}\n             specimenTypeUnits={this.state.formOptions.specimenTypeUnits}\n             pSCIDs={this.state.formOptions.pSCIDs}\n             visits={this.state.formOptions.visits}\n             sessionData={this.state.formOptions.sessionData}\n             action={`${loris.BaseURL}/biobank/ajax/submitData.php?action=submitSpecimenForm`}\n             refreshParent={this.loadPage}\n           />\n         </FormModal>\n       );\n\n       let poolSpecimenButtonContent = (\n         <span className='glyphicon glyphicon-resize-small'/>\n       )\n\n       poolSpecimenButton = (\n         <FormModal\n           title='Pool Specimens'\n           buttonClass='action-button pool'\n           buttonContent={poolSpecimenButtonContent}\n           style={{display:'inline-block'}}\n         >\n           <PoolSpecimenForm\n             specimenTypes={specimenTypes}\n             containerTypesPrimary={containerTypesPrimary}\n             containersNonPrimary={this.state.formOptions.containersNonPrimary}\n             specimenTypeAttributes={this.state.formOptions.specimenTypeAttributes}\n             specimenProtocols={this.state.formOptions.specimenProtocols}\n             specimenProtocolAttributes={this.state.formOptions.specimenProtocolAttributes}\n             attributeDatatypes={this.state.formOptions.attributeDatatypes}\n             attributeOptions={this.state.formOptions.attributeOptions}\n             capacities={this.state.formOptions.capacities}\n       \n             containerDimensions={this.state.formOptions.containerDimensions}\n             containerCoordinates={this.state.formOptions.containerCoordinates}\n             specimenTypeUnits={this.state.formOptions.specimenTypeUnits}\n             specimenUnits={this.state.formOptions.specimenUnits}\n             pSCIDs={this.state.formOptions.pSCIDs}\n             sessionData={this.state.formOptions.sessionData}\n             specimenRequest={`${loris.BaseURL}/biobank/ajax/requestData.php?action=getSpecimenDataFromBarcode`}\n             refreshParent={this.loadPage}\n             action={`${loris.BaseURL}/biobank/ajax/submitData.php?action=submitPoolForm`}\n           />\n         </FormModal>\n       );\n\n       let containerTypesNonPrimary = this.mapFormOptions(this.state.formOptions.containerTypesNonPrimary, 'label');\n\n       addContainerButton = (\n         <FormModal\n           title='Add New Container'\n           buttonClass='action-button add'\n           buttonContent='+'\n           style={{display:'inline-block'}}\n         >\n           <BiobankContainerForm\n             containerTypesNonPrimary={containerTypesNonPrimary}\n             sites={this.state.formOptions.sites}\n             action={`${loris.BaseURL}/biobank/ajax/submitData.php?action=submitContainer`}\n             refreshParent={this.loadPage}\n           />\n         </FormModal>\n       ); \n    }\n\n    //Look at CCNA code from Zaliqa to modify this to be more streamline\n    var tabList = [\n      {id: \"specimens\", label: \"Specimens\"},\n      {id: \"containers\", label: \"Containers\"}\n    ];\n\n    return (\n    <div id='biobank-page'>\n      <Tabs tabs={tabList} defaultTab=\"specimens\" updateURL={true}>\n        <TabPane TabId={tabList[0].id}>\n          <div className='row'>\n            <div className='col-lg-10'>\n              <FilterForm\n                Module=\"biobank\"\n                name=\"specimen_filter\"\n                id=\"specimen_filter\"\n                ref=\"specimenFilter\"\n                columns={3}\n                formElements={this.state.specimenData.form}\n                onUpdate={this.updateSpecimenFilter}\n                filter={this.state.specimenFilter}\n              >\n                <br/>\n                <StaticElement/>\n                <StaticElement/>\n                <ButtonElement label=\"Clear Filters\" type=\"reset\" onUserInput={this.resetFilters}/>\n              </FilterForm>\n            </div>\n            <div className='col-lg-2'>\n              <span className='action'>\n                {addSpecimenButton}\n                <div className='action-title'>\n                  Add Specimen\n                </div>\n              </span>\n              <br/><br/>\n              <span className='action'>\n                {poolSpecimenButton}\n                <div className='action-title'>\n                  Pool Specimens\n                </div>\n              </span>\n            </div>\n          </div>\n          <StaticDataTable\n            Data={this.state.specimenData.Data}\n            Headers={this.state.specimenData.Headers}\n            Filter={this.state.specimenFilter}\n            getFormattedCell={formatColumnSpecimen}\n          />\n        </TabPane>\n        <TabPane TabId={tabList[1].id}>\n          <div className='row'>\n            <div className='col-lg-10'>\n              <FilterForm\n                Module=\"biobank\"\n                name=\"container_filter\"\n                id=\"container_filter\"\n                ref=\"containerFilter\"\n                columns={3}\n                formElements={this.state.containerData.form}\n                onUpdate={this.updateContainerFilter}\n                filter={this.state.containerFilter}\n\t\t          >\n                <br/>\n                <StaticElement/>\n                <StaticElement/>\n                <ButtonElement label=\"Clear Filters\" type=\"reset\" onUserInput={this.resetFilters}/>\n              </FilterForm>\t\t\t\n            </div>\n            <div className='col-lg-2'>\n              <span className='action'>\n                {addContainerButton}\n                <div className='action-title'>\n                  New Container\n                </div>\n              </span>\n            </div>\n          </div>\n          <StaticDataTable\n            Data={this.state.containerData.Data}\n            Headers={this.state.containerData.Headers}\n            Filter={this.state.containerFilter}\n            getFormattedCell={formatColumnContainer}\n          />\n        </TabPane>\n      </Tabs>\n      </div>\n    );\n  }\n}\n\n$(function() {\n  const biobankIndex = (\n    <div className=\"page-biobank\">\n      <BiobankIndex \n        specimenDataURL={`${loris.BaseURL}/biobank/?format=json`} \n        containerDataURL={`${loris.BaseURL}/biobank/ajax/requestData.php?action=getContainerFilterData`} \n        formDataURL={`${loris.BaseURL}/biobank/ajax/requestData.php?action=getFormOptions`}\n      />\n    </div>\n  );\n\n  ReactDOM.render(biobankIndex, document.getElementById(\"lorisworkspace\"));\n});\n\n\n\n// WEBPACK FOOTER //\n// ./modules/biobank/jsx/biobankIndex.js","/**\n * This file contains React component for FilterForm\n *\n * @author Loris Team\n * @version 1.1.0\n *\n */\n\nimport Panel from 'Panel';\n\n/**\n * FilterForm component.\n * A wrapper for form elements inside a selection filter.\n *\n * Adds necessary filter callbacks to all children and passes them to FormElement\n * for proper rendering.\n *\n * Keeps track of filter object and sends it to parent on every update.\n *\n * //HACK/NOTE: Loris has special behaviour for `candID` attribute in the query string,\n * making it impossible to use it for selection filters. This components renames\n * all `candID` fields to `candidateID` automatically before appending them to URL.\n *\n */\nclass FilterForm extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    // Bind component instance to custom methods\n    this.clearFilter = this.clearFilter.bind(this);\n    this.getFormChildren = this.getFormChildren.bind(this);\n    this.setFilter = this.setFilter.bind(this);\n    this.onElementUpdate = this.onElementUpdate.bind(this);\n\n    // Keeps track of querystring values\n    // Saved as class variable instead of keeping in state\n    this.queryString = QueryString.get();\n  }\n\n  componentDidMount() {\n    let filter = {};\n    let queryString = this.queryString;\n\n    // Initiaze filter using querystring value\n    Object.keys(queryString).forEach(function(key) {\n      let filterKey = (key === 'candidateID') ? 'candID' : key;\n      filter[filterKey] = {\n        value: queryString[key],\n        exactMatch: false\n      };\n    });\n\n    // Update parent component\n    this.props.onUpdate(filter);\n  }\n\n  /**\n   * Clear the filter object, querystring and input fields\n   */\n  clearFilter() {\n    this.queryString = QueryString.clear(this.props.Module);\n    this.props.onUpdate({});\n  }\n\n  /**\n   * Itterates through FilterForm children, sets necessary callback functions\n   * and initializes filterTable\n   *\n   * @return {Array} formChildren - array of children with necessary props\n   */\n  getFormChildren() {\n    let formChildren = [];\n    React.Children.forEach(this.props.children, function(child, key) {\n      // If child is a React component (i.e not a simple DOM element)\n      if (React.isValidElement(child) &&\n        typeof child.type === \"function\" &&\n        child.props.onUserInput\n      ) {\n        let callbackFunc = child.props.onUserInput;\n        let callbackName = callbackFunc.name;\n        let elementName = child.type.displayName;\n        let queryFieldName = (child.props.name === 'candID') ? 'candidateID' : child.props.name;\n        let filterValue = this.queryString[queryFieldName];\n        // If callback function was not set, set it to onElementUpdate() for form\n        // elements and to clearFilter() for <ButtonElement type='reset'/>.\n        if (callbackName === \"onUserInput\") {\n          if (elementName === \"ButtonElement\" && child.props.type === \"reset\") {\n            callbackFunc = this.clearFilter;\n          } else {\n            callbackFunc = this.onElementUpdate.bind(null, elementName);\n          }\n        }\n        // Pass onUserInput and value props to all children\n        formChildren.push(React.cloneElement(child, {\n          onUserInput: callbackFunc,\n          value: filterValue ? filterValue : '',\n          key: key\n        }));\n        // Initialize filter for StaticDataTable\n        this.setFilter(elementName, child.props.name, filterValue);\n      } else {\n        formChildren.push(React.cloneElement(child, {key: key}));\n      }\n    }.bind(this));\n\n    return formChildren;\n  }\n\n  /**\n   * Appends entry to filter object or deletes it if value is\n   * empty.\n   *\n   * Sets exactMatch to true for all SelectElements (i.e dropdowns)\n   * in order to force StaticDataTable to do exact comparaison\n   *\n   * @param {string} type - form element type (i.e component name)\n   * @param {string} key - the name of the form element\n   * @param {string} value - the value of the form element\n   *\n   * @return {{}} filter - filterData\n   */\n  setFilter(type, key, value) {\n    let filter = {};\n    if (this.props.filter) {\n      filter = JSON.parse(JSON.stringify(this.props.filter));\n    }\n\n    if (key && value) {\n      filter[key] = {};\n      filter[key].value = value;\n      filter[key].exactMatch = (type === \"SelectElement\");\n    } else if (filter && key && value === '') {\n      delete filter[key];\n    }\n\n    return filter;\n  }\n\n  /**\n   * Sets filter object and querystring to reflect values of input fields\n   *\n   * @param {string} type - form element type (i.e component name)\n   * @param {string} fieldName - the name of the form element\n   * @param {string} fieldValue - the value of the form element\n   */\n  onElementUpdate(type, fieldName, fieldValue) {\n    // Make sure both key/value are string before sending them to querystring\n    if (typeof fieldName !== \"string\" || typeof fieldValue !== \"string\") {\n      return;\n    }\n\n    // Update query string\n    let queryFieldName = (fieldName === 'candID') ? 'candidateID' : fieldName;\n    this.queryString = QueryString.set(this.queryString, queryFieldName, fieldValue);\n\n    // Update filter and get new filter object\n    let filter = this.setFilter(type, fieldName, fieldValue);\n    this.props.onUpdate(filter);\n  }\n\n  render() {\n    // Get formatted children\n    let formChildren = this.getFormChildren();\n    let formElements = this.props.formElements;\n\n    if (formElements) {\n      Object.keys(formElements).forEach(function(fieldName) {\n        let queryFieldName = (fieldName === 'candID') ? 'candidateID' : fieldName;\n        formElements[fieldName].onUserInput = this.onElementUpdate.bind(null, fieldName);\n        formElements[fieldName].value = this.queryString[queryFieldName];\n      }.bind(this));\n    }\n\n    return (\n      <Panel\n        id={this.props.id}\n        height={this.props.height}\n        title={this.props.title}\n      >\n        <FormElement {...this.props}>\n          {formChildren}\n        </FormElement>\n      </Panel>\n    );\n  }\n}\n\nFilterForm.defaultProps = {\n  id: 'selection-filter',\n  height: '100%',\n  title: 'Selection Filter',\n  onUpdate: function() {\n    console.warn('onUpdate() callback is not set!');\n  }\n};\nFilterForm.propTypes = {\n  Module: React.PropTypes.string.isRequired,\n  filter: React.PropTypes.object.isRequired,\n  id: React.PropTypes.string,\n  height: React.PropTypes.string,\n  title: React.PropTypes.string,\n  onUpdate: React.PropTypes.func\n};\n\nexport default FilterForm;\n\n\n\n// WEBPACK FOOTER //\n// ./jsx/FilterForm.js","/**\n * This file contains React component for Panel\n *\n * @author Alex I.\n * @version 1.0.0\n *\n */\n\n/**\n * Panel component\n * Wraps children in a collapsible bootstrap panel\n */\nclass Panel extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      collapsed: this.props.initCollapsed\n    };\n\n    // Initialize panel class based on collapsed status\n    this.panelClass = (\n      this.props.initCollapsed ?\n        \"panel-collapse collapse\" :\n        \"panel-collapse collapse in\"\n    );\n\n    this.toggleCollapsed = this.toggleCollapsed.bind(this);\n  }\n\n  toggleCollapsed() {\n    this.setState({collapsed: !this.state.collapsed});\n  }\n\n  render() {\n    // Change arrow direction based on collapse status\n    let glyphClass = (\n      this.state.collapsed ?\n        \"glyphicon pull-right glyphicon-chevron-down\" :\n        \"glyphicon pull-right glyphicon-chevron-up\"\n    );\n\n    let pencilGlyph;\n    if (this.props.edit) {\n      pencilGlyph = (\n        <span\n          className=\"glyphicon pull-right glyphicon-pencil\"\n          style={{marginRight:'10px', cursor: 'pointer'}}\n          onClick={this.props.edit}\n        /> \n      );\n    } \n\n    let plusGlyph;\n    if (this.props.add) {\n      plusGlyph = (\n        <span\n          className=\"glyphicon pull-right glyphicon-plus\"\n          style={{marginRight:'10px', cursor: 'pointer'}}\n          onClick={this.props.add}\n        />\n      );\n    }\n\n    let removeGlyph;\n    if (this.props.cancel) {\n      removeGlyph = (\n        <span\n          className=\"glyphicon pull-right glyphicon-remove\"\n          style={{marginRight:'10px', cursor: 'pointer'}}\n          onClick={this.props.cancel}\n        />\n      );\n    }\n\n    // Add panel header, if title is set\n    const panelHeading = this.props.title ? (\n      <div\n        className=\"panel-heading\"\n      >\n        <span \n          className={glyphClass}\n          onClick={this.toggleCollapsed}\n          data-toggle=\"collapse\"\n          data-target={'#' + this.props.id}\n          style={{cursor: 'pointer'}}\n        />\n        {pencilGlyph}\n        {plusGlyph}\n        {removeGlyph}\n        {this.props.title}\n      </div>\n    ) : '';\n\n    return (\n      <div className=\"panel panel-primary\">\n        {panelHeading}\n        <div id={this.props.id} className={this.panelClass} role=\"tabpanel\">\n          <div className=\"panel-body\" style={{height: this.props.height}}>\n            {this.props.children}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nPanel.propTypes = {\n  id: React.PropTypes.string,\n  height: React.PropTypes.string,\n  title: React.PropTypes.string,\n  edit: React.PropTypes.func,\n  add: React.PropTypes.func\n};\nPanel.defaultProps = {\n  initCollapsed: false,\n  id: 'default-panel',\n  height: '100%'\n};\n\nexport default Panel;\n\n\n\n// WEBPACK FOOTER //\n// ./jsx/Panel.js","import SpecimenBarcodeForm from './barcodeForm.js';\n\n/**\n * Biobank Collection Form\n *\n * Fetches data from Loris backend and displays a form allowing\n * to specimen a biobank file attached to a specific instrument\n *\n * @author Henri Rabalais\n * @version 1.0.0\n *\n * */\nclass BiobankSpecimenForm extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      formData: {},\n      errorMessage: null,\n      formErrors: {},\n      barcodeFormList: {1: {}},\n      countBarcodeForms: 1\n    };\n\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.validateForm = this.validateForm.bind(this);\n    this.setFormData = this.setFormData.bind(this);\n    this.setParentFormData = this.setParentFormData.bind(this);\n    this.specimenSubmit = this.specimenSubmit.bind(this);\n    this.addBarcodeForm = this.addBarcodeForm.bind(this);\n    this.setBarcodeFormData = this.setBarcodeFormData.bind(this);\n  }\n\n  componentDidMount() {\n\n    // Sets formData to formData passed from parent component\n    // or else it is set to an empty object\n    // TODO: this should be moved to the constructor.\n    let formData = this.props.formData || this.state.formData;\n\n    //if this is a child specimen form then certain formData is set when component mount\n    //TODO: there is a better way of doing this.\n    //This solution assumes too much about the props being passed\n    if (this.props.parentSpecimenIds) {\n      formData['parentSpecimenIds'] = this.props.parentSpecimenIds;\n      formData['pscid'] = this.props.candidateId;\n      formData['visitLabel'] = this.props.sessionId;\n      formData['unitId'] = this.props.unitId;\n    }\n\n    this.setState({formData});\n  }\n\n  render() {\n\n    //Generates new Barcode Form everytime the addBarcodeForm button is pressed\n    var barcodeListArray = Object.keys(this.state.barcodeFormList);\n    var barcodeForms = [];\n    let i = 1;\n    for (let key of barcodeListArray) {\n      barcodeForms.push(\n        <SpecimenBarcodeForm\n          key={key}\n          barcodeKey={key}\n          id={i} \n          formData={this.state.barcodeFormList[key] ? \n            this.state.barcodeFormList[key] : null}\n          removeBarcodeForm={barcodeListArray.length !== 1 ?\n            () => this.removeBarcodeForm(key) : null}\n          addBarcodeForm={i == barcodeListArray.length ? this.addBarcodeForm : null}\n          copyBarcodeForm={i == barcodeListArray.length && this.state.barcodeFormList[key] ? \n            this.copyBarcodeForm.bind(this, key) : null}\n          setParentFormData={this.setBarcodeFormData}\n          onChange={this.props.onChange}\n          specimenTypes={this.props.specimenTypes}\n          containerTypesPrimary={this.props.containerTypesPrimary}\n          containersNonPrimary={this.props.containersNonPrimary}\n          specimenTypeAttributes={this.props.specimenTypeAttributes}\n          attributeDatatypes={this.props.attributeDatatypes}\n          attributeOptions={this.props.attributeOptions}\n          capacities={this.props.capacities}\n          containerDimensions={this.props.containerDimensions}\n          containerCoordinates={this.props.containerCoordinates}\n          specimenTypeUnits={this.props.specimenTypeUnits}\n          units={this.props.units}\n        />\n      )\n      \n      i++;\n    }\n\n    let globalFields;\n    let remainingQuantityFields;\n    if (this.props.parentSpecimenIds) {\n      globalFields = (\n        <div>\n          <StaticElement\n            label=\"Parent Specimen\"\n            text={this.props.parentSpecimenBarcodes}\n          />\n          <StaticElement\n            label=\"PSCID\"\n            text={this.props.pscid}\n          />\n          <StaticElement\n            label=\"Visit Label\"\n            text={this.props.visit}\n          />\n        </div>\n      );\n\n      //TODO: It may be wise to make unit static and forced, or atleast prepopulated --\n      remainingQuantityFields = (\n        <div>\n          <TextboxElement\n            name=\"quantity\"\n            label=\"Remaining Quantity\"\n            onUserInput={this.setFormData}\n            required={true}\n            value={this.state.formData.quantity}\n          />\n          <SelectElement\n            name=\"unitId\"\n            label=\"Unit\"\n            options={this.props.specimenUnits}\n            onUserInput={this.setFormData}\n            emptyOption={false}\n            required={true}\n            value={this.state.formData.unitId}\n          />\n        </div>\n      );\n    } else {\n      globalFields = (\n          <div>\n            <SearchableDropdown\n              name=\"pscid\"\n              label=\"PSCID\"\n              options={this.props.pSCIDs}\n              onUserInput={this.setFormData}\n              ref=\"pscid\"\n              required={true}\n              value={this.state.formData.pscid}\n              placeHolder='Search for a PSCID'\n            />\n            <SelectElement\n              name=\"visitLabel\"\n              label=\"Visit Label\"\n              options={this.state.visits}\n              onUserInput={this.setFormData}\n              ref=\"visitLabel\"\n              required={true}\n              value={this.state.formData.visitLabel}\n              disabled={this.state.formData.pscid ? false : true}\n            />\n          </div>\n      );\n    }\n\n    //TODO: {barcodeForms} should eventually be moved to be after {remainingQuantityFields}\n    return (\n      <FormElement\n        name=\"specimenForm\"\n        id='specimenForm'\n        onSubmit={this.handleSubmit}\n        ref=\"form\"\n      >\n        <div className='row'>\n          <div className=\"col-xs-9 col-xs-offset-1\">\n            {globalFields}\n            {remainingQuantityFields}\n          </div>\n        </div>\n        {barcodeForms}\n        <ButtonElement\n          label='Submit'\n          columnSize='col-sm-2 col-sm-offset-10'\n        />\n      </FormElement>\n    );\n  }\n\n/** *******************************************************************************\n *                      ******     Helper methods     *******\n *********************************************************************************/\n\n  /**\n   * Returns a valid name for the file to be specimened\n   *\n   * @param {string} pscid - PSCID selected from the dropdown\n   * @param {string} visitLabel - Visit label selected from the dropdown\n   * @param {string} instrument - Instrument selected from the dropdown\n   * @return {string} - Generated valid filename for the current selection\n   */\n//  getValidFileName(pscid, visitLabel, instrument) {\n//    var fileName = pscid + \"_\" + visitLabel;\n//    if (instrument) fileName += \"_\" + instrument;\n//\n//    return fileName;\n//  }\n\n\n  validateForm(formElement, value) {\n    let formErrors = this.state.formErrors;\n\n    //validate barcode regex\n    if (formElement === \"barcode\" && value !== \"\") {\n      if (!(/^hello/.test(this.state.formData.barcode))) {\n        formErrors.barcode = true;\n      } else {\n        formErrors.barcode = false;\n      }\n    }\n\n    //validate that quantity is a number and less than capacity\n    if (formElement === \"quantity\" && value !== \"\") {\n      if (isNaN(value) || (value > this.props.capacities[this.state.currentContainerType])) {\n        formErrors.quantity = true;\n      } else {\n        formErrors.quantity = false;\n      }\n    }\n\n    //validate datatypes and regex of generated type attributes\n    var specimenTypeFieldsObject = this.props.specimenTypeAttributes[this.state.currentSpecimenType];\n    var specimenTypeFields = Object.keys(specimenTypeFieldsObject).map((attribute) => {\n\n      let datatype = this.props.attributeDatatypes[specimenTypeFieldsObject[attribute]['datatypeId']].datatype;\n      if (datatype === \"number\") {\n        if (formElement === attribute) {\n          if (isNaN(value) && value !== \"\") {\n            formErrors[attribute] = true;\n          } else {\n            formErrors[attribute] = false;\n          }\n        }\n      }\n    })\n\n    this.setState({\n      formErrors: formErrors\n    });\n\n  }\n\n\n  /**\n   * Handle form submission\n   * @param {object} e - Form submission event\n   */\n  handleSubmit(e) {\n    e.preventDefault();\n\n    let formData = this.state.formData;\n    let barcodeFormList = this.state.barcodeFormList;\n    let formRefs = this.refs;\n    //let biobankFiles = this.state.Data.biobankFiles ? this.state.Data.biobankFiles : [];\n\n    // Validate the form\n    if (!this.isValidForm(formRefs, formData)) {\n      return;\n    }\n\n    this.specimenSubmit();\n  }\n\n  /*\n   * Uploads the file to the server\n   */\n  specimenSubmit() {\n    // Set form data and specimen the biobank file\n    let formData = this.state.formData;\n    let barcodeFormList = this.state.barcodeFormList;\n    formData['barcodeFormList'] = JSON.stringify(barcodeFormList);\n    let formObj = new FormData();\n    for (let key in formData) {\n      if (formData[key] !== \"\") {\n        formObj.append(key, formData[key]);\n      }\n    }\n\n    $.ajax({\n      type: 'POST',\n      url: this.props.action,\n      data: formObj,\n      cache: false,\n      contentType: false,\n      processData: false,\n      xhr: function() {\n        let xhr = new window.XMLHttpRequest();\n        return xhr;\n      }.bind(this),\n      success: function() {\n\n        this.props.refreshParent();\n        swal(\"Specimen Submission Successful!\", \"\", \"success\");\n        this.props.onSuccess();\n      }.bind(this),\n      error: function(err) {\n        console.error(err);\n        let msg = err.responseJSON ? err.responseJSON.message : \"Specimen error!\";\n        this.setState({\n          errorMessage: msg,\n        });\n        swal(msg, \"\", \"error\");\n      }.bind(this)\n    });\n  }\n\n  /**\n   * Validate the form\n   *\n   * @param {object} formRefs - Object containing references to React form elements\n   * @param {object} formData - Object containing form data inputed by user\n   * @return {boolean} - true if all required fields are filled, false otherwise\n   */\n  //TODO: check media for the basis for validation\n  isValidForm(formRefs, formData) {\n    var isValidForm = true;\n\n    var requiredFields = {\n      pscid: null,\n      visitLabel: null,\n    };\n\n    Object.keys(requiredFields).map(function(field) {\n      if (formData[field]) {\n        requiredFields[field] = formData[field];\n      } else if (formRefs[field]) {\n        formRefs[field].props.hasError = true;\n        isValidForm = false;\n      }\n    });\n    this.forceUpdate();\n\n    return isValidForm;\n  }\n\n  /**\n   * Set the form data based on state values of child elements/componenets\n   *\n   * @param {string} formElement - name of the selected element\n   * @param {string} value - selected value for corresponding form element\n   */\n  setFormData(formElement, value) {\n    // This lets the modal window know that there is formData\n    // and will cause a warning to be thrown of the modal window\n    // is exited\n    this.props.onChange instanceof Function && this.props.onChange();\n  \n    if (formElement === \"pscid\" && value !== \"\" && value !== undefined) {\n      this.state.visits = this.props.sessionData[this.props.pSCIDs[value]].visits;\n    }\n\n    var formData = this.state.formData;\n    formData[formElement] = value;\n\n    this.setState(\n      {formData},\n      this.setParentFormData()\n    );\n  }\n\n  setBarcodeFormData(barcodeFormData, barcodeKey) {\n    var formData = this.state.formData;\n    var barcodeFormList = this.state.barcodeFormList;\n    barcodeFormList[barcodeKey] = barcodeFormData;\n    formData['barcodeFormList'] = barcodeFormList;\n\n    this.setState(\n      {formData},\n      this.setParentFormData()\n    );\n  }\n\n  addBarcodeForm() {\n    let barcodeFormList = this.state.barcodeFormList;\n    let count = this.state.countBarcodeForms;\n    \n    barcodeFormList[count+1] = {}; \n\n    this.setState({\n      barcodeFormList: barcodeFormList,\n      countBarcodeForms: count + 1\n    });\n  }\n\n  copyBarcodeForm(key, multiplier) {\n    let count = this.state.countBarcodeForms;\n    let nextKey = count+1;\n    let barcodeFormList = this.state.barcodeFormList;\n\n    for (let i=1; i<=multiplier; i++) {\n      barcodeFormList[nextKey] = JSON.parse(JSON.stringify(barcodeFormList[key])); \n      delete barcodeFormList[nextKey].barcode;\n      nextKey++;\n    }\n\n    this.setState({\n      barcodeFormList: barcodeFormList,\n      countBarcodeForms: nextKey\n    });\n  }\n\n  removeBarcodeForm(key) {\n    let barcodeFormList = this.state.barcodeFormList;\n    delete barcodeFormList[key];\n\n    this.setState({\n      barcodeFormList: barcodeFormList\n    });\n  }\n\n  setParentFormData() {\n    if (this.props.setParentFormData) {\n      let formData = this.state.formData;\n      this.props.setParentFormData(formData);\n    }\n  }\n}\n\nBiobankSpecimenForm.propTypes = {\n  DataURL: React.PropTypes.string.isRequired,\n  action: React.PropTypes.string.isRequired,\n  barcode: React.PropTypes.string,\n  refreshTable: React.PropTypes.func\n};\n\nexport default BiobankSpecimenForm;\n\n\n\n// WEBPACK FOOTER //\n// ./modules/biobank/jsx/specimenForm.js","import SpecimenCollectionForm from './collectionForm'\n\n/**\n * Biobank Barcode Form\n *\n * Acts a subform for BiobankSpecimenForm\n *\n * @author Henri Rabalais\n * @version 1.0.0\n *\n **/\n\nclass SpecimenBarcodeForm extends React.Component {\n  constructor(props) {\n    super(props);\n \n    this.state = {\n      formData: {},\n      formErrors: {},\n      collapsed: true,\n      copyMultiplier: 1,\n    };\n   \n    this.setFormData = this.setFormData.bind(this);\n    this.setChildFormData = this.setChildFormData.bind(this);\n    this.setParentFormData = this.setParentFormData.bind(this);\n    this.toggleCollapse = this.toggleCollapse.bind(this);\n    this.setCopyMultiplier = this.setCopyMultiplier.bind(this);\n    this.copy = this.copy.bind(this);\n  }\n\n  componentDidMount() {\n    if (this.props.formData) {\n      let formData = this.props.formData;\n    \n      this.setState({\n        formData: formData\n      }); \n    }   \n  }\n\n  toggleCollapse() {\n    this.setState({collapsed: !this.state.collapsed});\n  }\n\n  setCopyMultiplier(e) {\n    let copyMultiplier = e.target.value;\n    \n    this.setState({\n      copyMultiplier: copyMultiplier\n    }); \n  }\n\n  copy() {\n    this.props.copyBarcodeForm(this.state.copyMultiplier);\n  }\n\n  render() {\n    let addBarcodeFormButton;\n    let addBarcodeFormText;\n    let copyBarcodeFormButton;\n    let copyBarcodeFormText;\n    if (this.props.addBarcodeForm) {\n      addBarcodeFormButton = (\n        <span className='action'>\n          <div\n            className='action-button add'\n            onClick={this.props.addBarcodeForm}\n          >\n          +\n          </div>\n        </span>\n      );\n\n      addBarcodeFormText = (\n        <span className='action-title'>\n          New Entry\n        </span>\n      );\n    }\n\t\n    if (this.props.copyBarcodeForm) {\n      copyBarcodeFormButton = (\n        <span className='action'>\n          <div\n            className='action-button add'\n            onClick={this.copy}\n          >\n            <span className='glyphicon glyphicon-duplicate'/>\n          </div>\n        </span>\n      );\n      copyBarcodeFormText = (\n        <span className='action-title'>\n          <input \n            className='form-control input-sm'\n            type='number'\n            min='1'\n            max='50'\n            style={{width: 50, display: 'inline'}}\n            onChange={this.setCopyMultiplier}\n            value={this.state.copyMultiplier}\n          />\n          Copies\n        </span>\n      );\n    }\n\n    let removeBarcodeFormButton;\n    if (this.props.removeBarcodeForm) {\n      const glyphStyle = {\n        color: '#DDDDDD',\n        marginLeft: 10,\n        cursor: 'pointer',\n        fontSize: 15\n      }\n\n      removeBarcodeFormButton = (\n        <span \n          className='glyphicon glyphicon-remove' \n          onClick={this.props.removeBarcodeForm}\n          style={glyphStyle}\n        />\n      );\n    }\n\n    return (\n      <FormElement\n        name='biobankBarcode'\n      >\n        <div className='row'>\n          <div className='col-xs-9 col-xs-offset-1'>\n            <div>   \n              <TextboxElement\n                name='barcode'\n                label={'Barcode ' + this.props.id}\n                onUserInput={this.setFormData}\n                ref='barcode'\n                required={true}\n                value={this.state.formData.barcode}\n              />\n            </div>\n          </div>\n          <div className='col-xs-1' style={{paddingLeft:0, marginTop:10}}>\n            <span \n              className= {this.state.collapsed ? 'glyphicon glyphicon-chevron-down' : 'glyphicon glyphicon-chevron-up'}\n              style={{cursor: 'pointer', fontSize:15, position:'relative', right:40}}\n              data-toggle='collapse' \n              data-target={'#item-' + this.props.id}\n              onClick={this.toggleCollapse}\n            />\n            {removeBarcodeFormButton}\n          </div>\n        </div>\n        <div className='row'>\n          <div className='col-xs-2'/>\n          <div className='col-xs-8'>\n            <div id={'item-' + this.props.id} className='collapse'>\n              <SpecimenCollectionForm\n                formData={this.props.formData}\n                setParentFormData={this.setChildFormData}\n                onChange={this.props.onChange}\n                specimenTypes={this.props.specimenTypes}\n                specimenTypeAttributes={this.props.specimenTypeAttributes}\n                attributeDatatypes={this.props.attributeDatatypes}\n                attributeOptions={this.props.attributeOptions}\n                containerTypesPrimary={this.props.containerTypesPrimary}\n                containersNonPrimary={this.props.containersNonPrimary}\n                containerDimensions={this.props.containerDimensions}\n                containerCoordinates={this.props.containerCoordinates}\n                specimenTypeUnits={this.props.specimenTypeUnits}\n                stati={this.props.stati}\n              />\n            </div>\n          </div>\n        </div>\n        <div className='row'>\n          <div className='col-xs-11'>\n            <div className='col-xs-4'/>\n            <div className='col-xs-3 action'>\n              {addBarcodeFormButton}\n              {addBarcodeFormText}\n            </div>\n            <div className='col-xs-3 action'>\n              {copyBarcodeFormButton}\n              {copyBarcodeFormText}\n            </div>\n          </div>\n        </div>\n      </FormElement>\n    );\n  }\n\n  /**\n   * Set the form data based on state values of child elements/componenets\n   *\n   * @param {string} formElement - name of the selected element\n   * @param {string} value - selected value for corresponding form element\n   */\n  setFormData(formElement, value) {\n    this.props.onChange instanceof Function && this.props.onChange();   \n\n    var formData = this.state.formData;\n    formData[formElement] = value;\n\n    this.setState(\n      {\n      formData: formData\n      },\n      this.setParentFormData\n    );\n  }\n\n  setChildFormData(collectionFormData) {\n    var formData = this.state.formData;\n    \n    for (let field in collectionFormData) {\n      formData[field] = collectionFormData[field]\n    }\n \n    this.setState(\n      {\n        formData: formData\n      },\n      this.setParentFormData\n    );\n  }\n\n  setParentFormData() {\n    this.props.setParentFormData(this.state.formData, this.props.barcodeKey);\n  }\n}\n\nSpecimenBarcodeForm.propTypes = {\n  id: React.PropTypes.string,\n  specimenTypes: React.PropTypes.object.isRequired,\n  containerTypesPrimary: React.PropTypes.object.isRequired,\n  specimenTypeAttributes: React.PropTypes.object.isRequired,\n  attributeDatatypes: React.PropTypes.object.isRequired,\n  capacities: React.PropTypes.object.isRequired,\n}\n\nexport default SpecimenBarcodeForm;\n\n\n\n// WEBPACK FOOTER //\n// ./modules/biobank/jsx/barcodeForm.js","import ContainerParentForm from './containerParentForm'\n\n\n/**\n * Biobank Specimen Form\n *\n * Acts a subform for BiobankCollectionForm\n *\n * @author Henri Rabalais\n * @version 1.0.0\n *\n **/\n\nclass SpecimenCollectionForm extends React.Component {\n  constructor(props) {\n    super(props);\n    \n    this.state = {\n      formData: {data:{}},\n      currentSpecimenType: this.props.edit ? this.props.specimenType : null,\n      currentContainerType: this.props.edit ? this.props.containerType : null,\n    };\n\n    this.setFormData = this.setFormData.bind(this);\n    this.setSpecimenTypeFieldFormData = this.setSpecimenTypeFieldFormData.bind(this);\n    this.setParentFormData = this.setParentFormData.bind(this);\n    this.setContainerParentFormData = this.setContainerParentFormData.bind(this);\n    this.getSpecimenTypeFields = this.getSpecimenTypeFields.bind(this);\n    this.handleUpdate = this.handleUpdate.bind(this);\n    this.updateSpecimen = this.updateSpecimen.bind(this);\n  }\n\n  componentDidMount() {\n    let formData = this.state.formData;\n\n    if (this.props.formData) {\n      formData = this.props.formData;\n      let currentSpecimenType = this.state.currentSpecimenType;\n      \n      this.setState({\n        currentSpecimenType: formData.specimenType\n      });\n    }\n\n    if (this.props.edit) {\n      formData['specimenId']    = this.props.specimenId;\n      formData['containerId']   = this.props.containerId;\n      formData['specimenType']  = this.props.specimenType;\n      formData['containerType'] = this.props.containerType;\n      formData['quantity']      = this.props.collection.quantity;\n      formData['unitId']        = this.props.collection.unitId;\n      formData['date']          = this.props.collection.date;\n      formData['time']          = this.props.collection.time;\n      formData['comments']      = this.props.collection.comments;\n\n      var specimenTypeFieldsObject = this.props.specimenTypeAttributes[this.state.currentSpecimenType];\n      if (specimenTypeFieldsObject) {\n        var specimenTypeFields = Object.keys(specimenTypeFieldsObject).map((attribute) => {\n          formData.data[attribute] = this.props.collection.data[attribute];\n        });\n      }\n    }\n\n    this.setState({\n      formData: formData\n    });\n  }\n\n  mapFormOptions(rawObject, targetAttribute) {\n    let data = {};\n    for (let id in rawObject) {\n      data[id] = rawObject[id][targetAttribute];\n    }\n\n    return data;\n  }\n\n  render() {\n    var containerParentForm;\n    if (!this.props.edit) {\n      containerParentForm = (\n        <ContainerParentForm\n          setParentFormData={this.setContainerParentFormData}\n          containersNonPrimary={this.props.containersNonPrimary}\n          containerDimensions={this.props.containerDimensions}\n          containerCoordinates={this.props.containerCoordinates}\n        />\n      );\n    }\n\n    var updateButton;\n    if (this.props.edit) {\n      updateButton = (\n        <ButtonElement label=\"Update\"/>\n      );\n    }\n\n    //This block of code should potentially be moved to setFormData();\n    //Consider Refactoring...\n    var specimenTypeUnits = {};\n    if (this.state.currentSpecimenType) {\n     \n      //This modifies the selections for unit drop down based on the chosend specimen type \n      for (var id in this.props.specimenTypeUnits[this.state.currentSpecimenType]) {\n        specimenTypeUnits[id] = this.props.specimenTypeUnits[this.state.currentSpecimenType][id].unit;\n      }\n\n      var specimenTypeFieldsObject = this.props.specimenTypeAttributes[this.state.currentSpecimenType];\n      if (specimenTypeFieldsObject) {\n        var specimenTypeFields = this.getSpecimenTypeFields(specimenTypeFieldsObject);\n      }\n    }\n\n    var specimenFields;\n    if (this.state.currentSpecimenType) {\n      specimenFields = (\n        <div>\n          <SelectElement\n            name=\"containerType\"\n            label=\"Container Type\"\n            options={this.props.containerTypesPrimary}\n            onUserInput={this.setFormData}\n            ref=\"containerType\"\n            required={true}\n            value={this.state.formData.containerType}\n          />\n          <TextboxElement\n            name=\"quantity\"\n            label=\"Quantity\"\n            onUserInput={this.setFormData}\n            ref=\"quantity\"\n            required={true}\n            value={this.state.formData.quantity}\n          />\n          <SelectElement\n            name=\"unitId\"\n            label=\"Unit\"\n            options={specimenTypeUnits}\n            onUserInput={this.setFormData}\n            required={true}\n            value={this.state.formData.unitId}\n          />\n          {specimenTypeFields}\n          <DateElement\n            name=\"date\"\n            label=\"Date\"\n            minYear=\"2000\"\n            maxYear=\"2018\"\n            onUserInput={this.setFormData}\n            required={true}\n            value={this.state.formData.date}\n          />\n          <TimeElement\n            name=\"time\"\n            label=\"Time\"\n            onUserInput={this.setFormData}\n            required={true}\n            value={this.state.formData.time}\n          />\n          <TextareaElement\n            name=\"comments\"\n            label=\"Comments\"\n            onUserInput={this.setFormData}\n            ref=\"comments\"\n            value={this.state.formData.comments}\n          />\n          {containerParentForm}\n        </div>\n      );\n    }\n\n    return (\n      <FormElement\n        name=\"biobankSpecimen\"\n        onSubmit={this.handleUpdate}\n        ref=\"form\"\n      >\n        <SelectElement\n          name=\"specimenType\"\n          label=\"Specimen Type\"\n          options={this.props.specimenTypes}\n          onUserInput={this.setFormData}\n          ref=\"specimenType\"\n          required={true}\n          value={this.state.formData.specimenType}\n        />\n        {specimenFields}\n        {updateButton}\n      </FormElement>\n    );\n  }\n\n  /**\n   * Set the form data based on state values of child elements/componenets\n   *\n   * @param {string} formElement - name of the selected element\n   * @param {string} value - selected value for corresponding form element\n   */\n  setFormData(formElement, value) {\n\n    this.props.onChange instanceof Function && this.props.onChange();\n\n    let formData = this.state.formData;\n    formData[formElement] = value;\n\n    if (formElement === \"specimenType\" && value !== \"\") {\n      //This throws a warning if the specimen type is changed because of the cascading effects this \n      //would cause.\n      if (this.props.edit) {\n        swal({\n          title: \"Warning\",\n          text: \"Changing the specimen type will result in the loss of any preparation or anaylsis \"+\n            \"data for this specimen. You will also need to manually change the specimen type of any \"+\n            \"aliquots derived from this specimen. Proceed with caution.\",\n          type: \"warning\",\n          showCancelButton: true,\n          confirmButtonText: 'Cancel Change',\n          cancelButtonText: 'Proceed',\n        }, \n        function(isConfirm) {\n          if (isConfirm) {\n            this.props.toggleEdit();\n          } else {\n          }\n        }.bind(this));\n      }\n\n      //This is to eliminate the values for the specimen type fields\n      //TODO: This could potentially be improved later to retain the values\n      //for the fields that are common across specimen types\n      formData.data = {}; \n      this.setState({\n        currentSpecimenType: value\n      });\n    }\n\n    if (formElement === \"containerType\" && value !== \"\") {\n      this.setState({\n        currentContainerType: value\n      });\n    }\n\n    this.setState(\n      {\n        formData: formData\n      },\n      this.setParentFormData\n    );\n  }\n\n  setSpecimenTypeFieldFormData(formElement, value) {\n    let formData = this.state.formData;\n    formData.data[formElement] = value;\n\n    this.setState(\n      {\n        formData: formData\n      },\n      this.setParentFormData\n    );\n  \n  }\n\n  setContainerParentFormData(containerParentFormData) {\n    var formData = this.state.formData;\n\n    for (let field in containerParentFormData) {\n      formData[field] = containerParentFormData[field];\n    }\n\n    this.setState(\n      {\n        formData: formData\n      },\n      this.setParentFormData\n    );\n  }\n\n  setParentFormData() {\n    // TODO: This should potentially be changed to if (this.props.setParentFormData)\n    if (!this.props.edit) {\n      var formData = this.state.formData;\n      this.props.setParentFormData(formData);\n    }\n  }\n\n  // TODO: decouple this code from the preaprationForm by making it a React Component\n  // This generates all the form fields for a given specimen type\n  getSpecimenTypeFields(fieldsObject) {\n    var specimenTypeFields = Object.keys(fieldsObject).map((attribute) => {\n      let datatype = this.props.attributeDatatypes[fieldsObject[attribute]['datatypeId']].datatype;\n      if (datatype === \"text\" || datatype === \"number\") {\n\n        if (fieldsObject[attribute]['refTableId'] == null) {\n          return (\n            <TextboxElement\n              name={attribute}\n              label={fieldsObject[attribute]['name']}\n              onUserInput={this.setSpecimenTypeFieldFormData}\n              ref={attribute}\n              required={fieldsObject[attribute]['required']}\n              value={this.state.formData.data[attribute]}\n            />\n          );\n        }\n\n        if (fieldsObject[attribute]['refTableId'] !== null) {\n          return (\n            <SelectElement\n              name={attribute}\n              label={fieldsObject[attribute]['name']}\n              options={this.props.attributeOptions[fieldsObject[attribute]['refTableId']]}\n              onUserInput={this.setSpecimenTypeFieldFormData}\n              ref={attribute}\n              required={fieldsObject[attribute]['required']}\n              value={this.state.formData.data[attribute]}\n            />\n          );\n        }\n      }\n\n      if (datatype === \"datetime\") {\n        return (\n          <DateElement\n            name={attribute}\n            label={fieldsObject[attribute]['name']}\n            onUserInput={this.setSpecimenTypeFieldFormData}\n            ref={attribute}\n            required={fieldsObject[attribute]['required']}\n            value={this.state.formData.data[attribute]}\n          />\n        );\n      }\n\n      if (datatype === \"boolean\") {\n        // There is currently no CheckboxElement or RadioElement in loris/jsx/Form.js and therefore\n        // this is not possible.     \n      }\n    })\n\n    return specimenTypeFields;\n  }\n\n  handleUpdate(e) {\n    // TODO: Validate Form Here\n\n    this.updateSpecimen();\n  }\n\n  updateSpecimen() {\n    let formData = this.state.formData;\n    formData['data'] = JSON.stringify(formData['data']);\n\n    let formObj = new FormData();\n    for (let key in formData) {\n      if (formData[key] !== \"\") {\n        formObj.append(key, formData[key]);\n      }\n    }\n\n    $.ajax({\n      type: 'POST',\n      url: this.props.action,\n      data: formObj,\n      cache: false,\n      contentType: false,\n      processData: false,\n      processData: false,\n      xhr: function() {\n        let xhr = new window.XMLHttpRequest();\n        return xhr;\n      }.bind(this),\n      success: function() {\n        //Update Parent Specimen Page Here\n        formData.data = JSON.parse(formData.data);\n        this.props.refreshParent();\n      }.bind(this),\n      error: function(err) {\n        console.error(err);\n        let msg = err.responseJSON ? err.responseJSON.message : \"Specimen error!\";\n        this.setState({\n          errorMessage: msg,\n        });\n        swal(msg, \"\", \"error\");\n      }.bind(this)\n    });\n  }\n}\n\nSpecimenCollectionForm.propTypes = {\n  setParentFormData: React.PropTypes.func,\n  specimenTypes: React.PropTypes.object.isRequired,\n  containerTypesPrimary: React.PropTypes.object.isRequired,\n  specimenTypeAttributes: React.PropTypes.object.isRequired,\n  attributeDatatypes: React.PropTypes.object.isRequired,\n  capacities: React.PropTypes.object.isRequired,\n}\n\nexport default SpecimenCollectionForm;\n\n\n\n\n// WEBPACK FOOTER //\n// ./modules/biobank/jsx/collectionForm.js","/**\n * Biobank Container Parent Form\n *\n * Fetches data from Loris backend and displays a form allowing\n * to specimen a biobank file attached to a specific instrument\n *\n * @author Henri Rabalais\n * @version 1.0.0\n *\n * */\n\nimport ContainerDisplay from './containerDisplay.js';\n\nclass ContainerParentForm extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      formData: {},\n      formErrors: {},\n      errorMessage: null\n    };\n\n    this.mapFormOptions = this.mapFormOptions.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.setFormData = this.setFormData.bind(this);\n  }\n\n  componentDidMount() {\n    // This is where we will pass a parentContainerId if it already exists\n    // These are simply to provide 'Defaults' to the page. I am not sure that in\n    // if they are entirely necessary.\n    if (this.props.container) {\n    let formData = this.state.formData;\n    formData['container'] = JSON.stringify(this.props.container);\n    formData['parentContainerId'] = this.props.container.parentContainerId;\n\n    this.setState({\n      formData: formData\n    });\n    }\n  }\n\n  //map options for forms\n  mapFormOptions(rawObject, targetAttribute) {\n    var data = {}; \n    for (var id in rawObject) {\n      data[id] = rawObject[id][targetAttribute];\n    }   \n\n    return data;\n  }\n\n  render() {\n\n    var parentContainerField;\n    var coordinateField;\n    var containerDisplay;\n    let containerBarcodesNonPrimary = this.mapFormOptions(this.props.containersNonPrimary, 'barcode');\n\n    parentContainerField = ( \n      <SelectElement\n        name=\"parentContainerId\"\n        label=\"Parent Container Barcode\"\n        options={containerBarcodesNonPrimary}\n        onUserInput={this.setFormData}\n        ref=\"parentContainerId\"\n        required={true}\n        value={this.state.formData.parentContainerId}\n      />  \n    );  \n\n    // THIS IS VERY POORLY DONE AND NEEDS REFACTORING\n    // this should be a 'currentParentContainerId' state\n    if (this.state.formData.parentContainerId) {\n\n      let dimensionId = this.props.containersNonPrimary[this.state.formData.parentContainerId].dimensionId;\n      \n\n      if (dimensionId) {\n        //This will eventually become unecessary\n        ///////////////////////////////////////////////////\n        let dimensions = this.props.containerDimensions[dimensionId];\n\n        // Total coordinates is determined by the product of the dimensions\n        let coordinatesTotal = 1;\n        for (let dimension in dimensions) {\n          coordinatesTotal = coordinatesTotal * dimensions[dimension];\n        }   \n\n        // Mapping of options for the SelectElement\n        let coordinates = {}; \n        for (let i = 1; i <= coordinatesTotal; i++) {\n\n          // If the coordinate is already taken, skip it.\n          // this doubling of if statements seems unnecessary\n          if (this.props.containerCoordinates[this.state.formData.parentContainerId]) {\n            if (this.props.containerCoordinates[this.state.formData.parentContainerId][i]) {\n              continue; \n            }\n          }\n\n          coordinates[i] = i;\n        }   \n\n       // coordinateField = ( \n       //   <SelectElement\n       //     name=\"coordinate\"\n       //     label=\"Coordinate\"\n       //     options={coordinates}\n       //     onUserInput={this.setFormData}\n       //     ref=\"coordinate\"\n       //     required={false}\n       //     value={this.state.formData.coordinate}\n       //   />  \n       // );  \n       ///////////////////////////////////////////////////\n\n        containerDisplay = (\n          <ContainerDisplay\n            dimensions = {this.props.containerDimensions[this.props.containersNonPrimary[this.state.formData.parentContainerId].dimensionId]}\n            coordinates = {this.props.containerCoordinates[this.state.formData.parentContainerId]}\n            containerTypes = {this.props.containerTypes}\n            containerStati = {this.props.containerStati} \n            select = {true}\n            selectedCoordinate = {this.state.formData.coordinate}\n            updateParent = {this.setFormData}\n          />\n        );\n      }\n    }   \n\n    var updateButton;\n    if (this.props.container) {\n      updateButton = (\n        <ButtonElement label=\"Update\"/>\n      );\n    }\n\n    return (\n      <FormElement\n        onSubmit={this.handleSubmit}\n      >\n        {parentContainerField}\n        {coordinateField}\n        {containerDisplay}\n        <br/>\n        {updateButton}\n      </FormElement>\n    );\n  }\n\n/** *******************************************************************************\n *                      ******     Helper methods     *******\n *********************************************************************************/\n\n  // Validation functions will go here later...\n\n  /*\n   * Uploads the file to the server\n   */\n  handleSubmit() {\n    // Set form data and specimen the biobank file\n    let formData = this.state.formData;\n    let formObj = new FormData();\n    for (let key in formData) {\n      if(formData[key] !== \"\") {\n        formObj.append(key, formData[key]);\n      }\n    }\n\n    $.ajax({\n      type: 'POST',\n      url: this.props.action,\n      data: formObj,\n      cache: false,\n      contentType: false,\n      processData: false,\n      xhr: function() {\n        let xhr = new window.XMLHttpRequest();\n        return xhr;\n      }.bind(this),\n      success: function() {\n        this.props.refreshParent();\n        swal(\"Parent Container Update Successful!\", \"\", \"success\");\n        this.props.onSuccess();\n      }.bind(this),\n      error: function(err) {\n        console.error(err);\n        let msg = err.responseJSON ? err.responseJSON.message : \"Specimen error!\";\n        this.setState({\n          errorMessage: msg,\n        });\n        swal(msg, '', \"error\");\n      }.bind(this)\n    });\n  }\n\n  /**\n   * Set the form data based on state values of child elements/componenets\n   *\n   * @param {string} formElement - name of the selected element\n   * @param {string} value - selected value for corresponding form element\n   */\n  setFormData(formElement, value) {\n\n    var formData = this.state.formData;\n    formData[formElement] = value;\n\n    if (formElement === 'parentContainerId') {\n      formData['coordinate'] = \"\";\n    }\n\n    this.setState(\n      {\n        formData: formData\n      },\n      this.setParentFormData\n    );\n  }\n\n  setParentFormData() {\n    if (!this.props.container) {\n      var formData = this.state.formData;\n      this.props.setParentFormData(formData);\n    }\n  } \n}\n\nContainerParentForm.propTypes = {\n  DataURL: React.PropTypes.string,\n  action: React.PropTypes.string,\n  barcode: React.PropTypes.string,\n  refreshTable: React.PropTypes.func,\n  onSuccess: React.PropTypes.func\n};\n\nexport default ContainerParentForm;\n\n\n\n// WEBPACK FOOTER //\n// ./modules/biobank/jsx/containerParentForm.js","/**\n * ContainerDisplay\n *\n * @author Henri Rabalais\n * @version 1.0.0\n *\n **/\n\nclass ContainerDisplay extends React.Component {\n  constructor() {\n    super();\n   \n    this.redirectURL = this.redirectURL.bind(this);\n    this.drag = this.drag.bind(this);\n    this.drop = this.drop.bind(this);\n  }\n\n  componentDidMount() {\n    $('[data-toggle=\"tooltip\"]').tooltip();\n  }\n\n  componenDidUpdate() {\n    $('[data-toggle=\"tooltip\"]').tooltip();\n  }\n\n  redirectURL(e) {\n    let coordinate = e.target.id;\n    if (this.props.coordinates[coordinate]) {\n      let type = this.props.types[\n        this.props.children[this.props.coordinates[coordinate]].typeId\n      ].primary ? 'specimen' : 'container';\n      let url = loris.BaseURL+'/biobank/'+type+'/?barcode='+\n        this.props.children[this.props.coordinates[coordinate]].barcode;\n\n      window.location.href = url;\n    }\n  }\n\n  allowDrop(e) {\n      e.preventDefault();\n  }\n  \n  drag(e) {\n      let container = JSON.stringify(\n        this.props.children[this.props.coordinates[e.target.id]]\n      );\n      e.dataTransfer.setData(\"text/plain\", container);\n  }\n  \n  drop(e) {\n    e.preventDefault();\n\n    let container = e.dataTransfer.getData(\"text/plain\");\n    let newCoordinate = parseInt(e.target.id);\n    \n    this.props.updateParent(container, newCoordinate);\n  }\n\n  render() {\n  // This is eventually need to be reworked and cleaned up\n  let column = [];\n  let row = [];\n  let display;\n  var coordinate = 1;\n  if (this.props.dimensions) {\n    for (let y=0; y < this.props.dimensions.y; y++) {\n      column = [];\n      for (let x=1; x <= this.props.dimensions.x; x++) {\n        \n        let nodeWidth = (500/this.props.dimensions.x) - (500/this.props.dimensions.x * 0.08);\n        let nodeStyle = {width: nodeWidth}\n        let nodeClass = 'node';\n        let tooltipTitle = null;\n        let dataHtml = 'false';\n        let dataToggle = null;\n        let dataPlacement = null;\n        let draggable = 'false';\n        let onDragStart = null;\n        let onDragOver = this.allowDrop;\n        let onDrop = this.drop;\n        let onClick = null;\n\n        if (!this.props.select) {\n          // This double if statement doesn't sound great\n          if (this.props.coordinates) {\n            if (this.props.coordinates[coordinate]) {\n              nodeClass = 'node occupied';\n              dataHtml = 'true';\n              dataToggle = 'tooltip';\n              dataPlacement = 'top';\n              tooltipTitle = \n            '<h5>' + this.props.children[this.props.coordinates[coordinate]].barcode + '</h5>' + \n            '<h5>' + this.props.containerTypes[this.props.children[this.props.coordinates[coordinate]].typeId].label + '</h5>' + \n            '<h5>' + this.props.containerStati[this.props.children[this.props.coordinates[coordinate]].statusId].status + '</h5>';\n              draggable = 'true';\n              onDragStart = this.drag;\n              onDragOver = null;\n              onDrop = null;\n              onClick = this.redirectURL;\n            }\n          }\n        }\n      \n        if (this.props.select) {\n          if (coordinate == this.props.selectedCoordinate) {\n            nodeClass = 'node occupied';\n          }\n          else if (!this.props.coordinates) {\n            nodeClass = 'node available';\n            onClick = (e) => this.props.updateParent('coordinate', e.target.id);\n          } \n          else if (this.props.coordinates) {\n            if (!this.props.coordinates[coordinate]) {\n              nodeClass = 'node available';\n\t\t\t  onClick = (e) => this.props.updateParent('coordinate', e.target.id);\n            }\n            else if (this.props.coordinates[coordinate]){\n            // --- This is currently not working ---\n            //  dataHtml = 'true';\n            //  dataToggle = 'tooltip';\n            //  dataPlacement = 'top';\n            //  tooltipTitle = \n            //'<h5>' + this.props.children[this.props.coordinates[coordinate]].barcode + '</h5>' + \n            //'<h5>' + this.props.containerTypes[this.props.children[this.props.coordinates[coordinate]].typeId].label + '</h5>' + \n            //'<h5>' + this.props.containerStati[this.props.children[this.props.coordinates[coordinate]].statusId].status + '</h5>';\n            }\n          }\n        }\n\n        let coordinateDisplay;\n        if (true) {\n          coordinateDisplay = x + (this.props.dimensions.x * y);\n        } else if (false) {\n          coordinateDisplay = String.fromCharCode(65+y)+''+x;\n        }\n\n        column.push(\n          <div\n            id={coordinate}\n            className={nodeClass}\n            data-html={dataHtml}\n            data-toggle={dataToggle}\n            data-placement={dataPlacement}\n            data-original-title={tooltipTitle}\n            style={nodeStyle}\n            onClick={onClick}\n            draggable={draggable}\n            onDragStart={onDragStart}\n            onDragOver={onDragOver}\n            onDrop={onDrop}\n          >\n            {coordinateDisplay}\n          </div>\n        );\n\n        coordinate++;\n      }\n\n      let rowHeight = (500/this.props.dimensions.y) - (500/this.props.dimensions.y * 0.08);\n      let rowMargin = (500/this.props.dimensions.y * 0.04);\n      let rowStyle = {\n        height: rowHeight,\n      }\n      \n      row.push(\n        <div\n          className='row'\n          style={rowStyle} \n        >\n          {column}\n        </div>\n      )\n    }\n    \n    display = row;\n  }\n \n    return (\n      <div className='display'>\n        {display}\n      </div>\n    );\n  }\n}\n\nContainerDisplay.propTypes = {\n}\n\nexport default ContainerDisplay;\n\n\n\n// WEBPACK FOOTER //\n// ./modules/biobank/jsx/containerDisplay.js","import SpecimenBarcodeForm from './barcodeForm';\nimport BiobankSpecimenForm from './specimenForm';\nimport SpecimenPreparationForm from './preparationForm';\n\n/**\n * Biobank Collection Form\n *\n * Fetches data from Loris backend and displays a form allowing\n * to specimen a biobank file attached to a specific instrument\n *\n * @author Henri Rabalais\n * @version 1.0.0\n *\n **/\nclass PoolSpecimenForm extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      formData: {},\n      barcodeList: {},\n      errorMessage: null,\n      formErrors: {},\n      barcodeCount: 2,\n      preparation: false,\n      step: 1\n    };\n\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.validateForm = this.validateForm.bind(this);\n    this.setFormData = this.setFormData.bind(this);\n    this.setPreparationFormData = this.setPreparationFormData.bind(this);\n    this.setSpecimenFormData = this.setSpecimenFormData.bind(this);\n    this.submitForm = this.submitForm.bind(this);\n    this.mapFormOptions = this.mapFormOptions.bind(this);\n    this.setBarcodeCount = this.setBarcodeCount.bind(this);\n    this.next = this.next.bind(this);\n    this.previous = this.previous.bind(this);\n    this.addPreparation = this.addPreparation.bind(this);\n    this.removePreparation = this.removePreparation.bind(this);\n    this.validate = this.validate.bind(this);\n    this.formSwitch = this.formSwitch.bind(this);\n    this.preparationSwitch = this.preparationSwitch.bind(this);\n    this.runAjax = this.runAjax.bind(this);\n  }\n\n  //TODO: map options for forms - this is used frequently and may need to be moved to a more global place\n  mapFormOptions(originalObject, targetAttribute) {\n    let mappedObject = {}; \n    for (let i in originalObject) {\n      mappedObject[i] = originalObject[i][targetAttribute];\n    }   \n\n    return mappedObject;\n  }\n\n  next() {\n    this.validate().then(\n      data => {\n        this.setState({\n          poolData: data,\n          step: this.state.step+1\n        });\n      }, \n      error => {\n        swal(\"Oops!\", error.responseText, \"error\");\n      }\n    );\n  }\n\n  previous() {\n    this.setState({\n      step: this.state.step-1\n    });\n  }\n\n  validate() {\n    return this.runAjax(this.props.specimenRequest, {barcodeList: this.state.barcodeList});\n  }\n\n  runAjax(url, inputData) {\n    return new Promise((resolve, reject) => {\n      $.ajax(url, {\n        method: \"GET\",\n        dataType: 'json',\n        data: inputData,\n        success: function(data) {\n          resolve(data);\n        }.bind(this),\n        error: function(error, textStatus, errorThrown) {\n          reject(error);\n          console.error(error);\n        }   \n      });  \n    })\n  }\n\n  setBarcodeCount(field, value) {\n    let barcodeCount = value;\n    let barcodeList = this.state.barcodeList;\n    for (let barcode in barcodeList) {\n      if (barcode > barcodeCount) {\n        delete barcodeList[barcode];\n      }\n    }\n\n    this.setState({barcodeCount, barcodeList});\n  }\n\n  formSwitch(inputForm, specimenForm) {\n    switch(this.state.step) {\n      case 1:\n        return inputForm;\n      case 2:\n        return specimenForm;\n    }\n  }\n\n  preparationSwitch(preparationButton, preparationForm) {\n    switch(this.state.preparation) {\n      case false:\n        return preparationButton;\n      case true:\n        return preparationForm;\n    }\n  }\n\n  addPreparation() {\n    this.validate().then(\n      data => {\n        this.setState({\n          poolData: data,\n          preparation: true\n        });\n      },\n      error => {\n        swal('Oh no!', error.responseText, 'error');\n      }\n    );\n  }\n\n  removePreparation() {\n    let formData = this.state.formData;\n    //TODO: is it better to set it to empty, or delete it?\n    formData.preparationForm = {};\n    this.setState({\n      preparation: false,\n      formData\n    });\n  }\n\n  render() {\n    //Generates barcodes\n    let barcodes = [];\n    for (let i=1; i<=this.state.barcodeCount; i++) {\n      barcodes.push(\n        <TextboxElement\n          name={i}\n          label={'Barcode ' + i}\n          onUserInput={this.setFormData}\n          required={true}\n          value={this.state.barcodeList[i]}\n          errorMessage={this.state.formErrors[i]}\n        />\n      )\n    }\n    \n    let preparationButton = ( \n      <div className='row'>\n        <div className='col-xs-4'/>\n        <div className='col-xs 4 action'>\n            <span className='action'>\n            <div \n              className='action-button add'\n              onClick={this.addPreparation}\n            >\n              +\n            </div>\n            </span>\n            <div className='action-title'>\n              Add Preparation\n            </div>\n        </div>\n      </div>\n    );\n\n    let preparationForm;\n    if (this.state.poolData) {\n\n      const specimenProtocolAttributes = this.props.specimenProtocolAttributes[this.state.poolData.typeId]\n \n      let specimenProtocols = {};\n      for (let id in specimenProtocolAttributes) {\n        specimenProtocols[id] = this.props.specimenProtocols[id];\n      }\n      specimenProtocols = this.mapFormOptions(specimenProtocols, 'protocol');\n\n      preparationForm = (\n        <div className='row'>\n          <div className='col-sm-9 col-sm-offset-1'>\n            <SpecimenPreparationForm\n              formData={this.state.formData.preparationForm}\n              specimenProtocols={specimenProtocols}\n              specimenProtocolAttributes={specimenProtocolAttributes}\n              attributeDatatypes={this.props.attributeDatatypes}\n              attributeOptions={this.props.attributeOptions}\n              setParentFormData={this.setPreparationFormData}\n              insertAction={`${loris.BaseURL}/biobank/ajax/submitData.php?action=insertSpecimenPreparation`}\n            />\n            <a className='pull-right' style={{cursor:'pointer'}} onClick={this.removePreparation}>Cancel Preparation</a>\n          </div>\n        </div>\n      );\n    }\n\n    let inputForm = (\n      <div>\n        <div className='row'>\n          <div className='col-sm-9 col-sm-offset-1'>\n            <StaticElement\n              label='Pooling Note'\n              text='Select or Scan the specimens to be pooled. Please ensure that they\n                    are the same type, and share the same PSCID and Visit Label'\n            />\n            <NumericElement\n              label='№ of Specimens'\n              min='2'\n              max='100'\n              value={this.state.barcodeCount}\n              onUserInput={this.setBarcodeCount}\n            />\n            {barcodes}\n          </div>\n        </div>\n        {this.preparationSwitch(preparationButton, preparationForm)}\n        <div className='col-sm-3 col-xs-offset-9 action'>\n          <div className='action-title'>\n            Next\n          </div>\n          <span className='action'>\n            <div \n              className='action-button update'\n              onClick={this.next}\n            >\n              <span className='glyphicon glyphicon-chevron-right'/>\n            </div>\n          </span>\n        </div>\n      </div>\n    );\n\n    //TODO: Things here need to be in the proper order!!!\n    let specimenForm;\n    if (this.state.poolData) {\n\n      // This is to provide the options for the output specimens\n      let specimenTypes = {};\n      if (this.state.poolData.typeId) {\n        specimenTypes[this.state.poolData.typeId] = this.props.specimenTypes[this.state.poolData.typeId];\n      }\n  \n      let pscid = this.props.pSCIDs[this.state.poolData.candidateId];\n      let visit = this.props.sessionData[pscid].visits[this.state.poolData.sessionId];\n\n      let barcodesArray = Object.values(this.state.barcodeList); \n      let barcodesString = barcodesArray.join(', ');  \n\n      // TODO: rather than all specimen units this should really be specific to the\n      // type\n      let specimenUnits = this.mapFormOptions(this.props.specimenUnits, 'unit');\n\n      specimenForm = (\n        <div className='row'>\n          <div className='col-xs-12'>\n            <BiobankSpecimenForm\n              formData={this.state.formData.specimenForm}\n              candidateId={this.state.poolData.candidateId}\n              pscid={pscid}\n              sessionId={this.state.poolData.sessionId}\n              visit={visit}\n              parentSpecimenBarcodes={barcodesString}\n              parentSpecimenIds={this.state.poolData.specimenIds}\n              specimenTypes={specimenTypes}\n              specimenTypeUnits={this.props.specimenTypeUnits}\n              specimenUnits={specimenUnits}\n              containerTypesPrimary={this.props.containerTypesPrimary}\n              containersNonPrimary={this.props.containersNonPrimary}\n              specimenTypeAttributes={this.props.specimenTypeAttributes}\n              attributeDatatypes={this.props.attributeDatatypes}\n              attributeOptions={this.props.attributeOptions}\n              capacities={this.props.capacities}\n              containerDimensions={this.props.containerDimensions}\n              containerCoordinates={this.props.containerCoordinates}\n              setParentFormData={this.setSpecimenFormData}\n              action={`${loris.BaseURL}/biobank/ajax/submitData.php?action=submitSpecimen`}\n              refreshParent={this.props.refreshParent}\n            />\n            <ButtonElement\n              label='Submit'\n            />\n          </div>\n          <div className='col-sm-3 col-xs-offset-2 action'>\n            <span className='action'>\n              <div \n                className='action-button update'\n                onClick={this.previous}\n              >\n                <span className='glyphicon glyphicon-chevron-left'/>\n              </div>\n            </span>\n            <div className='action-title'>\n              Previous\n            </div>\n          </div>\n        </div>\n      );\n    }\n\n    return (\n      <FormElement\n        name=\"poolSpecimenForm\"\n        id='poolSpecimenForm'\n        onSubmit={this.handleSubmit}\n        ref=\"form\"\n      >\n        {this.formSwitch(inputForm, specimenForm)}\n      </FormElement>\n    );\n  }\n\n/** *******************************************************************************\n *                      ******     Helper methods     *******\n *********************************************************************************/\n\n\n  validateForm(formElement, value) {\n    let formErrors = this.state.formErrors;\n\n    //validate barcode regex\n    if (formElement === \"barcode\" && value !== \"\") {\n      if (!(/^hello/.test(this.state.formData.barcode))) {\n        formErrors.barcode = true;\n      } else {\n        formErrors.barcode = false;\n      }\n    }\n\n    //validate that quantity is a number and less than capacity\n    if (formElement === \"quantity\" && value !== \"\") {\n      if (isNaN(value) || (value > this.props.capacities[this.state.currentContainerType])) {\n        formErrors.quantity = true;\n      } else {\n        formErrors.quantity = false;\n      }\n    }\n\n    //validate datatypes and regex of generated type attributes\n    let specimenTypeFieldsObject = this.props.specimenTypeAttributes[this.state.currentSpecimenType];\n    let specimenTypeFields = Object.keys(specimenTypeFieldsObject).map((attribute) => {\n\n      let datatype = this.props.attributeDatatypes[specimenTypeFieldsObject[attribute]['datatypeId']].datatype;\n      if (datatype === \"number\") {\n        if (formElement === attribute) {\n          if (isNaN(value) && value !== \"\") {\n            formErrors[attribute] = true;\n          } else {\n            formErrors[attribute] = false;\n          }\n        }\n      }\n    })\n\n    this.setState({\n      formErrors: formErrors\n    });\n  }\n\n\n  /**\n   * Handle form submission\n   * @param {object} e - Form submission event\n   */\n  handleSubmit(e) {\n    e.preventDefault();\n\n    this.submitForm();\n  }\n\n  /*\n   * Uploads the file to the server\n   */\n  submitForm() {\n    // Set form data and specimen the biobank file\n    let formData = this.state.formData;\n    let preparationForm = this.state.formData.preparationForm;\n    let specimenForm = this.state.formData.specimenForm;\n    formData['preparationForm'] = JSON.stringify(preparationForm);\n    formData['specimenForm'] = JSON.stringify(specimenForm);\n\n    console.log(formData.specimenForm);\n    console.log(formData.preparationForm);\n\n    let formObj = new FormData();\n    for (let key in formData) {\n      if (formData[key] !== \"\") {\n        formObj.append(key, formData[key]);\n      }\n    }\n\n    $.ajax({\n      type: 'POST',\n      url: this.props.action,\n      data: formObj,\n      cache: false,\n      contentType: false,\n      processData: false,\n      xhr: function() {\n        let xhr = new window.XMLHttpRequest();\n        return xhr;\n      }.bind(this),\n      success: function() {\n        //this.props.refreshParent();\n        swal(\"Specimens Pooled Successful!\", \"\", \"success\");\n        this.props.onSuccess();\n      }.bind(this),\n      error: function(err) {\n        console.error(err);\n        let msg = err.responseJSON ? err.responseJSON.message : \"Specimen error!\";\n        this.setState({\n          errorMessage: msg,\n        });\n        swal(msg, \"\", \"error\");\n      }.bind(this)\n    });\n  }\n\n  /**\n   * Checks if the inputted file name is valid\n   *\n   * @param {string} requiredFileName - Required file name\n   * @param {string} fileName - Provided file name\n   * @return {boolean} - true if fileName starts with requiredFileName, false\n   *   otherwise\n   */\n//  isValidFileName(requiredFileName, fileName) {\n//    if (fileName === null || requiredFileName === null) {\n//      return false;\n//    }\n//\n//    return (fileName.indexOf(requiredFileName) === 0);\n//  }\n\n  /**\n   * Validate the form\n   *\n   * @param {object} formRefs - Object containing references to React form elements\n   * @param {object} formData - Object containing form data inputed by user\n   * @return {boolean} - true if all required fields are filled, false otherwise\n   */\n  isValidForm(formRefs, formData) {\n    let isValidForm = true;\n\n    let requiredFields = {\n      pscid: null,\n      visitLabel: null,\n    };\n\n    Object.keys(requiredFields).map(function(field) {\n      if (formData[field]) {\n        requiredFields[field] = formData[field];\n      } else if (formRefs[field]) {\n        formRefs[field].props.hasError = true;\n        isValidForm = false;\n      }\n    });\n    this.forceUpdate();\n\n    return isValidForm;\n  }\n\n  /**\n   * Set the form data based on state values of child elements/componenets\n   *\n   * @param {string} formElement - name of the selected element\n   * @param {string} value - selected value for corresponding form element\n   */\n  setFormData(formElement, value) {\n    // This lets the modal window know that there is formData\n    // and will cause a warning to be thrown of the modal window\n    // is exited\n    this.props.onChange instanceof Function && this.props.onChange();\n  \n    if (formElement === \"pscid\" && value !== \"\" && value !== undefined) {\n      this.state.visits = this.props.sessionData[this.props.pSCIDs[value]].visits;\n    }\n\n    let formData = this.state.formData;\n    let barcodeList = this.state.barcodeList;\n \n    //TODO: there must be a better way to do this\n    if (isNaN(formElement)) {\n      formData[formElement] = value;\n    } else {\n      barcodeList[formElement] = value;\n    }\n\n    this.setState({\n      formData,\n      barcodeList\n    });\n  }\n\n  setPreparationFormData(preparationFormData) {\n    let formData = this.state.formData;\n    formData.preparationForm = preparationFormData;\n    \n    this.setState({formData});\n  }\n\n  setSpecimenFormData(specimenFormData) {\n    let formData = this.state.formData;\n    formData.specimenForm = specimenFormData;\n  \n    this.setState({formData});\n  }\n}\n\nPoolSpecimenForm.propTypes = {\n  DataURL: React.PropTypes.string.isRequired,\n  action: React.PropTypes.string.isRequired,\n  refreshTable: React.PropTypes.func\n};\n\nexport default PoolSpecimenForm;\n\n\n\n// WEBPACK FOOTER //\n// ./modules/biobank/jsx/poolSpecimenForm.js","\n/**\n * Biobank Specimen Form\n *\n * Acts a subform for BiobankCollectionForm\n *\n * @author Henri Rabalais\n * @version 1.0.0\n *\n **/\n\nclass SpecimenPreparationForm extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      formData: {data:{}},\n      currentProtocol: this.props.preparation ? this.props.preparation.protocolId : null,\n      formErrors: {},\n    };\n\n    this.setFormData = this.setFormData.bind(this);\n    this.setParentFormData = this.setParentFormData.bind(this);\n    this.setSpecimenProtocolFieldFormData = this.setSpecimenProtocolFieldFormData.bind(this);\n    this.getSpecimenProtocolFields = this.getSpecimenProtocolFields.bind(this);\n    this.handleSave = this.handleSave.bind(this);\n    this.savePreparation = this.savePreparation.bind(this);\n  }\n\n  componentDidMount() {\n    let formData = this.state.formData;\n\n    // if (this.props.specimenId) ??\n    formData['specimenId'] = this.props.specimenId;\n\n    //TODO: this is a shitty fix to the problem, do better.\n    // Actually, this may be less shitty than I thought\n    if (this.props.formData) {\n      formData = this.props.formData;\n  \n      let currentProtocol;\n      currentProtocol = this.props.formData.protocolId || null;\n      this.setState({currentProtocol});\n    }\n\n    // This for autoloading data and will be used later\n    if (this.props.preparation) {\n      formData['protocolId'] = this.props.preparation.protocolId;\n      formData['locationId'] = this.props.preparation.locationId;\n      formData['date']       = this.props.preparation.date;\n      formData['time']       = this.props.preparation.time;\n      formData['comments']   = this.props.preparation.comments;\n\n      var specimenProtocolFieldsObject = this.props.specimenProtocolAttributes[this.state.currentProtocol];\n      if (specimenProtocolFieldsObject) {\n        var specimenProtocolFields = Object.keys(specimenProtocolFieldsObject).map((attribute) => {\n          formData.data[attribute] = this.props.preparation.data[attribute];\n        });\n      }\n    }\n    this.setState({\n      formData: formData\n    });\n  }\n\n  render() {\n\n    var submitButton;\n    //TODO: fix this second check (!this.props.specimenId) -- it's not great\n    // All it does is signal that we are in the pool specimen form. There must be\n    // a better way!!\n    if (this.props.preparation || !this.props.specimenId) {\n      submitButton = null;\n    } else if (!this.props.preparation) {\n      submitButton = (\n        <ButtonElement label=\"Submit\"/>\n      );\n    }\n\n    var updateButton;\n    var locationField;\n    if (this.props.preparation) {\n      updateButton = (\n        <ButtonElement label=\"Update\"/>\n      );\n\n      locationField = (\n        <SelectElement\n          name=\"locationId\"\n          label=\"Location\"\n          options={this.props.sites}\n          onUserInput={this.setFormData}\n          required={true}\n          value={this.state.formData.locationId}\n        />\n      );\n    }\n\n  let specimenProtocolFields;\n  if (this.state.currentProtocol) {\n    var specimenProtocolFieldsObject = this.props.specimenProtocolAttributes[this.state.currentProtocol];\n\n    if (specimenProtocolFieldsObject) {\n      specimenProtocolFields = this.getSpecimenProtocolFields(specimenProtocolFieldsObject);\n    }\n  }\n\n    //This will be for default fields, if there are any eventually\n    if (this.state.currentSpecimenProtocol) {\n      preparationFields = (\n        <div>\n        </div>\n      );\n    }\n\n    return (\n      <FormElement\n        name=\"specimenPreparation\"\n        onSubmit={this.handleSave}\n        ref=\"form\"\n      >\n        <SelectElement\n          name=\"protocolId\"\n          label=\"Protocol\"\n          options={this.props.specimenProtocols}\n          onUserInput={this.setFormData}\n          required={true}\n          value={this.state.formData.protocolId}\n        />\n        {locationField}\n        {specimenProtocolFields}\n        <DateElement\n          name=\"date\"\n          label=\"Date\"\n          onUserInput={this.setFormData}\n          required={true}\n          value={this.state.formData.date}\n        />\n        <TimeElement\n          name=\"time\"\n          label=\"Time\"\n          onUserInput={this.setFormData}\n          required={true}\n          value={this.state.formData.time}\n        />\n        <TextareaElement\n          name=\"comments\"\n          label=\"Comments\"\n          onUserInput={this.setFormData}\n          value={this.state.formData.comments}\n        />\n        {submitButton} \n        {updateButton}\n      </FormElement>\n    );\n  }\n\n  /**\n   * Set the form data based on state values of child elements/componenets\n   *\n   * @param {string} formElement - name of the selected element\n   * @param {string} value - selected value for corresponding form element\n   */\n  setFormData(formElement, value) {\n\n    let formData = this.state.formData;\n\n    if (formElement === \"protocolId\" && value !== \"\") {\n      //This is to eliminate the values for the specimen protocol fields\n      //TODO: This could potentially be improved later to retain the values\n      //for the fields that are common accross protocols\n      formData.data = {};\n      this.setState({\n        currentProtocol: value\n      });\n    }\n\n    formData[formElement] = value;\n\n    this.setState(\n      {formData}, \n      this.setParentFormData\n    );\n  }\n\n  setSpecimenProtocolFieldFormData(formElement, value) {\n    let formData = this.state.formData;\n    formData.data[formElement] = value;\n  \n    this.setState(\n      {formData}, \n      this.setParentFormData\n    );\n  }\n\n  setParentFormData() {\n    if (this.props.setParentFormData) {\n      let formData = this.state.formData;\n      this.props.setParentFormData(formData);\n    }\n  } \n\n  // TODO: decouple this code from the collectionForm by make it a React Component\n  // This generates all the form fields for a given specimen protocol\n  getSpecimenProtocolFields(fieldsObject) {\n    var specimenProtocolFields = Object.keys(fieldsObject).map((attribute) => {\n      let datatype = this.props.attributeDatatypes[fieldsObject[attribute]['datatypeId']].datatype;\n\n      if (datatype === \"text\" || datatype === \"number\") {\n        if (fieldsObject[attribute]['refTableId'] == null) {\n          return (\n            <TextboxElement\n              name={attribute}\n              label={fieldsObject[attribute]['name']}\n              onUserInput={this.setSpecimenProtocolFieldFormData}\n              ref={attribute}\n              required={fieldsObject[attribute]['required']}\n              value={this.state.formData.data[attribute]}\n              errorMessage={this.state.formErrors[attribute] ? 'This is a '+datatype+' field.' : null}\n            />\n          );\n        }\n\n        if (fieldsObject[attribute]['refTableId'] !== null) {\n          return (\n            <SelectElement\n              name={attribute}\n              label={fieldsObject[attribute]['name']}\n              options={this.props.attributeOptions[fieldsObject[attribute]['refTableId']]}\n              onUserInput={this.setSpecimenProtocolFieldFormData}\n              ref={attribute}\n              required={fieldsObject[attribute]['required']}\n              value={this.state.formData.data[attribute]}\n            />\n          );\n        }\n      }\n\n      if (datatype === \"datetime\") {\n        return (\n          <DateElement\n            name={attribute}\n            label={fieldsObject[attribute]['name']}\n            onUserInput={this.setSpecimenProtocolFieldFormData}\n            ref={attribute}\n            required={fieldsObject[attribute]['required']}\n            value={this.state.formData.data[attribute]}\n          />\n        );\n      }\n\n      if (datatype === \"boolean\") {\n      \n      }\n    })\n\n    return specimenProtocolFields;\n  }\n\n  handleSave(e) {\n    //more things will go here later\n    if (!this.props.preparation) {\n      this.savePreparation(this.props.insertAction)\n    }\n    if (this.props.preparation) {\n      this.savePreparation(this.props.updateAction);\n    }\n  }\n\n  savePreparation(action) {\n    let formData = this.state.formData;\n    formData['data'] = JSON.stringify(formData['data']);\n\n    console.log(formData);\n    let formObj = new FormData();\n    for (let key in formData) {\n      if (formData[key] !== \"\") {\n        formObj.append(key, formData[key]);\n      }\n    }\n\n    $.ajax({\n      type: 'POST',\n      url: action,\n      data: formObj,\n      cache: false,\n      contentType: false,\n      processData: false,\n      xhr: function() {\n        let xhr = new window.XMLHttpRequest();\n        return xhr;\n      }.bind(this),\n      success: function() {\n        //Update Parent Specimen Page Here\n        //formData.data = JSON.parse(formData.data);\n        this.props.refreshParent();\n        //swal(\"Specimen Preparation Update Successful!\", \"\", \"success\");\n        //this.props.onSuccess();\n      }.bind(this),\n      error: function(err) {\n        console.error(err);\n        let msg = err.responseJSON ? err.responseJSON.message : \"Specimen error!\";\n\n        this.setState({\n          errorMessage: msg,\n        });\n        swal(msg, \"\", \"error\");\n      }.bind(this)\n    });\n  }\n}\n\nSpecimenPreparationForm.propTypes = {\n  containerTypesPrimary: React.PropTypes.object.isRequired,\n  specimenTypeAttributes: React.PropTypes.object.isRequired,\n  attributeDatatypes: React.PropTypes.object.isRequired,\n  capacities: React.PropTypes.object.isRequired,\n  units: React.PropTypes.object.isRequired,\n}\n\nexport default SpecimenPreparationForm;\n\n\n\n\n// WEBPACK FOOTER //\n// ./modules/biobank/jsx/preparationForm.js","import ContainerBarcodeForm from './containerBarcodeForm.js';\n\n/**\n * Biobank Collection Form\n *\n * Fetches data from Loris backend and displays a form allowing\n * to specimen a biobank file attached to a specific instrument\n *\n * @author Henri Rabalais\n * @version 1.0.0\n *\n * */\nclass BiobankContainerForm extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      formData: {},\n      formErrors: {},\n      errorMessage: null,\n      barcodeFormList: {1: {}},\n      countBarcodeForms: 1\n    };\n\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.validateForm = this.validateForm.bind(this);\n    this.setFormData = this.setFormData.bind(this);\n    this.containerSubmit = this.containerSubmit.bind(this);\n    this.addBarcodeForm = this.addBarcodeForm.bind(this);\n    this.setBarcodeFormData = this.setBarcodeFormData.bind(this);\n  }\n\n  render() {\n\n    //Generates new Barcode Form everytime the addBarcodeForm button is pressed\n    var barcodeListArray = Object.keys(this.state.barcodeFormList);\n    var barcodeForms = [];\n    let i = 1;\n    for (let key of barcodeListArray) {\n      barcodeForms.push(\n        <ContainerBarcodeForm\n          key={key}\n          barcodeKey={key}\n          id={i}\n          formData={this.state.barcodeFormList[key] ? this.state.barcodeFormList[key] : null}\n          removeBarcodeForm={barcodeListArray.length !== 1 ? () => this.removeBarcodeForm(key) : null}\n          addBarcodeForm={i == barcodeListArray.length ? this.addBarcodeForm : null}\n          copyBarcodeForm={i == barcodeListArray.length && this.state.barcodeFormList[key] ? this.copyBarcodeForm.bind(this, key) : null}\n          setParentFormData={this.setBarcodeFormData}\n          onChange={this.props.onChange}\n          containerTypesNonPrimary={this.props.containerTypesNonPrimary}\n          containerBarcodesNonPrimary={this.props.containerBarcodesNonPrimary}\n        />\n      );\n     \n      i++;\n    }\n\n    //ALLOW THEM TO CANCEL THE FORM AND DELETE BARCODE FORMS\n    return (\n      <FormElement\n        name=\"specimenForm\"\n        onSubmit={this.handleSubmit}\n        ref=\"form\"\n      >\n        <br/>\n        <div className=\"row\">\n          <div className=\"col-xs-11\">\n            <SelectElement\n              name=\"site\"\n              label=\"Site\"\n              options={this.props.sites}\n              onUserInput={this.setFormData}\n              ref=\"site\"\n              required={true}\n              value={this.state.formData.site}\n            />\n          </div>\n        </div>\n        {barcodeForms}\n          <div className=\"col-xs-3 col-xs-offset-9\">\n            <ButtonElement label=\"Submit\"/>\n          </div>\n      </FormElement>\n    );\n  }\n\n/** *******************************************************************************\n *                      ******     Helper methods     *******\n *********************************************************************************/\n\n  /**\n   * Returns a valid name for the file to be specimened\n   *\n   * @param {string} visitLabel - Visit label selected from the dropdown\n   * @param {string} instrument - Instrument selected from the dropdown\n   * @return {string} - Generated valid filename for the current selection\n   */\n\n\n  validateForm(formElement, value) {\n    let formErrors = this.state.formErrors;\n\n    //validate barcode regex\n    if (formElement === \"barcode\" && value !== \"\") {\n      if (!(/^hello/.test(this.state.formData.barcode))) {\n        formErrors.barcode = true;\n      } else {\n        formErrors.barcode = false;\n      }\n    }\n\n    //validate that quantity is a number and less than capacity\n    if (formElement === \"quantity\" && value !== \"\") {\n      if (isNaN(value) || (value > this.props.capacities[this.state.currentContainerType])) {\n        formErrors.quantity = true;\n      } else {\n        formErrors.quantity = false;\n      }\n    }\n\n    //validate datatypes and regex of generated type attributes\n    var specimenTypeFieldsObject = this.props.specimenTypeAttributes[this.state.currentSpecimenType];\n    var specimenTypeFields = Object.keys(specimenTypeFieldsObject).map((attribute) => {\n\n      let datatype = this.props.attributeDatatypes[specimenTypeFieldsObject[attribute]['datatypeId']].datatype;\n      if (datatype === \"number\") {\n        if (formElement === attribute) {\n          if (isNaN(value) && value !== \"\") {\n            formErrors[attribute] = true;\n          } else {\n            formErrors[attribute] = false;\n          }\n        }\n      }\n    })\n\n    this.setState({\n      formErrors: formErrors\n    });\n\n  }\n\n\n  /**\n   * Handle form submission\n   * @param {object} e - Form submission event\n   */\n  handleSubmit(e) {\n\n    this.containerSubmit();\n  }\n\n  containerSubmit() {\n    // Set form data\n    let formData = this.state.formData;\n    let barcodeFormList = this.state.barcodeFormList;\n    formData['barcodeFormList'] = JSON.stringify(barcodeFormList);\n    let formObj = new FormData();\n    for (let key in formData) {\n      if (formData[key] !== \"\") {\n        formObj.append(key, formData[key]);\n      }\n    }\n\n    $.ajax({\n      type: 'POST',\n      url: this.props.action,\n      data: formObj,\n      cache: false,\n      contentType: false,\n      processData: false,\n      xhr: function() {\n        let xhr = new window.XMLHttpRequest();\n        return xhr;\n      }.bind(this),\n      success: function() {\n \n        //refreshes table \n        this.props.refreshParent();\n\n        //provide success message\n        swal(\"Container Submission Successful!\", \"\", \"success\");\n\n        //close modal window\n        this.props.onSuccess();\n      }.bind(this),\n      error: function(err) {\n        console.error(err);\n        let msg = err.responseJSON ? err.responseJSON.message : \"Specimen error!\";\n        this.setState({\n          errorMessage: msg,\n        });\n        swal(msg, \"\", \"error\");\n      }.bind(this)\n    });\n  }\n\n  /**\n   * Set the form data based on state values of child elements/componenets\n   *\n   * @param {string} formElement - name of the selected element\n   * @param {string} value - selected value for corresponding form element\n   */\n  setFormData(formElement, value) {\n    this.props.onChange instanceof Function && this.props.onChange();\n  \n    //LOOK AT THIS LATER - THE SWITCH TO PROPS MESSED THIS ALL UP \n    var formData = this.state.formData;\n    formData[formElement] = value;\n\n    this.setState({\n      formData: formData\n    });\n  }\n\n  setBarcodeFormData(barcodeFormData, barcodeKey) {\n    var formData = this.state.formData;\n    var barcodeFormList = this.state.barcodeFormList;\n    barcodeFormList[barcodeKey] = barcodeFormData;\n    formData['barcodeFormList'] = barcodeFormList;\n\n    this.setState({\n      formData: formData\n    });\n  }\n\n  addBarcodeForm() {\n    let barcodeFormList = this.state.barcodeFormList;\n    let count = this.state.countBarcodeForms;\n\n    barcodeFormList[count+1] = {};\n\n    this.setState({\n      barcodeFormList: barcodeFormList,\n      countBarcodeForms: count + 1\n    });\n  }\n\n  copyBarcodeForm(key, multiplier) {\n    let count = this.state.countBarcodeForms;\n    let nextKey = count+1;\n    let barcodeFormList = this.state.barcodeFormList;\n\n    for (let i=1; i<=multiplier; i++) {\n      barcodeFormList[nextKey] = JSON.parse(JSON.stringify(barcodeFormList[key]));\n      delete barcodeFormList[nextKey].barcode;\n      nextKey++;\n    }    \n\n    this.setState({\n      barcodeFormList: barcodeFormList,\n      countBarcodeForms: nextKey\n    });\n  }\n\n  removeBarcodeForm(key) {\n    let barcodeFormList = this.state.barcodeFormList;\n    delete barcodeFormList[key];\n\n    this.setState({\n      barcodeFormList: barcodeFormList\n    });\n  }\n\n}\n\nBiobankContainerForm.propTypes = {\n  DataURL: React.PropTypes.string.isRequired,\n  action: React.PropTypes.string.isRequired,\n  barcode: React.PropTypes.string,\n  refreshTable: React.PropTypes.func\n};\n\nexport default BiobankContainerForm;\n\n\n\n// WEBPACK FOOTER //\n// ./modules/biobank/jsx/containerForm.js","/**\n * Container Barcode Form\n *\n * Acts a subform for ContainerForm\n *\n * @author Henri Rabalais\n * @version 1.0.0\n *\n **/\n\nclass ContainerBarcodeForm extends React.Component {\n  constructor(props) {\n    super(props);\n \n    this.state = {\n      formData: {},\n      formErrors: {},\n      collapsed: true,\n      copyMultiplier: 1,\n    };\n   \n    this.setFormData = this.setFormData.bind(this);\n    this.setParentFormData = this.setParentFormData.bind(this);\n    this.toggleCollapse = this.toggleCollapse.bind(this);\n    this.setCopyMultiplier = this.setCopyMultiplier.bind(this);\n    this.copy = this.copy.bind(this);\n  }\n\n  componentDidMount() {\n    if (this.props.formData) {\n      let formData = this.props.formData;\n      \n      this.setState({\n        formData: formData\n      });\n    }\n  }\n\n  toggleCollapse() {\n    this.setState({collapsed: !this.state.collapsed});\n  }\n\n  setCopyMultiplier(e) {\n    let copyMultiplier = e.target.value;\n   \n    this.setState({\n      copyMultiplier: copyMultiplier\n    });\n  }\n\n  copy() {\n    this.props.copyBarcodeForm(this.state.copyMultiplier);\n  }\n\n  render() {\n    // HR TODO: All this CSS should eventually be moved\n    let addBarcodeFormButton;\n    let addBarcodeFormText;\n    let copyBarcodeFormButton;\n    let copyBarcodeFormText;\n    if (this.props.addBarcodeForm) {\n      addBarcodeFormButton = (\n        <span className='action'>\n          <div\n            className='action-button add'\n            onClick={this.props.addBarcodeForm}\n          >\n          +\n          </div>\n        </span>\n      );\n\n      addBarcodeFormText = (\n        <span className='action-title'>\n          New Entry\n        </span>\n      );\n    }   \n    \n    if (this.props.copyBarcodeForm) {\n      copyBarcodeFormButton = ( \n        <span className='action'>\n          <div\n            className='action-button add'\n            onClick={this.copy}\n          >   \n            <span className='glyphicon glyphicon-duplicate'/>\n          </div>\n        </span>\n      );  \n      copyBarcodeFormText = ( \n        <span className='action-title'>\n          <input \n            className='form-control input-sm'\n            type='number'\n            min='1'\n            max='50'\n            style={{width: 50, display: 'inline'}}\n            onChange={this.setCopyMultiplier}\n            value={this.state.copyMultiplier}\n          />  \n          Copies\n        </span>\n      );  \n    }   \n\n\n    let removeBarcodeFormButton;\n    if (this.props.removeBarcodeForm) {\n      const glyphStyle = { \n        color: '#DDDDDD',\n        marginLeft: 10, \n        cursor: 'pointer',\n        fontSize: 15\n      }   \n\n      removeBarcodeFormButton = ( \n        <span \n          className='glyphicon glyphicon-remove' \n          onClick={this.props.removeBarcodeForm}\n          style={glyphStyle}\n        />\n      );  \n    }\n\n\n    return (\n      <FormElement\n        name='biobankBarcode'\n      >\n        <div className='row'>\n          <div className='col-xs-11'>\n            <div>\n            <TextboxElement\n              name='barcode'\n              label={'Barcode ' + this.props.id}\n              onUserInput={this.setFormData}\n              ref='barcode'\n              required={true}\n              value={this.state.formData.barcode}\n            />\n            </div>\n          </div>\n          <div className='col-xs-1' style={{paddingLeft:0, marginTop:10}}>\n            <span\n              className= {this.state.collapsed ? 'glyphicon glyphicon-chevron-down' : 'glyphicon glyphicon-chevron-up'}\n              style={{cursor: 'pointer', fontSize:15, position:'relative', right:40}}\n              data-toggle='collapse'\n              data-target={'#item-' + this.props.id}\n              onClick={this.toggleCollapse}\n            />\n            {removeBarcodeFormButton}\n          </div>\n        </div>\n        <div className='row'>\n          <div className='col-xs-2'/>\n          <div className='col-xs-9'>\n            <div id={'item-' + this.props.id} className='collapse'>\n              <SelectElement\n                name='containerType'\n                label='Container Type'\n                options={this.props.containerTypesNonPrimary}\n                onUserInput={this.setFormData}\n                required={true}\n                value={this.state.formData.containerType}\n              />\n            </div>\n          </div>\n        </div>\n        <div className='row'>\n          <div className='col-xs-11'>\n            <div className='col-xs-3'/>\n            <div className='col-xs-4 action'>\n              {addBarcodeFormButton}\n              {addBarcodeFormText}\n            </div>\n            <div className='col-xs-4 action'>\n              {copyBarcodeFormButton}\n              {copyBarcodeFormText}\n            </div>\n          </div>\n        </div>\n      </FormElement>\n    );\n  }\n\n  /**\n   * Set the form data based on state values of child elements/componenets\n   *\n   * @param {string} formElement - name of the selected element\n   * @param {string} value - selected value for corresponding form element\n   */\n  setFormData(formElement, value) {\n    this.props.onChange instanceof Function && this.props.onChange();\n\n    var formData = this.state.formData;\n    formData[formElement] = value;\n\n    this.setState(\n      {\n      formData: formData\n      },\n      this.setParentFormData\n    );\n  }\n\n  setParentFormData() {\n    this.props.setParentFormData(this.state.formData, this.props.id);\n  }\n}\n\nContainerBarcodeForm.propTypes = {\n  id: React.PropTypes.string,\n  specimenTypes: React.PropTypes.object.isRequired,\n  containerTypesPrimary: React.PropTypes.object.isRequired,\n  specimenTypeAttributes: React.PropTypes.object.isRequired,\n  attributeDatatypes: React.PropTypes.object.isRequired,\n  capacities: React.PropTypes.object.isRequired,\n}\n\nexport default ContainerBarcodeForm;\n\n\n\n// WEBPACK FOOTER //\n// ./modules/biobank/jsx/containerBarcodeForm.js","/**\n * This file contains React components for Tabs component.\n *\n * @author Loris Team\n * @version 1.1.0\n *\n */\n\n/**\n * Tabs Component.\n * React wrapper for Bootstrap tabs. Allows to dynamically render tabs\n * and corresponding tab panes.\n *\n * ================================================\n * Usage:\n *\n * 1. Define an array of tabs with IDs and labels\n *\n * `let tabList = [{id: \"tab1\", label: \"This is tab title\"}];`\n *\n * 2. Pass tabList as <Tab> property and <TabPane> as child\n *  ```\n * <Tabs tabs={tabList} defaultTab=\"tab1\">\n *   <TabPane TabId={tabList[0].id}>\n *     // Tab content goes here\n *   </TabPane>\n * </Tabs>\n * ```\n * =================================================\n *\n */\nclass Tabs extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    const hash = window.location.hash;\n    let activeTab = \"\";\n\n    /**\n     * Determine the initial active tab in this order\n     * 1. Try to infer from the URL, otherwise\n     * 2. Try to infer from the defaultTab prop, otherwise\n     * 3. Set to be the first tab of the list\n     */\n    if (this.props.updateURL && hash) {\n      activeTab = hash.substr(1);\n    } else if (this.props.defaultTab) {\n      activeTab = this.props.defaultTab;\n    } else if (this.props.tabs.length > 0) {\n      activeTab = this.props.tabs[0].id;\n    }\n\n    this.state = {\n      activeTab: activeTab\n    };\n\n    this.handleClick = this.handleClick.bind(this);\n    this.getTabs = this.getTabs.bind(this);\n    this.getTabPanes = this.getTabPanes.bind(this);\n  }\n\n  handleClick(tabId, e) {\n    this.setState({activeTab: tabId});\n    this.props.onTabChange(tabId);\n\n    // Add tab href to URL querystring and scroll the page to top\n    if (this.props.updateURL) {\n      const scrollDistance = $('body').scrollTop() || $('html').scrollTop();\n      window.location.hash = e.target.hash;\n      $('html,body').scrollTop(scrollDistance);\n    }\n  }\n\n  getTabs() {\n    let tabs = (this.props.tabs).map(function(tab) {\n      let tabClass = this.state.activeTab === tab.id ? 'active' : null;\n      let href = \"#\" + tab.id;\n      let tabID = \"tab-\" + tab.id;\n      return (\n        <li\n          role=\"presentation\"\n          className={tabClass}\n          key={tab.id}\n        >\n          <a id={tabID}\n             href={href}\n             role=\"tab\"\n             data-toggle=\"tab\"\n             onClick={this.handleClick.bind(null, tab.id)}\n          >\n            {tab.label}\n          </a>\n        </li>\n      );\n    }.bind(this));\n\n    return tabs;\n  }\n\n  getTabPanes() {\n    let tabPanes = React.Children.map(this.props.children, function(child, key) {\n      if (child) {\n        return React.cloneElement(child, {\n          activeTab: this.state.activeTab,\n          key: key\n        });\n      }\n    }.bind(this));\n\n    return tabPanes;\n  }\n\n  render() {\n    let tabs = this.getTabs();\n    let tabPanes = this.getTabPanes();\n    let tabStyle = {\n      marginLeft: 0,\n      marginBottom: '5px'\n    };\n\n    return (\n      <div>\n        <ul className=\"nav nav-tabs\" role=\"tablist\" style={tabStyle}>\n          {tabs}\n        </ul>\n        <div className=\"tab-content\">\n          {tabPanes}\n        </div>\n      </div>\n    );\n  }\n}\nTabs.propTypes = {\n  tabs: React.PropTypes.array.isRequired,\n  defaultTab: React.PropTypes.string,\n  updateURL: React.PropTypes.bool\n};\nTabs.defaultProps = {\n  onTabChange: function() {},\n  // Set updateURL to default to true but allow for change\n  // Nested tabs should set this variable to false\n  updateURL: true\n};\n\n/**\n * Allows to dynamically render vertical tabs corresponding to tab panes.\n */\n\nclass VerticalTabs extends React.Component {\n  constructor(props) {\n    super(props);\n\n    const hash = window.location.hash;\n    let activeTab = \"\";\n\n    /**\n     * Determine the initial active tab in this order\n     * 1. Try to infer from the URL, otherwise\n     * 2. Try to infer from the defaultTab prop, otherwise\n     * 3. Set to be the first tab of the list\n     */\n    if (this.props.updateURL && hash) {\n      activeTab = hash.substr(1);\n    } else if (this.props.defaultTab) {\n      activeTab = this.props.defaultTab;\n    } else if (this.props.tabs.length > 0) {\n      activeTab = this.props.tabs[0].id;\n    }\n\n    this.state = {\n      activeTab: activeTab\n    };\n\n    this.handleClick = this.handleClick.bind(this);\n    this.getTabs = this.getTabs.bind(this);\n    this.getTabPanes = this.getTabPanes.bind(this);\n  }\n\n  handleClick(tabId, e) {\n    this.setState({activeTab: tabId});\n    this.props.onTabChange(tabId);\n\n    // Add tab href to URL querystring and scroll the page to top\n    if (this.props.updateURL) {\n      const scrollDistance = $('body').scrollTop() || $('html').scrollTop();\n      window.location.hash = e.target.hash;\n      $('html,body').scrollTop(scrollDistance);\n    }\n  }\n\n  getTabs() {\n    let tabs = (this.props.tabs).map(function(tab) {\n      let tabClass = this.state.activeTab === tab.id ? 'active' : null;\n      let href = \"#\" + tab.id;\n      let tabID = \"tab-\" + tab.id;\n      return (\n        <li\n          role=\"presentation\"\n          className={tabClass}\n          key={tab.id}\n        >\n          <a id={tabID}\n             href={href}\n             role=\"tab\"\n             data-toggle=\"tab\"\n             onClick={this.handleClick.bind(null, tab.id)}\n          >\n            {tab.label}\n          </a>\n        </li>\n      );\n    }.bind(this));\n\n    return tabs;\n  }\n\n  getTabPanes() {\n    let tabPanes = React.Children.map(this.props.children, function(child, key) {\n      if (child) {\n        return React.cloneElement(child, {\n          activeTab: this.state.activeTab,\n          key: key\n        });\n      }\n    }.bind(this));\n\n    return tabPanes;\n  }\n\n  render() {\n    let tabs = this.getTabs();\n    let tabPanes = this.getTabPanes();\n    let tabStyle = {\n      marginLeft: 0,\n      marginBottom: '5px'\n    };\n\n    return (\n      <div>\n        <div className=\"tabbable col-md-3 col-sm-3\">\n          <ul className=\"nav nav-pills nav-stacked\" role=\"tablist\" style={tabStyle}>\n            {tabs}\n          </ul>\n        </div>\n        <div className=\"tab-content col-md-9 col-sm-9\">\n          {tabPanes}\n        </div>\n      </div>\n    );\n  }\n}\nVerticalTabs.propTypes = {\n  tabs: React.PropTypes.array.isRequired,\n  defaultTab: React.PropTypes.string,\n  updateURL: React.PropTypes.bool\n};\nVerticalTabs.defaultProps = {\n  onTabChange: function() {},\n  // Set updateURL to default to true but allow for change\n  // Nested tabs should set this variable to false\n  updateURL: true\n};\n\n/*\n * TabPane component.\n * Used to wrap content for every tab.\n */\nclass TabPane extends React.Component {\n  render() {\n    let classList = \"tab-pane\";\n    let title;\n\n    if (this.props.TabId === this.props.activeTab) {\n      classList += \" active\";\n    }\n    if (this.props.Title) {\n      title = <h1>{this.props.Title}</h1>;\n    }\n\n    return (\n      <div role=\"tabpanel\" className={classList} id={this.props.TabId}>\n        {title}\n        {this.props.children}\n      </div>\n    );\n  }\n}\nTabPane.propTypes = {\n  TabId: React.PropTypes.string.isRequired,\n  Title: React.PropTypes.string,\n  activeTab: React.PropTypes.string\n};\n\nexport {\n  Tabs,\n  VerticalTabs,\n  TabPane\n};\n\n\n\n// WEBPACK FOOTER //\n// ./jsx/Tabs.js","/**\n * This file contains React components for Modal component.\n *\n * @author Henri Rabalais\n * @version 1.1.0\n *\n */\n\nimport Modal from './Modal';\n\n/**\n * Modal Component.\n * React wrapper for a Modal Window. Allows to dynamically toggle a Modal window.\n *\n * ================================================\n * Usage:\n *\n * =================================================\n *\n */\n\nclass FormModal extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { show: false, throwWarning: false }\n\n    this.openModal = this.openModal.bind(this);\n    this.closeModal = this.closeModal.bind(this);\n    this.confirmClose = this.confirmClose.bind(this);\n    this.setWarning = this.setWarning.bind(this);\n  }\n\n  renderChildren() {\n    return React.Children.map(this.props.children, child => {\n      return React.cloneElement(child, { onSuccess: this.closeModal, onChange: this.setWarning });\n    });\n  }\n\n  openModal() {\n    this.setState({\n      show: true\n    });\n  } \n\n  setWarning() {\n    this.setState({\n      throwWarning: true\n    });\n  }\n\n  confirmClose() {\n    if (this.state.throwWarning) {\n      swal({\n        title: \"Are You Sure?\",\n        text: \"Leaving the form will result in the loss of any information entered.\",\n        type: \"warning\",\n        showCancelButton: true,\n        confirmButtonText: 'Proceed',\n        cancelButtonText: 'Cancel',\n      },\n      function() {\n        this.closeModal();\n      }.bind(this));\n    } else {\n      this.closeModal();\n    }\n  }\n\n  closeModal() {\n    this.setState({\n      show: false,\n      throwWarning: false\n    });\n  }\n\n  render() {\n    return (\n      <Modal \n        closeModal={this.confirmClose} \n        openModal={this.openModal} \n        show={this.state.show}\n        {...this.props} \n      >\n        {this.renderChildren()}\n      </Modal>\n    );\n  }\n}\n\nFormModal.propTypes = {\n  title: React.PropTypes.string,\n  buttonClass: React.PropTypes.string,\n  buttonStyle: React.PropTypes.object,\n  buttonContent: React.PropTypes.object,\n};\nFormModal.defaultProps = {\n  buttonClass: 'btn btn-primary'\n};\n\nexport default FormModal;\n\n\n\n// WEBPACK FOOTER //\n// ./jsx/FormModal.js","/**\n * This file contains React components for Modal component.\n *\n * @author Henri Rabalais\n * @version 1.1.0\n *\n */\n\n/**\n * Modal Component.\n * React wrapper for a Modal Window. Allows to dynamically toggle a Modal window.\n *\n * ================================================\n * Usage:\n *\n * =================================================\n *\n */\nclass Modal extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n  }\n\n  render() {\n    // Black Background with Alpha Channel\n    const backdropStyle = {\n      position: 'fixed',\n      zIndex: 9998,\n      top: 0,\n      bottom: 0,\n      left: 0,\n      right: 0,\n      backgroundColor: 'rgba(0,0,0,0.3)',\n      padding: 50\n    };\n\n    // White Modal Window\n    const modalStyle = {\n      position: 'relative',\n      maxWidth: 1000,\n      maxHeight: '100%',\n      margin: '0 auto',\n      backgroundColor: '#fff',\n      borderRadius: 10,\n      overflowY: 'auto',\n      zIndex: 9999\n    };\n\n    const titleStyle = {\n      display: 'flex',\n      flexDirection: 'row',\n      alignItems: 'center',\n      background: '#093782',\n      height: '70px',\n      borderTopRightRadius: '10',\n      color: '#FFFFFF',\n      fontSize: 24,\n      padding: 20,\n    }\n\n    const glyphStyle = {\n      marginLeft: 'auto',\n      cursor: 'pointer'\n    }\n\n    const bodyStyle = {\n      padding: 15\n    }\n  \n    var button = (\n      <div\n        className={this.props.buttonClass}\n        onClick={this.props.openModal}\n      >\n        {this.props.buttonContent}\n      </div>\n    );\n\n    var modal;\n    if (this.props.show) {\n      modal = (\n        <div style={backdropStyle} onClick={this.props.closeModal}>\n          <div\n            style={modalStyle}\n            onClick={e => {\n              e.stopPropagation();\n            }}\n          >\n            <div\n              style={titleStyle}\n            >\n              {this.props.title}\n              <span \n                style={glyphStyle}\n                onClick={this.props.closeModal}\n              >\n                ×\n              </span>\n            </div>\n            <div\n              style={bodyStyle}\n            >\n              {this.props.children}\n            </div>\n          </div>\n        </div>\n      );\n    }\n\n    return (\n      <div style={this.props.style}>\n        {button}\n        {modal}\n      </div>\n    );\n  }\n}\n\nModal.propTypes = {\n  title: React.PropTypes.string,\n  buttonClass: React.PropTypes.string,\n  buttonStyle: React.PropTypes.object,\n  buttonContent: React.PropTypes.object,\n  show: React.PropTypes.boolean,\n  closeModal: React.PropTypes.func,\n  openModal: React.PropTypes.func\n};\nModal.defaultProps = {\n  buttonClass: 'btn btn-primary'\n};\n\nexport default Modal;\n\n\n\n// WEBPACK FOOTER //\n// ./jsx/Modal.js","/**\n * This file contains React component for Loader\n *\n * @author Henri Rabalais\n * @version 1.0.0\n *\n */\n\n/**\n * Loader component\n */\nclass Loader extends React.Component {\n\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n\n    return (\n      <div className='loader-container'>\n        <div className=\"loader\"/>\n      </div>\n\n\n    );\n  }\n}\n\nexport default Loader;\n\n\n\n// WEBPACK FOOTER //\n// ./jsx/Loader.js","/**\n * Modify behaviour of specified column cells in the Data Table component\n * @param {string} column - column name\n * @param {string} cell - cell content\n * @param {arrray} rowData - array of cell contents for a specific row\n * @param {arrray} rowHeaders - array of table headers (column names)\n * @return {*} a formated table cell for a given column\n */\nfunction formatColumn(column, cell, rowData, rowHeaders) {\n  // If a column if set as hidden, don't display it\n  //if (loris.hiddenHeaders.indexOf(column) > -1) {\n  //  return null;\n  //}\n\n  // Create the mapping between rowHeaders and rowData in a row object.\n  var row = {};\n  rowHeaders.forEach(function(header, index) {\n    row[header] = rowData[index];\n  }, this);\n\n  // create array of classes to be added to td tag\n  var classes = [];\n\n  // convert array to string, with blank space separator\n  classes = classes.join(\" \");\n\n  //const hasWritePermission = loris.userHasPermission('media_read');\n  if (column === 'Barcode') {\n    var specimenURL = loris.BaseURL + \"/biobank/specimen/?barcode=\" + row['Barcode'];\n    return <td className= {classes}><a href={specimenURL}>{cell}</a></td>;\n  }\n\n  if (column === 'Parent Barcode') {\n    var specimenURL = loris.BaseURL + \"/biobank/specimen/?barcode=\" + row['Parent Barcode'];\n    return <td className= {classes}><a href={specimenURL}>{cell}</a></td>; \n}\n\n  if (column === 'Container Barcode') {\n    var containerURL = loris.BaseURL + \"/biobank/container/?barcode=\" + row['Container Barcode'];\n    return <td className= {classes}><a href={containerURL}>{cell}</a></td>;\n}\n\n // if (column === 'Visit Label') {\n //   if (row[\"Cand ID\"] !== null && row[\"Session ID\"]) {\n //     var sessionURL = loris.BaseURL + \"/instrument_list/?candID=\" +\n //       row[\"Cand ID\"] + \"&sessionID=\" + row[\"Session ID\"];\n //     return <td className={classes}><a href={sessionURL}>{cell}</a></td>;\n //   }\n // }\n\n // if (column === 'Edit Metadata') {\n //   var editURL = loris.BaseURL + \"/biobank/edit/?id=\" + row['Edit Metadata'];\n //   return <td className={classes}><a href={editURL}>Edit</a></td>;\n // }\n\n  return <td className={classes}>{cell}</td>;\n}\n\nexport default formatColumn;\n\n\n\n// WEBPACK FOOTER //\n// ./modules/biobank/jsx/columnFormatterSpecimen.js","/**\n * Modify behaviour of specified column cells in the Data Table component\n * @param {string} column - column name\n * @param {string} cell - cell content\n * @param {arrray} rowData - array of cell contents for a specific row\n * @param {arrray} rowHeaders - array of table headers (column names)\n * @return {*} a formated table cell for a given column\n */\nfunction formatColumn(column, cell, rowData, rowHeaders) {\n  // If a column if set as hidden, don't display it\n  //if (loris.hiddenHeaders.indexOf(column) > -1) {\n  //  return null;\n  //}\n\n  // Create the mapping between rowHeaders and rowData in a row object.\n  var row = {};\n  rowHeaders.forEach(function(header, index) {\n    row[header] = rowData[index];\n  }, this);\n\n  // create array of classes to be added to td tag\n  var classes = [];\n\n  // convert array to string, with blank space separator\n  classes = classes.join(\" \");\n\n  //const hasWritePermission = loris.userHasPermission('media_read');\n  if (column === 'Barcode') {\n    var containerURL = loris.BaseURL + \"/biobank/container/?barcode=\" + row['Barcode'];\n    return <td className= {classes}><a href={containerURL}>{cell}</a></td>;\n  }\n\n  if (column === 'Parent Barcode') {\n    var specimenURL = loris.BaseURL + \"/biobank/container/?barcode=\" + row['Parent Barcode'];\n    return <td className= {classes}><a href={containerURL}>{cell}</a></td>; \n}\n\n // if (column === 'Visit Label') {\n //   if (row[\"Cand ID\"] !== null && row[\"Session ID\"]) {\n //     var sessionURL = loris.BaseURL + \"/instrument_list/?candID=\" +\n //       row[\"Cand ID\"] + \"&sessionID=\" + row[\"Session ID\"];\n //     return <td className={classes}><a href={sessionURL}>{cell}</a></td>;\n //   }\n // }\n\n // if (column === 'Edit Metadata') {\n //   var editURL = loris.BaseURL + \"/biobank/edit/?id=\" + row['Edit Metadata'];\n //   return <td className={classes}><a href={editURL}>Edit</a></td>;\n // }\n\n  return <td className={classes}>{cell}</td>;\n}\n\nexport default formatColumn;\n\n\n\n// WEBPACK FOOTER //\n// ./modules/biobank/jsx/columnFormatterContainer.js"],"sourceRoot":""}