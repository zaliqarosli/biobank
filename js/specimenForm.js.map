{"version":3,"sources":["webpack:///modules/biobank/js/specimenForm.js","webpack:///webpack/bootstrap 13e174a7fedca0f84b33?89bf********","webpack:///./modules/biobank/jsx/specimenForm.js","webpack:///./jsx/ProgressBar.js"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","id","loaded","call","m","c","p","0","_interopRequireDefault","obj","__esModule","default","_classCallCheck","instance","Constructor","TypeError","_possibleConstructorReturn","self","ReferenceError","_inherits","subClass","superClass","prototype","Object","create","constructor","value","enumerable","writable","configurable","setPrototypeOf","__proto__","defineProperty","_createClass","defineProperties","target","props","i","length","descriptor","key","protoProps","staticProps","_ProgressBar","_ProgressBar2","BiobankSpecimenForm","_React$Component","this","_this","getPrototypeOf","state","Data","formData","specimenResult","errorMessage","isLoaded","loadedData","specimenProgress","getValidFileName","bind","handleSubmit","isValidFileName","isValidForm","setFormData","specimenFile","$","ajax","DataURL","dataType","success","data","setState","error","errorCode","errorMsg","console","undefined","React","createElement","className","helpText","maxSpecimenSize","FormElement","name","fileSpecimen","onSubmit","ref","StaticElement","label","text","SelectElement","options","candidates","onUserInput","hasError","required","pscid","visits","visitLabel","sites","forSite","instruments","instrument","DateElement","minYear","maxYear","dateTaken","TextareaElement","comments","FileElement","file","ButtonElement","fileName","e","preventDefault","formRefs","refs","biobankFiles","replace","requiredFileName","swal","isDuplicate","indexOf","title","type","showCancelButton","confirmButtonText","cancelButtonText","isConfirm","formObj","FormData","append","url","action","cache","contentType","processData","xhr","window","XMLHttpRequest","specimen","addEventListener","evt","lengthComputable","percentage","Math","round","total","JSON","parse","stringify","push","event","CustomEvent","dispatchEvent","err","msg","responseJSON","message","requiredFields","keys","map","field","forceUpdate","formElement","sessionData","all","Component","propTypes","PropTypes","string","isRequired","5","ProgressBar","apply","arguments","progressStyle","display","backgroundColor","height","position","labelStyle","top","left","zIndex","width","color","textAlign","lineHeight","fontWeight","style","role","aria-valuemin","aria-valuemax","aria-valuenow","number","defaultProps"],"mappings":"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","file":"./modules/biobank/js/specimenForm.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ 0:\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _ProgressBar = __webpack_require__(5);\n\t\n\tvar _ProgressBar2 = _interopRequireDefault(_ProgressBar);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * Biobank Specimen Form\n\t *\n\t * Fetches data from Loris backend and displays a form allowing\n\t * to specimen a biobank file attached to a specific instrument\n\t *\n\t * @author Henri Rabalais\n\t * @version 1.0.0\n\t *\n\t * */\n\tvar BiobankSpecimenForm = function (_React$Component) {\n\t  _inherits(BiobankSpecimenForm, _React$Component);\n\t\n\t  function BiobankSpecimenForm(props) {\n\t    _classCallCheck(this, BiobankSpecimenForm);\n\t\n\t    var _this = _possibleConstructorReturn(this, (BiobankSpecimenForm.__proto__ || Object.getPrototypeOf(BiobankSpecimenForm)).call(this, props));\n\t\n\t    _this.state = {\n\t      Data: {},\n\t      formData: {},\n\t      specimenResult: null,\n\t      errorMessage: null,\n\t      isLoaded: false,\n\t      loadedData: 0,\n\t      specimenProgress: -1\n\t    };\n\t\n\t    _this.getValidFileName = _this.getValidFileName.bind(_this);\n\t    _this.handleSubmit = _this.handleSubmit.bind(_this);\n\t    _this.isValidFileName = _this.isValidFileName.bind(_this);\n\t    _this.isValidForm = _this.isValidForm.bind(_this);\n\t    _this.setFormData = _this.setFormData.bind(_this);\n\t    _this.specimenFile = _this.specimenFile.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(BiobankSpecimenForm, [{\n\t    key: 'componentDidMount',\n\t    value: function componentDidMount() {\n\t      var self = this;\n\t      $.ajax(this.props.DataURL, {\n\t        dataType: 'json',\n\t        success: function success(data) {\n\t          self.setState({\n\t            Data: data,\n\t            isLoaded: true\n\t          });\n\t        },\n\t        error: function error(data, errorCode, errorMsg) {\n\t          console.error(data, errorCode, errorMsg);\n\t          self.setState({\n\t            error: 'An error occurred when loading the form!'\n\t          });\n\t        }\n\t      });\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t      // Data loading error\n\t      if (this.state.error !== undefined) {\n\t        return React.createElement(\n\t          'div',\n\t          { className: 'alert alert-danger text-center' },\n\t          React.createElement(\n\t            'strong',\n\t            null,\n\t            this.state.error\n\t          )\n\t        );\n\t      }\n\t\n\t      // Waiting for data to load\n\t      if (!this.state.isLoaded) {\n\t        return React.createElement(\n\t          'button',\n\t          { className: 'btn-info has-spinner' },\n\t          'Loading',\n\t          React.createElement('span', {\n\t            className: 'glyphicon glyphicon-refresh glyphicon-refresh-animate' })\n\t        );\n\t      }\n\t\n\t      var helpText = React.createElement(\n\t        'span',\n\t        null,\n\t        'File name must begin with ',\n\t        React.createElement(\n\t          'b',\n\t          null,\n\t          '[PSCID]_[Visit Label]_[Instrument]'\n\t        ),\n\t        React.createElement('br', null),\n\t        'For example, for candidate ',\n\t        React.createElement(\n\t          'i',\n\t          null,\n\t          'ABC123'\n\t        ),\n\t        ', visit ',\n\t        React.createElement(\n\t          'i',\n\t          null,\n\t          'V1'\n\t        ),\n\t        ' for',\n\t        React.createElement(\n\t          'i',\n\t          null,\n\t          'Body Mass Index'\n\t        ),\n\t        ' the file name should be prefixed by:',\n\t        React.createElement(\n\t          'b',\n\t          null,\n\t          ' ABC123_V1_Body_Mass_Index'\n\t        ),\n\t        React.createElement('br', null),\n\t        'File cannot exceed ',\n\t        this.props.maxSpecimenSize\n\t      );\n\t\n\t      return React.createElement(\n\t        'div',\n\t        { className: 'row' },\n\t        React.createElement(\n\t          'div',\n\t          { className: 'col-md-8 col-lg-7' },\n\t          React.createElement(\n\t            FormElement,\n\t            {\n\t              name: 'biobankSpecimen',\n\t              fileSpecimen: true,\n\t              onSubmit: this.handleSubmit,\n\t              ref: 'form'\n\t            },\n\t            React.createElement(\n\t              'h3',\n\t              null,\n\t              'Specimen a biobank file'\n\t            ),\n\t            React.createElement('br', null),\n\t            React.createElement(StaticElement, {\n\t              label: 'Note',\n\t              text: helpText\n\t            }),\n\t            React.createElement(SelectElement, {\n\t              name: 'pscid',\n\t              label: 'PSCID',\n\t              options: this.state.Data.candidates,\n\t              onUserInput: this.setFormData,\n\t              ref: 'pscid',\n\t              hasError: false,\n\t              required: true,\n\t              value: this.state.formData.pscid\n\t            }),\n\t            React.createElement(SelectElement, {\n\t              name: 'visitLabel',\n\t              label: 'Visit Label',\n\t              options: this.state.Data.visits,\n\t              onUserInput: this.setFormData,\n\t              ref: 'visitLabel',\n\t              required: true,\n\t              value: this.state.formData.visitLabel\n\t            }),\n\t            React.createElement(SelectElement, {\n\t              name: 'forSite',\n\t              label: 'Site',\n\t              options: this.state.Data.sites,\n\t              onUserInput: this.setFormData,\n\t              ref: 'forSite',\n\t              required: true,\n\t              value: this.state.formData.forSite\n\t            }),\n\t            React.createElement(SelectElement, {\n\t              name: 'instrument',\n\t              label: 'Instrument',\n\t              options: this.state.Data.instruments,\n\t              onUserInput: this.setFormData,\n\t              ref: 'instrument',\n\t              value: this.state.formData.instrument\n\t            }),\n\t            React.createElement(DateElement, {\n\t              name: 'dateTaken',\n\t              label: 'Date of Administration',\n\t              minYear: '2000',\n\t              maxYear: '2017',\n\t              onUserInput: this.setFormData,\n\t              ref: 'dateTaken',\n\t              value: this.state.formData.dateTaken\n\t            }),\n\t            React.createElement(TextareaElement, {\n\t              name: 'comments',\n\t              label: 'Comments',\n\t              onUserInput: this.setFormData,\n\t              ref: 'comments',\n\t              value: this.state.formData.comments\n\t            }),\n\t            React.createElement(FileElement, {\n\t              name: 'file',\n\t              id: 'biobankSpecimenEl',\n\t              onUserInput: this.setFormData,\n\t              ref: 'file',\n\t              label: 'File to specimen',\n\t              required: true,\n\t              value: this.state.formData.file\n\t            }),\n\t            React.createElement(ButtonElement, { label: 'Specimen File' }),\n\t            React.createElement(\n\t              'div',\n\t              { className: 'row' },\n\t              React.createElement(\n\t                'div',\n\t                { className: 'col-sm-9 col-sm-offset-3' },\n\t                React.createElement(_ProgressBar2.default, { value: this.state.specimenProgress })\n\t              )\n\t            )\n\t          )\n\t        )\n\t      );\n\t    }\n\t\n\t    /** *******************************************************************************\n\t     *                      ******     Helper methods     *******\n\t     *********************************************************************************/\n\t\n\t    /**\n\t     * Returns a valid name for the file to be specimened\n\t     *\n\t     * @param {string} pscid - PSCID selected from the dropdown\n\t     * @param {string} visitLabel - Visit label selected from the dropdown\n\t     * @param {string} instrument - Instrument selected from the dropdown\n\t     * @return {string} - Generated valid filename for the current selection\n\t     */\n\t\n\t  }, {\n\t    key: 'getValidFileName',\n\t    value: function getValidFileName(pscid, visitLabel, instrument) {\n\t      var fileName = pscid + \"_\" + visitLabel;\n\t      if (instrument) fileName += \"_\" + instrument;\n\t\n\t      return fileName;\n\t    }\n\t\n\t    /**\n\t     * Handle form submission\n\t     * @param {object} e - Form submission event\n\t     */\n\t\n\t  }, {\n\t    key: 'handleSubmit',\n\t    value: function handleSubmit(e) {\n\t      e.preventDefault();\n\t\n\t      var formData = this.state.formData;\n\t      var formRefs = this.refs;\n\t      var biobankFiles = this.state.Data.biobankFiles ? this.state.Data.biobankFiles : [];\n\t\n\t      // Validate the form\n\t      if (!this.isValidForm(formRefs, formData)) {\n\t        return;\n\t      }\n\t\n\t      // Validate specimened file name\n\t      var instrument = formData.instrument ? formData.instrument : null;\n\t      var fileName = formData.file ? formData.file.name.replace(/\\s+/g, '_') : null;\n\t      var requiredFileName = this.getValidFileName(formData.pscid, formData.visitLabel, instrument);\n\t      if (!this.isValidFileName(requiredFileName, fileName)) {\n\t        swal(\"Invalid file name!\", \"File name should begin with: \" + requiredFileName, \"error\");\n\t        return;\n\t      }\n\t\n\t      // Check for duplicate file names\n\t      var isDuplicate = biobankFiles.indexOf(fileName);\n\t      if (isDuplicate >= 0) {\n\t        swal({\n\t          title: \"Are you sure?\",\n\t          text: \"A file with this name already exists!\\n Would you like to override existing file?\",\n\t          type: \"warning\",\n\t          showCancelButton: true,\n\t          confirmButtonText: 'Yes, I am sure!',\n\t          cancelButtonText: \"No, cancel it!\"\n\t        }, function (isConfirm) {\n\t          if (isConfirm) {\n\t            this.specimenFile();\n\t          } else {\n\t            swal(\"Cancelled\", \"Your imaginary file is safe :)\", \"error\");\n\t          }\n\t        }.bind(this));\n\t      } else {\n\t        this.specimenFile();\n\t      }\n\t    }\n\t\n\t    /*\n\t     * Specimens the file to the server\n\t     */\n\t\n\t  }, {\n\t    key: 'specimenFile',\n\t    value: function specimenFile() {\n\t      // Set form data and specimen the biobank file\n\t      var formData = this.state.formData;\n\t      var formObj = new FormData();\n\t      for (var key in formData) {\n\t        if (formData[key] !== \"\") {\n\t          formObj.append(key, formData[key]);\n\t        }\n\t      }\n\t\n\t      $.ajax({\n\t        type: 'POST',\n\t        url: this.props.action,\n\t        data: formObj,\n\t        cache: false,\n\t        contentType: false,\n\t        processData: false,\n\t        xhr: function () {\n\t          var xhr = new window.XMLHttpRequest();\n\t          xhr.specimen.addEventListener(\"progress\", function (evt) {\n\t            if (evt.lengthComputable) {\n\t              var percentage = Math.round(evt.loaded / evt.total * 100);\n\t              this.setState({ specimenProgress: percentage });\n\t            }\n\t          }.bind(this), false);\n\t          return xhr;\n\t        }.bind(this),\n\t        success: function () {\n\t          // Add git pfile to the list of exiting files\n\t          var biobankFiles = JSON.parse(JSON.stringify(this.state.Data.biobankFiles));\n\t          biobankFiles.push(formData.file.name);\n\t\n\t          // Trigger an update event to update all observers (i.e DataTable)\n\t          var event = new CustomEvent('update-datatable');\n\t          window.dispatchEvent(event);\n\t\n\t          this.setState({\n\t            biobankFiles: biobankFiles,\n\t            formData: {}, // reset form data after successful file specimen\n\t            specimenProgress: -1\n\t          });\n\t          swal(\"Specimen Successful!\", \"\", \"success\");\n\t        }.bind(this),\n\t        error: function (err) {\n\t          console.error(err);\n\t          var msg = err.responseJSON ? err.responseJSON.message : \"Specimen error!\";\n\t          this.setState({\n\t            errorMessage: msg,\n\t            specimenProgress: -1\n\t          });\n\t          swal(msg, \"\", \"error\");\n\t        }.bind(this)\n\t      });\n\t    }\n\t\n\t    /**\n\t     * Checks if the inputted file name is valid\n\t     *\n\t     * @param {string} requiredFileName - Required file name\n\t     * @param {string} fileName - Provided file name\n\t     * @return {boolean} - true if fileName starts with requiredFileName, false\n\t     *   otherwise\n\t     */\n\t\n\t  }, {\n\t    key: 'isValidFileName',\n\t    value: function isValidFileName(requiredFileName, fileName) {\n\t      if (fileName === null || requiredFileName === null) {\n\t        return false;\n\t      }\n\t\n\t      return fileName.indexOf(requiredFileName) === 0;\n\t    }\n\t\n\t    /**\n\t     * Validate the form\n\t     *\n\t     * @param {object} formRefs - Object containing references to React form elements\n\t     * @param {object} formData - Object containing form data inputed by user\n\t     * @return {boolean} - true if all required fields are filled, false otherwise\n\t     */\n\t\n\t  }, {\n\t    key: 'isValidForm',\n\t    value: function isValidForm(formRefs, formData) {\n\t      var isValidForm = true;\n\t\n\t      var requiredFields = {\n\t        pscid: null,\n\t        visitLabel: null,\n\t        file: null\n\t      };\n\t\n\t      Object.keys(requiredFields).map(function (field) {\n\t        if (formData[field]) {\n\t          requiredFields[field] = formData[field];\n\t        } else if (formRefs[field]) {\n\t          formRefs[field].props.hasError = true;\n\t          isValidForm = false;\n\t        }\n\t      });\n\t      this.forceUpdate();\n\t\n\t      return isValidForm;\n\t    }\n\t\n\t    /**\n\t     * Set the form data based on state values of child elements/componenets\n\t     *\n\t     * @param {string} formElement - name of the selected element\n\t     * @param {string} value - selected value for corresponding form element\n\t     */\n\t\n\t  }, {\n\t    key: 'setFormData',\n\t    value: function setFormData(formElement, value) {\n\t      // Only display visits and sites available for the current pscid\n\t      var visitLabel = this.state.formData.visitLabel;\n\t      var pscid = this.state.formData.pscid;\n\t\n\t      if (formElement === \"pscid\" && value !== \"\") {\n\t        this.state.Data.visits = this.state.Data.sessionData[value].visits;\n\t        this.state.Data.sites = this.state.Data.sessionData[value].sites;\n\t        if (visitLabel) {\n\t          this.state.Data.instruments = this.state.Data.sessionData[value].instruments[visitLabel];\n\t        } else {\n\t          this.state.Data.instruments = this.state.Data.sessionData[value].instruments.all;\n\t        }\n\t      }\n\t\n\t      if (formElement === \"visitLabel\" && value !== \"\" && pscid) {\n\t        this.state.Data.instruments = this.state.Data.sessionData[pscid].instruments[value];\n\t      }\n\t\n\t      var formData = this.state.formData;\n\t      formData[formElement] = value;\n\t\n\t      this.setState({\n\t        formData: formData\n\t      });\n\t    }\n\t  }]);\n\t\n\t  return BiobankSpecimenForm;\n\t}(React.Component);\n\t\n\tBiobankSpecimenForm.propTypes = {\n\t  DataURL: React.PropTypes.string.isRequired,\n\t  action: React.PropTypes.string.isRequired\n\t};\n\t\n\texports.default = BiobankSpecimenForm;\n\n/***/ },\n\n/***/ 5:\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * React ProgressBar.\n\t *\n\t * Updates UI automatically when passed a progress value between 0 and 100.\n\t * To hide progress bar before/after upload, set value to -1.\n\t *\n\t * Note: This component relies on Bootstrap 3 progress-bar classes\n\t * (http://getbootstrap.com/components/#progress)\n\t */\n\tvar ProgressBar = function (_React$Component) {\n\t  _inherits(ProgressBar, _React$Component);\n\t\n\t  function ProgressBar() {\n\t    _classCallCheck(this, ProgressBar);\n\t\n\t    return _possibleConstructorReturn(this, (ProgressBar.__proto__ || Object.getPrototypeOf(ProgressBar)).apply(this, arguments));\n\t  }\n\t\n\t  _createClass(ProgressBar, [{\n\t    key: 'render',\n\t    value: function render() {\n\t      var progressStyle = {\n\t        display: this.props.value < 0 ? 'none' : 'block',\n\t        backgroundColor: '#d3d3d3',\n\t        height: '30px',\n\t        position: 'relative'\n\t      };\n\t\n\t      var labelStyle = {\n\t        position: 'absolute',\n\t        top: 0,\n\t        left: 0,\n\t        zIndex: 1000,\n\t        width: '100%',\n\t        color: '#fff',\n\t        textAlign: 'center',\n\t        lineHeight: '30px',\n\t        fontWeight: '600'\n\t      };\n\t\n\t      return React.createElement(\n\t        'div',\n\t        { className: 'progress', style: progressStyle },\n\t        React.createElement('div', {\n\t          className: 'progress-bar progress-bar-striped active',\n\t          role: 'progressbar',\n\t          'aria-valuemin': '0',\n\t          'aria-valuemax': '100',\n\t          'aria-valuenow': this.props.value,\n\t          style: { width: this.props.value + '%' }\n\t        }),\n\t        React.createElement(\n\t          'span',\n\t          { style: labelStyle },\n\t          this.props.value,\n\t          '%'\n\t        )\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return ProgressBar;\n\t}(React.Component);\n\t\n\tProgressBar.propTypes = {\n\t  value: React.PropTypes.number\n\t};\n\tProgressBar.defaultProps = {\n\t  value: 0\n\t};\n\t\n\texports.default = ProgressBar;\n\n/***/ }\n\n/******/ });\n\n\n// WEBPACK FOOTER //\n// modules/biobank/js/specimenForm.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 13e174a7fedca0f84b33","import ProgressBar from 'ProgressBar';\n\n/**\n * Biobank Specimen Form\n *\n * Fetches data from Loris backend and displays a form allowing\n * to specimen a biobank file attached to a specific instrument\n *\n * @author Henri Rabalais\n * @version 1.0.0\n *\n * */\nclass BiobankSpecimenForm extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      Data: {},\n      formData: {},\n      specimenResult: null,\n      errorMessage: null,\n      isLoaded: false,\n      loadedData: 0,\n      specimenProgress: -1\n    };\n\n    this.getValidFileName = this.getValidFileName.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.isValidFileName = this.isValidFileName.bind(this);\n    this.isValidForm = this.isValidForm.bind(this);\n    this.setFormData = this.setFormData.bind(this);\n    this.specimenFile = this.specimenFile.bind(this);\n  }\n\n  componentDidMount() {\n    var self = this;\n    $.ajax(this.props.DataURL, {\n      dataType: 'json',\n      success: function(data) {\n        self.setState({\n          Data: data,\n          isLoaded: true\n        });\n      },\n      error: function(data, errorCode, errorMsg) {\n        console.error(data, errorCode, errorMsg);\n        self.setState({\n          error: 'An error occurred when loading the form!'\n        });\n      }\n    });\n  }\n\n  render() {\n    // Data loading error\n    if (this.state.error !== undefined) {\n      return (\n        <div className=\"alert alert-danger text-center\">\n          <strong>\n            {this.state.error}\n          </strong>\n        </div>\n      );\n    }\n\n    // Waiting for data to load\n    if (!this.state.isLoaded) {\n      return (\n        <button className=\"btn-info has-spinner\">\n          Loading\n          <span\n            className=\"glyphicon glyphicon-refresh glyphicon-refresh-animate\">\n          </span>\n        </button>\n      );\n    }\n\n    var helpText = (\n      <span>\n        File name must begin with <b>[PSCID]_[Visit Label]_[Instrument]</b><br/>\n        For example, for candidate <i>ABC123</i>, visit <i>V1</i> for\n        <i>Body Mass Index</i> the file name should be prefixed by:\n        <b> ABC123_V1_Body_Mass_Index</b><br/>\n        File cannot exceed {this.props.maxSpecimenSize}\n      </span>\n    );\n\n    return (\n      <div className=\"row\">\n        <div className=\"col-md-8 col-lg-7\">\n          <FormElement\n            name=\"biobankSpecimen\"\n            fileSpecimen={true}\n            onSubmit={this.handleSubmit}\n            ref=\"form\"\n          >\n            <h3>Specimen a biobank file</h3><br/>\n            <StaticElement\n              label=\"Note\"\n              text={helpText}\n            />\n            <SelectElement\n              name=\"pscid\"\n              label=\"PSCID\"\n              options={this.state.Data.candidates}\n              onUserInput={this.setFormData}\n              ref=\"pscid\"\n              hasError={false}\n              required={true}\n              value={this.state.formData.pscid}\n            />\n            <SelectElement\n              name=\"visitLabel\"\n              label=\"Visit Label\"\n              options={this.state.Data.visits}\n              onUserInput={this.setFormData}\n              ref=\"visitLabel\"\n              required={true}\n              value={this.state.formData.visitLabel}\n            />\n            <SelectElement\n              name=\"forSite\"\n              label=\"Site\"\n              options={this.state.Data.sites}\n              onUserInput={this.setFormData}\n              ref=\"forSite\"\n              required={true}\n              value={this.state.formData.forSite}\n            />\n            <SelectElement\n              name=\"instrument\"\n              label=\"Instrument\"\n              options={this.state.Data.instruments}\n              onUserInput={this.setFormData}\n              ref=\"instrument\"\n              value={this.state.formData.instrument}\n            />\n            <DateElement\n              name=\"dateTaken\"\n              label=\"Date of Administration\"\n              minYear=\"2000\"\n              maxYear=\"2017\"\n              onUserInput={this.setFormData}\n              ref=\"dateTaken\"\n              value={this.state.formData.dateTaken}\n            />\n            <TextareaElement\n              name=\"comments\"\n              label=\"Comments\"\n              onUserInput={this.setFormData}\n              ref=\"comments\"\n              value={this.state.formData.comments}\n            />\n            <FileElement\n              name=\"file\"\n              id=\"biobankSpecimenEl\"\n              onUserInput={this.setFormData}\n              ref=\"file\"\n              label=\"File to specimen\"\n              required={true}\n              value={this.state.formData.file}\n            />\n            <ButtonElement label=\"Specimen File\"/>\n            <div className=\"row\">\n              <div className=\"col-sm-9 col-sm-offset-3\">\n                <ProgressBar value={this.state.specimenProgress}/>\n              </div>\n            </div>\n          </FormElement>\n        </div>\n      </div>\n    );\n  }\n\n/** *******************************************************************************\n *                      ******     Helper methods     *******\n *********************************************************************************/\n\n  /**\n   * Returns a valid name for the file to be specimened\n   *\n   * @param {string} pscid - PSCID selected from the dropdown\n   * @param {string} visitLabel - Visit label selected from the dropdown\n   * @param {string} instrument - Instrument selected from the dropdown\n   * @return {string} - Generated valid filename for the current selection\n   */\n  getValidFileName(pscid, visitLabel, instrument) {\n    var fileName = pscid + \"_\" + visitLabel;\n    if (instrument) fileName += \"_\" + instrument;\n\n    return fileName;\n  }\n\n  /**\n   * Handle form submission\n   * @param {object} e - Form submission event\n   */\n  handleSubmit(e) {\n    e.preventDefault();\n\n    let formData = this.state.formData;\n    let formRefs = this.refs;\n    let biobankFiles = this.state.Data.biobankFiles ? this.state.Data.biobankFiles : [];\n\n    // Validate the form\n    if (!this.isValidForm(formRefs, formData)) {\n      return;\n    }\n\n    // Validate specimened file name\n    let instrument = formData.instrument ? formData.instrument : null;\n    let fileName = formData.file ? formData.file.name.replace(/\\s+/g, '_') : null;\n    let requiredFileName = this.getValidFileName(\n      formData.pscid, formData.visitLabel, instrument\n    );\n    if (!this.isValidFileName(requiredFileName, fileName)) {\n      swal(\n        \"Invalid file name!\",\n        \"File name should begin with: \" + requiredFileName,\n        \"error\"\n      );\n      return;\n    }\n\n    // Check for duplicate file names\n    let isDuplicate = biobankFiles.indexOf(fileName);\n    if (isDuplicate >= 0) {\n      swal({\n        title: \"Are you sure?\",\n        text: \"A file with this name already exists!\\n Would you like to override existing file?\",\n        type: \"warning\",\n        showCancelButton: true,\n        confirmButtonText: 'Yes, I am sure!',\n        cancelButtonText: \"No, cancel it!\"\n      }, function(isConfirm) {\n        if (isConfirm) {\n          this.specimenFile();\n        } else {\n          swal(\"Cancelled\", \"Your imaginary file is safe :)\", \"error\");\n        }\n      }.bind(this));\n    } else {\n      this.specimenFile();\n    }\n  }\n\n  /*\n   * Specimens the file to the server\n   */\n  specimenFile() {\n    // Set form data and specimen the biobank file\n    let formData = this.state.formData;\n    let formObj = new FormData();\n    for (let key in formData) {\n      if (formData[key] !== \"\") {\n        formObj.append(key, formData[key]);\n      }\n    }\n\n    $.ajax({\n      type: 'POST',\n      url: this.props.action,\n      data: formObj,\n      cache: false,\n      contentType: false,\n      processData: false,\n      xhr: function() {\n        let xhr = new window.XMLHttpRequest();\n        xhr.specimen.addEventListener(\"progress\", function(evt) {\n          if (evt.lengthComputable) {\n            let percentage = Math.round((evt.loaded / evt.total) * 100);\n            this.setState({specimenProgress: percentage});\n          }\n        }.bind(this), false);\n        return xhr;\n      }.bind(this),\n      success: function() {\n        // Add git pfile to the list of exiting files\n        let biobankFiles = JSON.parse(JSON.stringify(this.state.Data.biobankFiles));\n        biobankFiles.push(formData.file.name);\n\n        // Trigger an update event to update all observers (i.e DataTable)\n        let event = new CustomEvent('update-datatable');\n        window.dispatchEvent(event);\n\n        this.setState({\n          biobankFiles: biobankFiles,\n          formData: {}, // reset form data after successful file specimen\n          specimenProgress: -1\n        });\n        swal(\"Specimen Successful!\", \"\", \"success\");\n      }.bind(this),\n      error: function(err) {\n        console.error(err);\n        let msg = err.responseJSON ? err.responseJSON.message : \"Specimen error!\";\n        this.setState({\n          errorMessage: msg,\n          specimenProgress: -1\n        });\n        swal(msg, \"\", \"error\");\n      }.bind(this)\n    });\n  }\n\n  /**\n   * Checks if the inputted file name is valid\n   *\n   * @param {string} requiredFileName - Required file name\n   * @param {string} fileName - Provided file name\n   * @return {boolean} - true if fileName starts with requiredFileName, false\n   *   otherwise\n   */\n  isValidFileName(requiredFileName, fileName) {\n    if (fileName === null || requiredFileName === null) {\n      return false;\n    }\n\n    return (fileName.indexOf(requiredFileName) === 0);\n  }\n\n  /**\n   * Validate the form\n   *\n   * @param {object} formRefs - Object containing references to React form elements\n   * @param {object} formData - Object containing form data inputed by user\n   * @return {boolean} - true if all required fields are filled, false otherwise\n   */\n  isValidForm(formRefs, formData) {\n    var isValidForm = true;\n\n    var requiredFields = {\n      pscid: null,\n      visitLabel: null,\n      file: null\n    };\n\n    Object.keys(requiredFields).map(function(field) {\n      if (formData[field]) {\n        requiredFields[field] = formData[field];\n      } else if (formRefs[field]) {\n        formRefs[field].props.hasError = true;\n        isValidForm = false;\n      }\n    });\n    this.forceUpdate();\n\n    return isValidForm;\n  }\n\n  /**\n   * Set the form data based on state values of child elements/componenets\n   *\n   * @param {string} formElement - name of the selected element\n   * @param {string} value - selected value for corresponding form element\n   */\n  setFormData(formElement, value) {\n    // Only display visits and sites available for the current pscid\n    let visitLabel = this.state.formData.visitLabel;\n    let pscid = this.state.formData.pscid;\n\n    if (formElement === \"pscid\" && value !== \"\") {\n      this.state.Data.visits = this.state.Data.sessionData[value].visits;\n      this.state.Data.sites = this.state.Data.sessionData[value].sites;\n      if (visitLabel) {\n        this.state.Data.instruments =\n          this.state.Data.sessionData[value].instruments[visitLabel];\n      } else {\n        this.state.Data.instruments =\n          this.state.Data.sessionData[value].instruments.all;\n      }\n    }\n\n    if (formElement === \"visitLabel\" && value !== \"\" && pscid) {\n      this.state.Data.instruments =\n        this.state.Data.sessionData[pscid].instruments[value];\n    }\n\n    var formData = this.state.formData;\n    formData[formElement] = value;\n\n    this.setState({\n      formData: formData\n    });\n  }\n}\n\nBiobankSpecimenForm.propTypes = {\n  DataURL: React.PropTypes.string.isRequired,\n  action: React.PropTypes.string.isRequired\n};\n\nexport default BiobankSpecimenForm;\n\n\n\n// WEBPACK FOOTER //\n// ./modules/biobank/jsx/specimenForm.js","/**\n * React ProgressBar.\n *\n * Updates UI automatically when passed a progress value between 0 and 100.\n * To hide progress bar before/after upload, set value to -1.\n *\n * Note: This component relies on Bootstrap 3 progress-bar classes\n * (http://getbootstrap.com/components/#progress)\n */\nclass ProgressBar extends React.Component {\n  render() {\n    const progressStyle = {\n      display: (this.props.value < 0 ? 'none' : 'block'),\n      backgroundColor: '#d3d3d3',\n      height: '30px',\n      position: 'relative'\n    };\n\n    const labelStyle = {\n      position: 'absolute',\n      top: 0,\n      left: 0,\n      zIndex: 1000,\n      width: '100%',\n      color: '#fff',\n      textAlign: 'center',\n      lineHeight: '30px',\n      fontWeight: '600'\n    };\n\n    return (\n      <div className=\"progress\" style={progressStyle}>\n        <div\n          className=\"progress-bar progress-bar-striped active\"\n          role=\"progressbar\"\n          aria-valuemin=\"0\"\n          aria-valuemax=\"100\"\n          aria-valuenow={this.props.value}\n          style={{width: (this.props.value + '%')}}\n        >\n        </div>\n        <span style={labelStyle}>{this.props.value}%</span>\n      </div>\n    );\n  }\n}\n\nProgressBar.propTypes = {\n  value: React.PropTypes.number\n};\nProgressBar.defaultProps = {\n  value: 0\n};\n\nexport default ProgressBar;\n\n\n\n// WEBPACK FOOTER //\n// ./jsx/ProgressBar.js"],"sourceRoot":""}